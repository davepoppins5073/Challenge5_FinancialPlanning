commit 3b20d7fb305a5fa89c2d3d4f61172dbcfde371ea
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Sun Apr 24 22:03:27 2022 -0400

    Redid all the work from last night that didnt save

diff --git a/financial_planning_tools.ipynb b/financial_planning_tools.ipynb
index 5d2622f..712d031 100644
--- a/financial_planning_tools.ipynb
+++ b/financial_planning_tools.ipynb
@@ -3046,14 +3046,1198 @@
     "print(f\"30 year upper estimation {upper_cumltv_return}, 10 year upper estimation {upper_cumltv_return_10y }\")"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### ANSWER"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "From Investopedia we have the following:\n",
+    "\"Most experts say your retirement income should be about 80% of your final pre-retirement annual income.1 That means if you make $100,000 annually at retirement, you need at least $80,000 per year to have a comfortable lifestyle after leaving the workforce.\"\n",
+    "\n",
+    "Judging from that quopte alone, it is fair to say that this question is not nuanced enough to answer correctly. You cannot estimate what this person needs to retire without knowing:\n",
+    "1. What kind of lifestyle/quality of life does this person want after retirement? \n",
+    "2. What will be their monthly and yearly withdrawals ?\n",
+    "3. What is their current salary?\n",
+    "We know that member's household income is $12,000? (Is this pre-taxes, generated by 2 people?)\n",
+    "\n",
+    "What this question seeks to ask is whether an investor can make more money, or money equal to their projected returned by investing more in a more volatile asset for a shorter period of time. The answer comes down to which stock? For this stock here SPY. the answer is no.\n",
+    "However I want to show proof.\n",
+    "\n",
+    "#### **SPY**\n",
+    "#####**Sharpe Ratio Chart**\n",
+    "\n",
+    "-- <ins>The Sharpe Ratio</ins> shows whether the portfolio's excess returns are due to smart investment decisions or a result of taking a higher risk. The higher a portfolio's Sharpe ratio, the better its risk-adjusted performance. The current SPDR S&P 500 ETF Sharpe ratio is 0.23. A Sharpe ratio between 0 and 1.0 is considered sub-optimal.\n",
+    "\n",
+    "\n",
+    "#### **SPY**\n",
+    "##### **Sortino Ratio Chart**\n",
+    "-- <ins>The Sortino Ratio</ins> is an indicator that measures a portfolio's risk-adjusted performance. The Sortino ratio is the ratio of a portfolio's excess return to risk. It is widely used as an indicator of the \"quality\" of an investment fund or portfolio.  The current Sortino ratio is -0.13 - A Sortino ratio between 0 and 1.0 is considered sub-optimal.\n",
+    "\n",
+    "You can see the work I did below but I reran the Monte Carlo assuming the same amount of starting capital, and got a new upper and lower limit with 95% certainty:\n",
+    "\n",
+    "##### 80/20 ratio Scenario 1\n",
+    "-> 10 years lower w/SPY Stock:  $56,633.15\n",
+    "-> 10 years upper w/SPY Stock: $117,595.54\n",
+    "\n",
+    "#### 80/20 ratio Scenario 2\n",
+    "-> 10 years lower w/ TSLA Stock:  $75,205.31\n",
+    "-> 10 years upper w/ TSLA Stock: $366,625.64\n",
+    "\n",
+    "My guess and I am not a portfolio manager, is that the strategy of investing more in a more volatile asset for a shorter period of time can work if the right stock is picked. "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### CHECKING MY HYPOTHESIS"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 105,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>symbol</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2017-04-21 04:00:00+00:00</th>\n",
+       "      <td>109.40</td>\n",
+       "      <td>109.4899</td>\n",
+       "      <td>109.30</td>\n",
+       "      <td>109.34</td>\n",
+       "      <td>1539265</td>\n",
+       "      <td>8708</td>\n",
+       "      <td>109.386803</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-24 04:00:00+00:00</th>\n",
+       "      <td>109.05</td>\n",
+       "      <td>109.2200</td>\n",
+       "      <td>109.00</td>\n",
+       "      <td>109.18</td>\n",
+       "      <td>2745689</td>\n",
+       "      <td>10549</td>\n",
+       "      <td>109.150827</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-25 04:00:00+00:00</th>\n",
+       "      <td>108.99</td>\n",
+       "      <td>109.0450</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>1888469</td>\n",
+       "      <td>10064</td>\n",
+       "      <td>108.912429</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-26 04:00:00+00:00</th>\n",
+       "      <td>108.85</td>\n",
+       "      <td>108.9700</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.96</td>\n",
+       "      <td>2893801</td>\n",
+       "      <td>10145</td>\n",
+       "      <td>108.884769</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-27 04:00:00+00:00</th>\n",
+       "      <td>108.94</td>\n",
+       "      <td>109.1000</td>\n",
+       "      <td>108.91</td>\n",
+       "      <td>109.06</td>\n",
+       "      <td>1660940</td>\n",
+       "      <td>7367</td>\n",
+       "      <td>109.026595</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                             open      high     low   close   volume  \\\n",
+       "timestamp                                                              \n",
+       "2017-04-21 04:00:00+00:00  109.40  109.4899  109.30  109.34  1539265   \n",
+       "2017-04-24 04:00:00+00:00  109.05  109.2200  109.00  109.18  2745689   \n",
+       "2017-04-25 04:00:00+00:00  108.99  109.0450  108.77  108.82  1888469   \n",
+       "2017-04-26 04:00:00+00:00  108.85  108.9700  108.77  108.96  2893801   \n",
+       "2017-04-27 04:00:00+00:00  108.94  109.1000  108.91  109.06  1660940   \n",
+       "\n",
+       "                           trade_count        vwap symbol  \n",
+       "timestamp                                                  \n",
+       "2017-04-21 04:00:00+00:00         8708  109.386803    AGG  \n",
+       "2017-04-24 04:00:00+00:00        10549  109.150827    AGG  \n",
+       "2017-04-25 04:00:00+00:00        10064  108.912429    AGG  \n",
+       "2017-04-26 04:00:00+00:00        10145  108.884769    AGG  \n",
+       "2017-04-27 04:00:00+00:00         7367  109.026595    AGG  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>symbol</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2020-04-15 04:00:00+00:00</th>\n",
+       "      <td>741.49</td>\n",
+       "      <td>753.13</td>\n",
+       "      <td>710.000</td>\n",
+       "      <td>729.83</td>\n",
+       "      <td>23659403</td>\n",
+       "      <td>477432</td>\n",
+       "      <td>732.954655</td>\n",
+       "      <td>TSLA</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-16 04:00:00+00:00</th>\n",
+       "      <td>716.41</td>\n",
+       "      <td>759.45</td>\n",
+       "      <td>706.715</td>\n",
+       "      <td>745.21</td>\n",
+       "      <td>20657864</td>\n",
+       "      <td>406968</td>\n",
+       "      <td>737.487077</td>\n",
+       "      <td>TSLA</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-17 04:00:00+00:00</th>\n",
+       "      <td>772.92</td>\n",
+       "      <td>774.95</td>\n",
+       "      <td>747.660</td>\n",
+       "      <td>753.89</td>\n",
+       "      <td>13128243</td>\n",
+       "      <td>275594</td>\n",
+       "      <td>759.136647</td>\n",
+       "      <td>TSLA</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-20 04:00:00+00:00</th>\n",
+       "      <td>732.70</td>\n",
+       "      <td>765.57</td>\n",
+       "      <td>712.210</td>\n",
+       "      <td>746.36</td>\n",
+       "      <td>14752777</td>\n",
+       "      <td>288932</td>\n",
+       "      <td>748.115609</td>\n",
+       "      <td>TSLA</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-21 04:00:00+00:00</th>\n",
+       "      <td>729.20</td>\n",
+       "      <td>753.33</td>\n",
+       "      <td>673.790</td>\n",
+       "      <td>686.72</td>\n",
+       "      <td>20221693</td>\n",
+       "      <td>453969</td>\n",
+       "      <td>708.331090</td>\n",
+       "      <td>TSLA</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                             open    high      low   close    volume  \\\n",
+       "timestamp                                                              \n",
+       "2020-04-15 04:00:00+00:00  741.49  753.13  710.000  729.83  23659403   \n",
+       "2020-04-16 04:00:00+00:00  716.41  759.45  706.715  745.21  20657864   \n",
+       "2020-04-17 04:00:00+00:00  772.92  774.95  747.660  753.89  13128243   \n",
+       "2020-04-20 04:00:00+00:00  732.70  765.57  712.210  746.36  14752777   \n",
+       "2020-04-21 04:00:00+00:00  729.20  753.33  673.790  686.72  20221693   \n",
+       "\n",
+       "                           trade_count        vwap symbol  \n",
+       "timestamp                                                  \n",
+       "2020-04-15 04:00:00+00:00       477432  732.954655   TSLA  \n",
+       "2020-04-16 04:00:00+00:00       406968  737.487077   TSLA  \n",
+       "2020-04-17 04:00:00+00:00       275594  759.136647   TSLA  \n",
+       "2020-04-20 04:00:00+00:00       288932  748.115609   TSLA  \n",
+       "2020-04-21 04:00:00+00:00       453969  708.331090   TSLA  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "(755, 7)"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "(755, 7)"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"7\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"7\" halign=\"left\">TSLA</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2017-04-21</th>\n",
+       "      <td>109.40</td>\n",
+       "      <td>109.4899</td>\n",
+       "      <td>109.30</td>\n",
+       "      <td>109.34</td>\n",
+       "      <td>1539265</td>\n",
+       "      <td>8708</td>\n",
+       "      <td>109.386803</td>\n",
+       "      <td>302.00</td>\n",
+       "      <td>306.40</td>\n",
+       "      <td>300.4200</td>\n",
+       "      <td>305.60</td>\n",
+       "      <td>4534756</td>\n",
+       "      <td>36926</td>\n",
+       "      <td>304.128977</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-24</th>\n",
+       "      <td>109.05</td>\n",
+       "      <td>109.2200</td>\n",
+       "      <td>109.00</td>\n",
+       "      <td>109.18</td>\n",
+       "      <td>2745689</td>\n",
+       "      <td>10549</td>\n",
+       "      <td>109.150827</td>\n",
+       "      <td>309.34</td>\n",
+       "      <td>310.55</td>\n",
+       "      <td>306.0215</td>\n",
+       "      <td>308.03</td>\n",
+       "      <td>5084205</td>\n",
+       "      <td>45574</td>\n",
+       "      <td>308.094785</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-25</th>\n",
+       "      <td>108.99</td>\n",
+       "      <td>109.0450</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>1888469</td>\n",
+       "      <td>10064</td>\n",
+       "      <td>108.912429</td>\n",
+       "      <td>308.00</td>\n",
+       "      <td>313.98</td>\n",
+       "      <td>305.8600</td>\n",
+       "      <td>313.79</td>\n",
+       "      <td>6787708</td>\n",
+       "      <td>61699</td>\n",
+       "      <td>310.757102</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-26</th>\n",
+       "      <td>108.85</td>\n",
+       "      <td>108.9700</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.96</td>\n",
+       "      <td>2893801</td>\n",
+       "      <td>10145</td>\n",
+       "      <td>108.884769</td>\n",
+       "      <td>312.37</td>\n",
+       "      <td>314.50</td>\n",
+       "      <td>309.0000</td>\n",
+       "      <td>310.17</td>\n",
+       "      <td>4705044</td>\n",
+       "      <td>38266</td>\n",
+       "      <td>311.344765</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-04-27</th>\n",
+       "      <td>108.94</td>\n",
+       "      <td>109.1000</td>\n",
+       "      <td>108.91</td>\n",
+       "      <td>109.06</td>\n",
+       "      <td>1660940</td>\n",
+       "      <td>7367</td>\n",
+       "      <td>109.026595</td>\n",
+       "      <td>311.69</td>\n",
+       "      <td>313.09</td>\n",
+       "      <td>307.5000</td>\n",
+       "      <td>308.63</td>\n",
+       "      <td>3468569</td>\n",
+       "      <td>31417</td>\n",
+       "      <td>310.276352</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               AGG                                                             \\\n",
+       "              open      high     low   close   volume trade_count        vwap   \n",
+       "2017-04-21  109.40  109.4899  109.30  109.34  1539265        8708  109.386803   \n",
+       "2017-04-24  109.05  109.2200  109.00  109.18  2745689       10549  109.150827   \n",
+       "2017-04-25  108.99  109.0450  108.77  108.82  1888469       10064  108.912429   \n",
+       "2017-04-26  108.85  108.9700  108.77  108.96  2893801       10145  108.884769   \n",
+       "2017-04-27  108.94  109.1000  108.91  109.06  1660940        7367  109.026595   \n",
+       "\n",
+       "              TSLA                                                             \n",
+       "              open    high       low   close   volume trade_count        vwap  \n",
+       "2017-04-21  302.00  306.40  300.4200  305.60  4534756       36926  304.128977  \n",
+       "2017-04-24  309.34  310.55  306.0215  308.03  5084205       45574  308.094785  \n",
+       "2017-04-25  308.00  313.98  305.8600  313.79  6787708       61699  310.757102  \n",
+       "2017-04-26  312.37  314.50  309.0000  310.17  4705044       38266  311.344765  \n",
+       "2017-04-27  311.69  313.09  307.5000  308.63  3468569       31417  310.276352  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"7\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"7\" halign=\"left\">TSLA</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2020-04-15</th>\n",
+       "      <td>117.03</td>\n",
+       "      <td>117.305</td>\n",
+       "      <td>116.710</td>\n",
+       "      <td>117.24</td>\n",
+       "      <td>4367913</td>\n",
+       "      <td>19622</td>\n",
+       "      <td>117.144903</td>\n",
+       "      <td>741.49</td>\n",
+       "      <td>753.13</td>\n",
+       "      <td>710.000</td>\n",
+       "      <td>729.83</td>\n",
+       "      <td>23659403</td>\n",
+       "      <td>477432</td>\n",
+       "      <td>732.954655</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-16</th>\n",
+       "      <td>117.19</td>\n",
+       "      <td>117.525</td>\n",
+       "      <td>117.190</td>\n",
+       "      <td>117.39</td>\n",
+       "      <td>4744716</td>\n",
+       "      <td>16906</td>\n",
+       "      <td>117.399687</td>\n",
+       "      <td>716.41</td>\n",
+       "      <td>759.45</td>\n",
+       "      <td>706.715</td>\n",
+       "      <td>745.21</td>\n",
+       "      <td>20657864</td>\n",
+       "      <td>406968</td>\n",
+       "      <td>737.487077</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-17</th>\n",
+       "      <td>117.52</td>\n",
+       "      <td>117.620</td>\n",
+       "      <td>117.035</td>\n",
+       "      <td>117.25</td>\n",
+       "      <td>4949824</td>\n",
+       "      <td>25621</td>\n",
+       "      <td>117.358347</td>\n",
+       "      <td>772.92</td>\n",
+       "      <td>774.95</td>\n",
+       "      <td>747.660</td>\n",
+       "      <td>753.89</td>\n",
+       "      <td>13128243</td>\n",
+       "      <td>275594</td>\n",
+       "      <td>759.136647</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-20</th>\n",
+       "      <td>117.15</td>\n",
+       "      <td>117.280</td>\n",
+       "      <td>116.940</td>\n",
+       "      <td>117.08</td>\n",
+       "      <td>3856448</td>\n",
+       "      <td>18509</td>\n",
+       "      <td>117.030839</td>\n",
+       "      <td>732.70</td>\n",
+       "      <td>765.57</td>\n",
+       "      <td>712.210</td>\n",
+       "      <td>746.36</td>\n",
+       "      <td>14752777</td>\n",
+       "      <td>288932</td>\n",
+       "      <td>748.115609</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-04-21</th>\n",
+       "      <td>117.43</td>\n",
+       "      <td>117.440</td>\n",
+       "      <td>117.070</td>\n",
+       "      <td>117.14</td>\n",
+       "      <td>4660507</td>\n",
+       "      <td>19425</td>\n",
+       "      <td>117.166762</td>\n",
+       "      <td>729.20</td>\n",
+       "      <td>753.33</td>\n",
+       "      <td>673.790</td>\n",
+       "      <td>686.72</td>\n",
+       "      <td>20221693</td>\n",
+       "      <td>453969</td>\n",
+       "      <td>708.331090</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               AGG                                                             \\\n",
+       "              open     high      low   close   volume trade_count        vwap   \n",
+       "2020-04-15  117.03  117.305  116.710  117.24  4367913       19622  117.144903   \n",
+       "2020-04-16  117.19  117.525  117.190  117.39  4744716       16906  117.399687   \n",
+       "2020-04-17  117.52  117.620  117.035  117.25  4949824       25621  117.358347   \n",
+       "2020-04-20  117.15  117.280  116.940  117.08  3856448       18509  117.030839   \n",
+       "2020-04-21  117.43  117.440  117.070  117.14  4660507       19425  117.166762   \n",
+       "\n",
+       "              TSLA                                                             \n",
+       "              open    high      low   close    volume trade_count        vwap  \n",
+       "2020-04-15  741.49  753.13  710.000  729.83  23659403      477432  732.954655  \n",
+       "2020-04-16  716.41  759.45  706.715  745.21  20657864      406968  737.487077  \n",
+       "2020-04-17  772.92  774.95  747.660  753.89  13128243      275594  759.136647  \n",
+       "2020-04-20  732.70  765.57  712.210  746.36  14752777      288932  748.115609  \n",
+       "2020-04-21  729.20  753.33  673.790  686.72  20221693      453969  708.331090  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "test_tickers = ['TSLA','AGG']\n",
+    "\n",
+    "# Using the Alpaca get_bars function to make the API call to get the 3 years worth of pricing data\n",
+    "# The start and end dates are updated added the df property to the end of the call\n",
+    "test_prices_df = alpaca.get_bars(\n",
+    "    test_tickers,\n",
+    "    timeframe,\n",
+    "    start=start_date_mc,\n",
+    "    end=end_date_mc\n",
+    "    #limit=limit_rows\n",
+    ").df\n",
+    "\n",
+    "#checking\n",
+    "display(test_prices_df.head())\n",
+    "display(test_prices_df.tail())\n",
+    "\n",
+    "# Reorganize the DataFrame: Separate ticker data\n",
+    "AGG = test_prices_df[test_prices_df['symbol']=='AGG'].drop('symbol', axis=1)\n",
+    "TSLA = test_prices_df[test_prices_df['symbol']=='TSLA'].drop('symbol', axis=1)\n",
+    "\n",
+    "# Check what the Separate Ticket Data looks like before concatenation\n",
+    "display(TSLA.shape)\n",
+    "display(AGG.shape)\n",
+    "\n",
+    "# Concatenate the tsla and agg ticker DataFrames\n",
+    "tst_prices= pd.DataFrame()\n",
+    "tst_prices= pd.concat([AGG,TSLA],axis=1, keys=['AGG','TSLA'])\n",
+    "tst_prices.index = tst_prices.index.date\n",
+    "\n",
+    "display(tst_prices.head())\n",
+    "display(tst_prices.tail())\n",
+    "# Checking what the  first and last 5 lines look like \n",
+    "#display(f\" This is what the first 5 lines of the prices dataframe looks like: {test_df_prices.head()}\")\n",
+    "#display(f\" This is what the first 5 lines of the prices dataframe looks like: {test_df_prices.tail()}\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 108,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 0.\n",
+      "Running Monte Carlo simulation number 10.\n",
+      "Running Monte Carlo simulation number 20.\n",
+      "Running Monte Carlo simulation number 30.\n",
+      "Running Monte Carlo simulation number 40.\n",
+      "Running Monte Carlo simulation number 50.\n",
+      "Running Monte Carlo simulation number 60.\n",
+      "Running Monte Carlo simulation number 70.\n",
+      "Running Monte Carlo simulation number 80.\n",
+      "Running Monte Carlo simulation number 90.\n",
+      "Running Monte Carlo simulation number 100.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
+      "  portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 110.\n",
+      "Running Monte Carlo simulation number 120.\n",
+      "Running Monte Carlo simulation number 130.\n",
+      "Running Monte Carlo simulation number 140.\n",
+      "Running Monte Carlo simulation number 150.\n",
+      "Running Monte Carlo simulation number 160.\n",
+      "Running Monte Carlo simulation number 170.\n",
+      "Running Monte Carlo simulation number 180.\n",
+      "Running Monte Carlo simulation number 190.\n",
+      "Running Monte Carlo simulation number 200.\n",
+      "Running Monte Carlo simulation number 210.\n",
+      "Running Monte Carlo simulation number 220.\n",
+      "Running Monte Carlo simulation number 230.\n",
+      "Running Monte Carlo simulation number 240.\n",
+      "Running Monte Carlo simulation number 250.\n",
+      "Running Monte Carlo simulation number 260.\n",
+      "Running Monte Carlo simulation number 270.\n",
+      "Running Monte Carlo simulation number 280.\n",
+      "Running Monte Carlo simulation number 290.\n",
+      "Running Monte Carlo simulation number 300.\n",
+      "Running Monte Carlo simulation number 310.\n",
+      "Running Monte Carlo simulation number 320.\n",
+      "Running Monte Carlo simulation number 330.\n",
+      "Running Monte Carlo simulation number 340.\n",
+      "Running Monte Carlo simulation number 350.\n",
+      "Running Monte Carlo simulation number 360.\n",
+      "Running Monte Carlo simulation number 370.\n",
+      "Running Monte Carlo simulation number 380.\n",
+      "Running Monte Carlo simulation number 390.\n",
+      "Running Monte Carlo simulation number 400.\n",
+      "Running Monte Carlo simulation number 410.\n",
+      "Running Monte Carlo simulation number 420.\n",
+      "Running Monte Carlo simulation number 430.\n",
+      "Running Monte Carlo simulation number 440.\n",
+      "Running Monte Carlo simulation number 450.\n",
+      "Running Monte Carlo simulation number 460.\n",
+      "Running Monte Carlo simulation number 470.\n",
+      "Running Monte Carlo simulation number 480.\n",
+      "Running Monte Carlo simulation number 490.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>7</th>\n",
+       "      <th>8</th>\n",
+       "      <th>9</th>\n",
+       "      <th>...</th>\n",
+       "      <th>490</th>\n",
+       "      <th>491</th>\n",
+       "      <th>492</th>\n",
+       "      <th>493</th>\n",
+       "      <th>494</th>\n",
+       "      <th>495</th>\n",
+       "      <th>496</th>\n",
+       "      <th>497</th>\n",
+       "      <th>498</th>\n",
+       "      <th>499</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>1.002895</td>\n",
+       "      <td>0.999901</td>\n",
+       "      <td>0.995734</td>\n",
+       "      <td>1.013383</td>\n",
+       "      <td>1.015769</td>\n",
+       "      <td>1.006198</td>\n",
+       "      <td>1.005017</td>\n",
+       "      <td>1.009436</td>\n",
+       "      <td>1.011722</td>\n",
+       "      <td>0.998061</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.006381</td>\n",
+       "      <td>0.985935</td>\n",
+       "      <td>0.992381</td>\n",
+       "      <td>0.999903</td>\n",
+       "      <td>1.001444</td>\n",
+       "      <td>0.999970</td>\n",
+       "      <td>1.008876</td>\n",
+       "      <td>1.015792</td>\n",
+       "      <td>1.005959</td>\n",
+       "      <td>1.000120</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>0.993581</td>\n",
+       "      <td>0.993185</td>\n",
+       "      <td>0.993962</td>\n",
+       "      <td>1.019468</td>\n",
+       "      <td>1.012051</td>\n",
+       "      <td>1.004993</td>\n",
+       "      <td>0.978615</td>\n",
+       "      <td>1.008588</td>\n",
+       "      <td>1.008862</td>\n",
+       "      <td>0.984963</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.013135</td>\n",
+       "      <td>0.983050</td>\n",
+       "      <td>0.997790</td>\n",
+       "      <td>1.001451</td>\n",
+       "      <td>0.994479</td>\n",
+       "      <td>0.986225</td>\n",
+       "      <td>1.026629</td>\n",
+       "      <td>1.019737</td>\n",
+       "      <td>1.005568</td>\n",
+       "      <td>1.002287</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>0.992170</td>\n",
+       "      <td>0.991641</td>\n",
+       "      <td>0.996764</td>\n",
+       "      <td>1.015467</td>\n",
+       "      <td>0.999940</td>\n",
+       "      <td>1.017830</td>\n",
+       "      <td>0.995455</td>\n",
+       "      <td>1.013935</td>\n",
+       "      <td>1.012172</td>\n",
+       "      <td>1.000584</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.018919</td>\n",
+       "      <td>0.985285</td>\n",
+       "      <td>0.987355</td>\n",
+       "      <td>1.009358</td>\n",
+       "      <td>0.985541</td>\n",
+       "      <td>0.978555</td>\n",
+       "      <td>1.036983</td>\n",
+       "      <td>1.019599</td>\n",
+       "      <td>0.999076</td>\n",
+       "      <td>0.996958</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0.997725</td>\n",
+       "      <td>0.989759</td>\n",
+       "      <td>1.007433</td>\n",
+       "      <td>1.012226</td>\n",
+       "      <td>0.998787</td>\n",
+       "      <td>1.003896</td>\n",
+       "      <td>0.996565</td>\n",
+       "      <td>1.002441</td>\n",
+       "      <td>1.015511</td>\n",
+       "      <td>0.997337</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.019863</td>\n",
+       "      <td>0.999331</td>\n",
+       "      <td>0.982822</td>\n",
+       "      <td>1.015316</td>\n",
+       "      <td>0.995072</td>\n",
+       "      <td>0.968236</td>\n",
+       "      <td>1.036302</td>\n",
+       "      <td>1.010779</td>\n",
+       "      <td>1.005572</td>\n",
+       "      <td>0.992523</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2516</th>\n",
+       "      <td>1.996206</td>\n",
+       "      <td>3.868209</td>\n",
+       "      <td>1.067266</td>\n",
+       "      <td>6.082545</td>\n",
+       "      <td>2.545612</td>\n",
+       "      <td>3.501539</td>\n",
+       "      <td>2.084046</td>\n",
+       "      <td>2.895458</td>\n",
+       "      <td>5.399964</td>\n",
+       "      <td>3.177542</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2.217927</td>\n",
+       "      <td>1.364565</td>\n",
+       "      <td>4.806396</td>\n",
+       "      <td>3.800573</td>\n",
+       "      <td>3.665255</td>\n",
+       "      <td>3.328336</td>\n",
+       "      <td>2.689866</td>\n",
+       "      <td>3.440081</td>\n",
+       "      <td>2.461573</td>\n",
+       "      <td>3.288974</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2517</th>\n",
+       "      <td>1.965874</td>\n",
+       "      <td>3.929612</td>\n",
+       "      <td>1.072238</td>\n",
+       "      <td>6.103260</td>\n",
+       "      <td>2.572238</td>\n",
+       "      <td>3.515607</td>\n",
+       "      <td>2.095704</td>\n",
+       "      <td>2.904942</td>\n",
+       "      <td>5.383282</td>\n",
+       "      <td>3.151928</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2.210399</td>\n",
+       "      <td>1.380260</td>\n",
+       "      <td>4.791057</td>\n",
+       "      <td>3.808518</td>\n",
+       "      <td>3.704622</td>\n",
+       "      <td>3.357393</td>\n",
+       "      <td>2.685441</td>\n",
+       "      <td>3.409233</td>\n",
+       "      <td>2.450791</td>\n",
+       "      <td>3.295501</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2518</th>\n",
+       "      <td>1.962352</td>\n",
+       "      <td>3.934599</td>\n",
+       "      <td>1.054273</td>\n",
+       "      <td>6.082911</td>\n",
+       "      <td>2.542893</td>\n",
+       "      <td>3.549681</td>\n",
+       "      <td>2.095582</td>\n",
+       "      <td>2.930036</td>\n",
+       "      <td>5.388360</td>\n",
+       "      <td>3.144000</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2.238467</td>\n",
+       "      <td>1.378509</td>\n",
+       "      <td>4.761301</td>\n",
+       "      <td>3.811182</td>\n",
+       "      <td>3.735881</td>\n",
+       "      <td>3.408095</td>\n",
+       "      <td>2.680453</td>\n",
+       "      <td>3.433471</td>\n",
+       "      <td>2.453773</td>\n",
+       "      <td>3.262330</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2519</th>\n",
+       "      <td>1.964339</td>\n",
+       "      <td>3.974650</td>\n",
+       "      <td>1.066061</td>\n",
+       "      <td>6.066910</td>\n",
+       "      <td>2.552019</td>\n",
+       "      <td>3.527428</td>\n",
+       "      <td>2.086059</td>\n",
+       "      <td>2.898255</td>\n",
+       "      <td>5.309975</td>\n",
+       "      <td>3.167893</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2.231648</td>\n",
+       "      <td>1.372393</td>\n",
+       "      <td>4.766558</td>\n",
+       "      <td>3.800789</td>\n",
+       "      <td>3.718755</td>\n",
+       "      <td>3.431865</td>\n",
+       "      <td>2.711827</td>\n",
+       "      <td>3.445814</td>\n",
+       "      <td>2.503930</td>\n",
+       "      <td>3.250510</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2520</th>\n",
+       "      <td>1.987739</td>\n",
+       "      <td>3.972691</td>\n",
+       "      <td>1.048725</td>\n",
+       "      <td>6.095365</td>\n",
+       "      <td>2.536757</td>\n",
+       "      <td>3.562565</td>\n",
+       "      <td>2.068520</td>\n",
+       "      <td>2.925889</td>\n",
+       "      <td>5.351111</td>\n",
+       "      <td>3.146922</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2.238984</td>\n",
+       "      <td>1.370839</td>\n",
+       "      <td>4.826357</td>\n",
+       "      <td>3.832167</td>\n",
+       "      <td>3.693742</td>\n",
+       "      <td>3.416214</td>\n",
+       "      <td>2.722228</td>\n",
+       "      <td>3.437178</td>\n",
+       "      <td>2.494879</td>\n",
+       "      <td>3.263789</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>2521 rows × 500 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "           0         1         2         3         4         5         6    \\\n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
+       "1     1.002895  0.999901  0.995734  1.013383  1.015769  1.006198  1.005017   \n",
+       "2     0.993581  0.993185  0.993962  1.019468  1.012051  1.004993  0.978615   \n",
+       "3     0.992170  0.991641  0.996764  1.015467  0.999940  1.017830  0.995455   \n",
+       "4     0.997725  0.989759  1.007433  1.012226  0.998787  1.003896  0.996565   \n",
+       "...        ...       ...       ...       ...       ...       ...       ...   \n",
+       "2516  1.996206  3.868209  1.067266  6.082545  2.545612  3.501539  2.084046   \n",
+       "2517  1.965874  3.929612  1.072238  6.103260  2.572238  3.515607  2.095704   \n",
+       "2518  1.962352  3.934599  1.054273  6.082911  2.542893  3.549681  2.095582   \n",
+       "2519  1.964339  3.974650  1.066061  6.066910  2.552019  3.527428  2.086059   \n",
+       "2520  1.987739  3.972691  1.048725  6.095365  2.536757  3.562565  2.068520   \n",
+       "\n",
+       "           7         8         9    ...       490       491       492  \\\n",
+       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
+       "1     1.009436  1.011722  0.998061  ...  1.006381  0.985935  0.992381   \n",
+       "2     1.008588  1.008862  0.984963  ...  1.013135  0.983050  0.997790   \n",
+       "3     1.013935  1.012172  1.000584  ...  1.018919  0.985285  0.987355   \n",
+       "4     1.002441  1.015511  0.997337  ...  1.019863  0.999331  0.982822   \n",
+       "...        ...       ...       ...  ...       ...       ...       ...   \n",
+       "2516  2.895458  5.399964  3.177542  ...  2.217927  1.364565  4.806396   \n",
+       "2517  2.904942  5.383282  3.151928  ...  2.210399  1.380260  4.791057   \n",
+       "2518  2.930036  5.388360  3.144000  ...  2.238467  1.378509  4.761301   \n",
+       "2519  2.898255  5.309975  3.167893  ...  2.231648  1.372393  4.766558   \n",
+       "2520  2.925889  5.351111  3.146922  ...  2.238984  1.370839  4.826357   \n",
+       "\n",
+       "           493       494       495       496       497       498       499  \n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
+       "1     0.999903  1.001444  0.999970  1.008876  1.015792  1.005959  1.000120  \n",
+       "2     1.001451  0.994479  0.986225  1.026629  1.019737  1.005568  1.002287  \n",
+       "3     1.009358  0.985541  0.978555  1.036983  1.019599  0.999076  0.996958  \n",
+       "4     1.015316  0.995072  0.968236  1.036302  1.010779  1.005572  0.992523  \n",
+       "...        ...       ...       ...       ...       ...       ...       ...  \n",
+       "2516  3.800573  3.665255  3.328336  2.689866  3.440081  2.461573  3.288974  \n",
+       "2517  3.808518  3.704622  3.357393  2.685441  3.409233  2.450791  3.295501  \n",
+       "2518  3.811182  3.735881  3.408095  2.680453  3.433471  2.453773  3.262330  \n",
+       "2519  3.800789  3.718755  3.431865  2.711827  3.445814  2.503930  3.250510  \n",
+       "2520  3.832167  3.693742  3.416214  2.722228  3.437178  2.494879  3.263789  \n",
+       "\n",
+       "[2521 rows x 500 columns]"
+      ]
+     },
+     "execution_count": 108,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Configure a Monte Carlo simulation to forecast 10 years cumulative returns for TSLA\n",
+    "# The weights should be split 20% to AGG and 80% to TSLA.\n",
+    "# Run 500 samples.\n",
+    "MC_10_year_test = MCSimulation(\n",
+    "    portfolio_data = df_prices,\n",
+    "    weights = [.80,.20],\n",
+    "    num_simulation = 500,\n",
+    "    num_trading_days = 252*10\n",
+    ")\n",
+    "\n",
+    "# Review the simulation input data\n",
+    "MC_10_year_test.portfolio_data.head()\n",
+    "\n",
+    "# Running that Simulation\n",
+    "MC_10_year_test.calc_cumulative_return()"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 110,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "count           500.000000\n",
+      "mean              2.983128\n",
+      "std               1.289151\n",
+      "min               0.790919\n",
+      "25%               2.090373\n",
+      "50%               2.692037\n",
+      "75%               3.573260\n",
+      "max              10.149810\n",
+      "95% CI Lower      1.239198\n",
+      "95% CI Upper      6.041086\n",
+      "Name: 2520, dtype: float64\n"
+     ]
+    }
+   ],
+   "source": [
+    "# Generate summary statistics from the 10-year Monte Carlo simulation results\n",
+    "# Save the results as a variable\n",
+    "MC_summary_statistics_test = MC_10_year_test.summarize_cumulative_return()\n",
+    "\n",
+    "\n",
+    "# Review the 10-year Monte Carlo summary statistics\n",
+    "print(MC_summary_statistics_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 114,
    "metadata": {},
    "outputs": [],
    "source": [
-    "**Answer** # YOUR ANSWER HERE"
+    "ci_lower_ten_cumulative_return_test = MC_summary_statistics_test[8] * total_stocks_bonds\n",
+    "ci_upper_ten_cumulative_return_test = MC_summary_statistics_test[9] * total_stocks_bonds\n",
+    "\n",
+    "lower_cumltv_return_10y_test = \"${:,.2f}\".format(ci_lower_ten_cumulative_return_test)\n",
+    "upper_cumltv_return_10y_test = \"${:,.2f}\".format(ci_upper_ten_cumulative_return_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 116,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "$75,205.31\n",
+      "$366,625.64\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(f\"{lower_cumltv_return_10y_test}\")\n",
+    "print(f\"{upper_cumltv_return_10y_test}\")"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {

commit 855af35290e4d36e33f33a07489552e628944ac7
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Sun Apr 24 18:35:35 2022 -0400

    Redid all the work from last night that didnt save

diff --git a/Images/5-4-monte-carlo-histogram.png b/Images/5-4-monte-carlo-histogram.png
new file mode 100644
index 0000000..53f6121
Binary files /dev/null and b/Images/5-4-monte-carlo-histogram.png differ
diff --git a/Images/5-4-monte-carlo-line-plot.png b/Images/5-4-monte-carlo-line-plot.png
new file mode 100644
index 0000000..3a7bc5e
Binary files /dev/null and b/Images/5-4-monte-carlo-line-plot.png differ
diff --git a/MC_thirty_year_dist_plot.png b/MC_thirty_year_dist_plot.png
new file mode 100644
index 0000000..a3df892
Binary files /dev/null and b/MC_thirty_year_dist_plot.png differ
diff --git a/MC_thirty_year_sim_plot.png b/MC_thirty_year_sim_plot.png
new file mode 100644
index 0000000..2f9adf4
Binary files /dev/null and b/MC_thirty_year_sim_plot.png differ
diff --git a/financial_planning_tools.ipynb b/financial_planning_tools.ipynb
index 546bf91..5d2622f 100644
--- a/financial_planning_tools.ipynb
+++ b/financial_planning_tools.ipynb
@@ -16,14 +16,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 85,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Import the required libraries and dependencies\n",
     "import os\n",
-    "import re\n",
-    "from re import search\n",
     "import requests\n",
     "import json\n",
     "import pandas as pd\n",
@@ -31,7 +29,6 @@
     "import alpaca_trade_api as tradeapi\n",
     "from MCForecastTools import MCSimulation\n",
     "\n",
-    "\n",
     "%matplotlib inline"
    ]
   },
@@ -39,21 +36,22 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## FUNCTIONS"
+    "## CODE FUNCTIONS"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 86,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
     "def API_CryptoCoinSetup(crypto_coins=dict):\n",
     "    \n",
     "    \"\"\"\n",
-    "    The basic idea here is that whatever cypto symbol input\n",
-    "    this program will spit out the current $USD price. As the\n",
-    "    name indicates, an API will be used\n",
+    "    This function takes a diction that has the name of the coins\n",
+    "    invested in and there symbol. It uses that dictionary to return\n",
+    "    another dictionary of urls names (keys) and actual urls(values)\n",
+    "    to be used down stream to pull the relevant information\n",
     "    \"\"\"\n",
     "    \n",
     "    coin_urls =[]\n",
@@ -71,38 +69,45 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 87,
+   "execution_count": 50,
    "metadata": {},
    "outputs": [],
    "source": [
     "def API_CryptoPrices(crypto_coins=dict,):\n",
     "    \n",
     "    \"\"\"\n",
-    "    returns back \n",
+    "    This function takes a dictionary which has the crypto api calls for \n",
+    "    specific coins the credit union is investing in. It uses a for loop\n",
+    "    the create the eth_responce and btc_responce that obtains the json \n",
+    "    of data from the API. The json is printed out and the prices for each\n",
+    "    coin are pulled for whenever the code is run\n",
     "    \n",
     "    \"\"\"\n",
     "    \n",
-    "    # API USAGE: BTC AND ETH PRICE INFORMATION \n",
+    "    # API USAGE: BTC AND ETH PRICE INFORMATION\n",
     "    # PART 1: Crypto API Call endpoint URLs for the held cryptocurrency assets\n",
-    "    # btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=USD\"\n",
-    "    # eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=USD\"\n",
+    "    #      btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=USD\"\n",
+    "    #      eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=USD\"\n",
     "    \n",
-    "    btc_response\n",
-    "    eth_response\n",
+    "    #btc_response\n",
+    "    #eth_response\n",
     "\n",
     "    for key in crypto_coins:\n",
     "        if key == \"Ethereum_url\":\n",
-    "            eth_responce = requests.get(crypto_coins[key]).json()\n",
+    "            eth_response = requests.get(crypto_coins[key]).json()\n",
     "        elif key == \"Bitcoin_url\":\n",
-    "            btc_responce = requests.get(crypto_coins[key]).json()\n",
+    "            btc_response = requests.get(crypto_coins[key]).json()\n",
     "\n",
     "    # Use the json.dumps function to review the response data from the API call\n",
     "    # NOTE: Indent and sort_keys parameters used for readability\n",
-    "\n",
+    "    \n",
+    "    print(f\"BITCOIN\")\n",
     "    print(json.dumps(btc_response, indent=4, sort_keys=True))\n",
-    "    print(\"\\n\\n\")\n",
+    "    print(\"\\n\")\n",
+    "    print(f\"ETHEREUM\")\n",
     "    print(json.dumps(eth_response, indent=4, sort_keys=True))\n",
-    "    print(\"\\n\\n\")\n",
+    "    print(\"\\n\")\n",
+    "  \n",
     "    \n",
     "    # Navigate the BTC response object to access the current price of BTC\n",
     "    btc_price = btc_response['data']['1']['quotes']['USD']['price']\n",
@@ -115,12 +120,21 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 159,
+   "execution_count": 51,
    "metadata": {},
    "outputs": [],
    "source": [
     "def create_savings_df(idx=list,cols=list,data=list):\n",
     "    \n",
+    "    \"\"\"\n",
+    "    This function takes 3 lists and uses them to fashion a dataframe\n",
+    "    that is going to be used for a pie chart.\n",
+    "         1. idx:  the index column is added to the dataframe then `set_index` is used to set the index\n",
+    "         2. cols: this has the column we want here `amount`\n",
+    "         3. data: this has our data\n",
+    "    It returns a dataframe\n",
+    "    \"\"\"\n",
+    "    \n",
     "    personal_savings = pd.DataFrame(list(data),\n",
     "              columns=cols)\n",
     "    \n",
@@ -131,162 +145,163 @@
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 51,
+   "cell_type": "markdown",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "True"
-      ]
-     },
-     "execution_count": 51,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
    "source": [
-    "# Load the environment variables from the .env file\n",
-    "#by calling the load_dotenv function\n",
-    "load_dotenv('app.env')"
+    "## Part 1: Create a Financial Planner for Emergencies"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## Part 1: Create a Financial Planner for Emergencies"
+    "### Evaluate the Cryptocurrency Wallet using the Requests Library\n",
+    "\n",
+    "**Aim**: Determine the current value of a member’s cryptocurrency wallet. Collect the current prices for the Bitcoin and Ethereum using the Python Requests library. The member holds the 1.2 Bitcoins (BTC) and 5.3 Ethereum coins (ETH). \n",
+    "\n",
+    "**Steps**:\n",
+    "1. Create a variable named `monthly_income` set its value to `12000`.\n",
+    "2. Use Requests library. Get the current price (USD) of BTC and ETH using the API endpoints.\n",
+    "3. Navigate the JSON response object to access the current price of each coin, store each in a variable.\n",
+    "4. Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet.\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### FINANCIAL PLANNER CODE"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "### Evaluate the Cryptocurrency Wallet by Using the Requests Library\n",
+    "#### GIVENS"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 52,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# 1. Need to know whart coins the Credit Union believes in\n",
+    "coin_dict ={'Ethereum':'ETH', 'Bitcoin':'BTC'}\n",
+    "key_iterable = coin_dict.keys()\n",
+    "key_list = list(key_iterable)\n",
     "\n",
-    "**Aim**: Determine the current value of a member’s cryptocurrency wallet. You’ll collect the current prices for the Bitcoin and Ethereum cryptocurrencies by using the Python Requests library. Assume that the member holds the 1.2 Bitcoins (BTC) and 5.3 Ethereum coins (ETH). Steps:\n",
+    "# 2. The current number of coins for each cryptocurrency asset held in the portfolio.\n",
+    "btc_coins = 1.2\n",
+    "eth_coins = 5.3\n",
     "\n",
-    "1. Create a variable named `monthly_income`, and set its value to `12000`.\n",
-    "2. Use Requests library to get the current price (USD) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints.\n",
-    "3. Navigate the JSON response object to access the current price of each coin, and store each in a variable.\n",
-    "4. Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet.\n"
+    "# 3. The monthly amount for the member's household income\n",
+    "monthly_income = 12000\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## CODE"
+    "#### FUNCTIONS & CALCULATIONS"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 96,
+   "execution_count": 53,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
+      "BITCOIN\n",
       "{\n",
       "    \"data\": {\n",
       "        \"1\": {\n",
-      "            \"circulating_supply\": 19020025,\n",
+      "            \"circulating_supply\": 19021131,\n",
       "            \"id\": 1,\n",
-      "            \"last_updated\": 1650734380,\n",
+      "            \"last_updated\": 1650832438,\n",
       "            \"max_supply\": 21000000,\n",
       "            \"name\": \"Bitcoin\",\n",
       "            \"quotes\": {\n",
       "                \"USD\": {\n",
-      "                    \"market_cap\": 757063604506,\n",
-      "                    \"percent_change_1h\": -0.411535096903784,\n",
-      "                    \"percent_change_24h\": 0.623025653082545,\n",
-      "                    \"percent_change_7d\": -2.04708590102934,\n",
-      "                    \"percentage_change_1h\": -0.411535096903784,\n",
-      "                    \"percentage_change_24h\": 0.623025653082545,\n",
-      "                    \"percentage_change_7d\": -2.04708590102934,\n",
-      "                    \"price\": 39756.0,\n",
-      "                    \"volume_24h\": 36091787992\n",
+      "                    \"market_cap\": 753310536645,\n",
+      "                    \"percent_change_1h\": -0.567648834910676,\n",
+      "                    \"percent_change_24h\": -0.638720363007629,\n",
+      "                    \"percent_change_7d\": -2.21836533368129,\n",
+      "                    \"percentage_change_1h\": -0.567648834910676,\n",
+      "                    \"percentage_change_24h\": -0.638720363007629,\n",
+      "                    \"percentage_change_7d\": -2.21836533368129,\n",
+      "                    \"price\": 39553.0,\n",
+      "                    \"volume_24h\": 16846979254\n",
       "                }\n",
       "            },\n",
       "            \"rank\": 1,\n",
       "            \"symbol\": \"BTC\",\n",
-      "            \"total_supply\": 19020025,\n",
+      "            \"total_supply\": 19021131,\n",
       "            \"website_slug\": \"bitcoin\"\n",
       "        }\n",
       "    },\n",
       "    \"metadata\": {\n",
       "        \"error\": null,\n",
       "        \"num_cryptocurrencies\": 3106,\n",
-      "        \"timestamp\": 1650734380\n",
+      "        \"timestamp\": 1650832438\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
-      "\n",
+      "ETHEREUM\n",
       "{\n",
       "    \"data\": {\n",
       "        \"1027\": {\n",
-      "            \"circulating_supply\": 120497970,\n",
+      "            \"circulating_supply\": 120513127,\n",
       "            \"id\": 1027,\n",
-      "            \"last_updated\": 1650734275,\n",
+      "            \"last_updated\": 1650832379,\n",
       "            \"max_supply\": 0,\n",
       "            \"name\": \"Ethereum\",\n",
       "            \"quotes\": {\n",
       "                \"USD\": {\n",
-      "                    \"market_cap\": 357374732727,\n",
-      "                    \"percent_change_1h\": -0.500278748251154,\n",
-      "                    \"percent_change_24h\": 0.0933006273066053,\n",
-      "                    \"percent_change_7d\": -2.71454304261497,\n",
-      "                    \"percentage_change_1h\": -0.500278748251154,\n",
-      "                    \"percentage_change_24h\": 0.0933006273066053,\n",
-      "                    \"percentage_change_7d\": -2.71454304261497,\n",
-      "                    \"price\": 2962.76,\n",
-      "                    \"volume_24h\": 10170903037\n",
+      "                    \"market_cap\": 355524833945,\n",
+      "                    \"percent_change_1h\": -0.583535122856936,\n",
+      "                    \"percent_change_24h\": -0.521123186096527,\n",
+      "                    \"percent_change_7d\": -3.87653651582477,\n",
+      "                    \"percentage_change_1h\": -0.583535122856936,\n",
+      "                    \"percentage_change_24h\": -0.521123186096527,\n",
+      "                    \"percentage_change_7d\": -3.87653651582477,\n",
+      "                    \"price\": 2947.49,\n",
+      "                    \"volume_24h\": 8878720784\n",
       "                }\n",
       "            },\n",
       "            \"rank\": 2,\n",
       "            \"symbol\": \"ETH\",\n",
-      "            \"total_supply\": 120497970,\n",
+      "            \"total_supply\": 120513127,\n",
       "            \"website_slug\": \"ethereum\"\n",
       "        }\n",
       "    },\n",
       "    \"metadata\": {\n",
       "        \"error\": null,\n",
       "        \"num_cryptocurrencies\": 3106,\n",
-      "        \"timestamp\": 1650734275\n",
+      "        \"timestamp\": 1650832379\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
-      "\n",
       "CALCULATIONS:\n",
-      "1. The price of one Ethereum coin(USD): $2,962.76\n",
-      "2. The price of one Bitcoin coin(USD): $39,756.00\n",
-      "3. This is value of your total BTC holding in USD: 47707.2\n",
-      "4. This is value of your total ETH holding in USD: 15702.628\n",
-      "5. This is the values of your total crypto wallet $63,409.83:\n"
+      "1. The price of one Ethereum coin(USD): $2,947.49\n",
+      "2. The price of one Bitcoin coin(USD): $39,553.00\n",
+      "3. This is the value of your total BTC holding in USD: $47,463.60\n",
+      "4. This is the value of your total ETH holding in USD: $15,621.70\n",
+      "5. This is the values of your total crypto wallet $63,085.30:\n"
      ]
     }
    ],
    "source": [
-    "# 1. Need to know whart coins the Credit Union believes in\n",
-    "coin_dict ={'Ethereum':'ETH', 'Bitcoin':'BTC'}\n",
-    "key_iterable = coin_dict.keys()\n",
-    "key_list = list(key_iterable)\n",
-    "\n",
-    "# 2. The current number of coins for each cryptocurrency asset held in the portfolio.\n",
-    "btc_coins = 1.2\n",
-    "eth_coins = 5.3\n",
-    "\n",
-    "# 3. The monthly amount for the member's household income\n",
-    "monthly_income = 12000\n",
+    "### FUNCTION CALL\n",
+    "### 1. API_CryptoCoinSetup\n",
+    "### 2. API_CryptoPrices\n",
     "\n",
     "url_dict = API_CryptoCoinSetup(coin_dict)\n",
-    "url_list = list(url_dict.keys())\n",
-    "url_addresses = list(url_dict.values())\n",
-    "\n",
     "eth_price,btc_price = API_CryptoPrices(url_dict)\n",
     "\n",
     "print(f\"CALCULATIONS:\")\n",
@@ -303,8 +318,8 @@
     "eth_holding=\"${:,.2f}\".format(eth_value)\n",
     "\n",
     "# Print current value of your holding in BTC\n",
-    "print(f\"3. This is the value of your total BTC holding in USD: {btc_value}\")\n",
-    "print(f\"4. This is the value of your total ETH holding in USD: {eth_value}\")\n",
+    "print(f\"3. This is the value of your total BTC holding in USD: {btc_holding}\")\n",
+    "print(f\"4. This is the value of your total ETH holding in USD: {eth_holding}\")\n",
     "\n",
     "\n",
     "# Compute the total value of the cryptocurrency wallet\n",
@@ -322,10 +337,11 @@
    "source": [
     "# Evaluate the Stock and Bond Holdings by Using the Alpaca SDK\n",
     "\n",
-    "Determine the current value of a member’s stock and bond holdings. You’ll make an API call to Alpaca via the Alpaca SDK to get the current closing prices of the SPDR S&P 500 ETF Trust (ticker: SPY) and of the iShares Core US Aggregate Bond ETF (ticker: AGG). Complete the following steps:\n",
+    "Determine the current value of a member’s stock and bond holdings. Make an API call to Alpaca via the Alpaca SDK to get the current closing prices of **1) SPDR S&P 500 ETF Trust** (ticker: SPY) **2)iShares Core US Aggregate Bond ETF** (ticker: AGG).\n",
     "\n",
+    "**STEPS:**\n",
     "1. Create an environment file (`.env`) to store your Alpaca API key and Alpaca secret key values.\n",
-    "2. Set the variables for the Alpaca API and secret keys. (Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object)\n",
+    "2. Set the variables for the Alpaca API and secret keys.(Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object)\n",
     "3. Set the following parameters for the Alpaca API call:\n",
     "    - `tickers`: Use the tickers for the member’s stock and bond holdings.\n",
     "    - `timeframe`: Use a time frame of one day.\n",
@@ -342,9 +358,16 @@
     "#### PORTFOLIO DETAILS AND ALPACA SDK SET-UP"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### GIVENS"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 106,
+   "execution_count": 55,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -355,7 +378,6 @@
     "agg_shares = 200\n",
     "\n",
     "# Load the environment variables from the .env file\n",
-    "# (call the load_dotenv function)\n",
     "load_dotenv('app.env')\n",
     "\n",
     "# Set the variables for the Alpaca API and secret keys\n",
@@ -379,7 +401,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 107,
+   "execution_count": 57,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -416,9 +438,170 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 141,
+   "execution_count": 62,
    "metadata": {},
    "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>symbol</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2020-08-07 04:00:00+00:00</th>\n",
+       "      <td>119.66</td>\n",
+       "      <td>119.73</td>\n",
+       "      <td>119.395</td>\n",
+       "      <td>119.43</td>\n",
+       "      <td>5559066</td>\n",
+       "      <td>15246</td>\n",
+       "      <td>119.475306</td>\n",
+       "      <td>AGG</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-08-07 04:00:00+00:00</th>\n",
+       "      <td>333.29</td>\n",
+       "      <td>334.88</td>\n",
+       "      <td>332.300</td>\n",
+       "      <td>334.57</td>\n",
+       "      <td>57282821</td>\n",
+       "      <td>350100</td>\n",
+       "      <td>333.800372</td>\n",
+       "      <td>SPY</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                             open    high      low   close    volume  \\\n",
+       "timestamp                                                              \n",
+       "2020-08-07 04:00:00+00:00  119.66  119.73  119.395  119.43   5559066   \n",
+       "2020-08-07 04:00:00+00:00  333.29  334.88  332.300  334.57  57282821   \n",
+       "\n",
+       "                           trade_count        vwap symbol  \n",
+       "timestamp                                                  \n",
+       "2020-08-07 04:00:00+00:00        15246  119.475306    AGG  \n",
+       "2020-08-07 04:00:00+00:00       350100  333.800372    SPY  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"7\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"7\" halign=\"left\">SPY</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2020-08-07</th>\n",
+       "      <td>119.66</td>\n",
+       "      <td>119.73</td>\n",
+       "      <td>119.395</td>\n",
+       "      <td>119.43</td>\n",
+       "      <td>5559066</td>\n",
+       "      <td>15246</td>\n",
+       "      <td>119.475306</td>\n",
+       "      <td>333.29</td>\n",
+       "      <td>334.88</td>\n",
+       "      <td>332.3</td>\n",
+       "      <td>334.57</td>\n",
+       "      <td>57282821</td>\n",
+       "      <td>350100</td>\n",
+       "      <td>333.800372</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               AGG                                                            \\\n",
+       "              open    high      low   close   volume trade_count        vwap   \n",
+       "2020-08-07  119.66  119.73  119.395  119.43  5559066       15246  119.475306   \n",
+       "\n",
+       "               SPY                                                           \n",
+       "              open    high    low   close    volume trade_count        vwap  \n",
+       "2020-08-07  333.29  334.88  332.3  334.57  57282821      350100  333.800372  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
     {
      "data": {
       "text/html": [
@@ -473,15 +656,13 @@
       "dtype: object\n",
       "\n",
       "\n",
-      "\n",
-      "\n",
       "CALCULATIONS:\n",
       "1. This is the AGG Closing Price: $119.43\n",
       "2. This is the SPY Closing Price: $334.57 \n",
       "3. This is the Total Value of your AGG Holdings: $23,886.00\n",
       "4. This is the Total Value of your SPY Holdings: $36,802.70\n",
       "5. This is the Value of your AGG & SPY Holdings: $60,688.70\n",
-      "5. This is the Value of your Crypto Wallet, Stocks & Bond Holdings: $124,098.53\n"
+      "5. This is the Value of your Crypto Wallet, Stocks & Bond Holdings: $123,774.00\n"
      ]
     }
    ],
@@ -496,30 +677,38 @@
     "    end = end_date\n",
     ").df\n",
     "\n",
-    "#display(df_portfolio.head())\n",
+    "# Review the first 5 rows of the Alpaca DataFrame\n",
+    "display(df_portfolio.head())\n",
     "\n",
     "# Reorganize the DataFrame\n",
     "AGG = df_portfolio[df_portfolio['symbol']=='AGG'].drop('symbol', axis=1)\n",
-    "SPY= df_portfolio[df_portfolio['symbol']=='SPY'].drop('symbol', axis=1)\n",
+    "SPY = df_portfolio[df_portfolio['symbol']=='SPY'].drop('symbol', axis=1)\n",
     "\n",
     "# Concatenate the ticker DataFrames\n",
+    "# Keep Only the date piece from the TimeStamp Index\n",
     "df_portfolio = pd.concat([AGG,SPY],axis=1, keys=['AGG','SPY'])\n",
     "df_portfolio.index = df_portfolio.index.date\n",
     "\n",
-    "# Review the first 5 rows of the Alpaca DataFrame\n",
-    "#display(df_portfolio.head())\n",
+    "# Checking on what my Dataframe looks now \n",
+    "display(df_portfolio.head())\n",
     "\n",
     "# Access the closing price for AGG from the Alpaca DataFrame\n",
     "# Note: its cleaner and neater to just have a dataframe of closing prices \n",
+    "# Please don't remove points.\n",
     "\n",
     "df_closing_prices = pd.DataFrame()\n",
     "df_closing_prices[\"AGG\"] = df_portfolio[\"AGG\"][\"close\"]\n",
     "df_closing_prices[\"SPY\"] = df_portfolio[\"SPY\"][\"close\"]\n",
     "\n",
+    "#NOTE:\n",
+    "#     1. `df_closing_prices.head()` - this should have one row with two values. The closes price of SPY and AGG\n",
+    "#     2. `df_closing_prices.dtypes` - this was executed to  verify that  the prices are floats (which they are)\n",
+    "\n",
     "display(df_closing_prices.head())\n",
     "print(\"\\n\")\n",
     "print(df_closing_prices.dtypes)\n",
-    "print(\"\\n\\n\")\n",
+    "print(\"\\n\")\n",
+    "\n",
     "# Saving `SPY` and `AGG` closing prices to variables\n",
     "agg_close_price = df_closing_prices.iat[0, 0]\n",
     "spy_close_price = df_closing_prices.iat[0, 1]\n",
@@ -541,7 +730,7 @@
     "tot_holdings_val = \"${:,.2f}\".format(total_stocks_bonds)\n",
     "tot_portfolio_val = \"${:,.2f}\".format(portfolio_val)\n",
     "\n",
-    "\n",
+    "# PRINT STATEMENTS SHOWING CALCULATIONS\n",
     "print(\"CALCULATIONS:\")\n",
     "print(f\"1. This is the AGG Closing Price: {agg_close}\")\n",
     "print(f\"2. This is the SPY Closing Price: {spy_close} \")\n",
@@ -562,45 +751,37 @@
     "1. Create a Python list named `savings_data`:\n",
     "    - `saving_data[0]`: the total value of the cryptocurrency wallet. \n",
     "    - `saving_data[1]`: the total value of the stock and bond portions of the portfolio.\n",
-    "2. Use the `savings_data` list to create a Pandas DataFrame named `savings_df`, and then display this DataFrame. The function to create the DataFrame should take the following three parameters:\n",
+    "2. Use the `savings_data` list to create a Pandas DataFrame(`savings_df`), display DataFrame. The function to create the DataFrame should take the following three parameters:\n",
     "    - `savings_data`: Use the list that you just created.\n",
     "    - `columns`: Set this parameter equal to a Python list with a single value called `amount`.\n",
     "    - `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n",
     "3. Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio.\n",
     "4. Using Python, determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan. Ideally, an emergency fund should equal to three times the member’s monthly income. To do this, implement the following steps:\n",
     "\n",
-    "    1. Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of $12000. (You set this earlier in Part 1).\n",
-    "\n",
-    "    2. Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
-    "\n",
-    "        1. If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
-    "\n",
-    "        2. Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
-    "\n",
-    "        3. Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 1: Create a Python list named `savings_data` that has two elements. The first element contains the total value of the cryptocurrency wallet. The second element contains the total value of the stock and bond portions of the portfolio."
+    "    1. Create a variable named `emergency_fund_value` equal to three times the value of the member’s `monthly_income`. \n",
+    "    2. Create a series of three if statements: \n",
+    "        1. If the total portfolio value is greater than, congratulate the member for having enough money in this fund.\n",
+    "        2. Else if the total portfolio value is equal, congratulate the member on reaching this important financial goal.\n",
+    "        3. Else the total portfolio is less showing how many dollars away the member is from reaching the goal. "
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 160,
+   "execution_count": 69,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "[60688.7, 124098.52799999999]\n",
+      "These are the two values in the saving data list:\n",
+      "[60688.7, 123773.997]\n",
+      "------\n",
+      "This is the savings_df: \n",
       "                amount\n",
       "index                 \n",
       "crypto       60688.700\n",
-      "stock/bond  124098.528\n"
+      "stock/bond  123773.997\n"
      ]
     }
    ],
@@ -613,12 +794,16 @@
     "savings_data = [total_stocks_bonds,portfolio_val]\n",
     "\n",
     "# Review the Python list savings_data\n",
+    "print(f\"These are the two values in the saving data list:\")\n",
     "print(savings_data)\n",
+    "print(\"------\")\n",
+    "##print(\"\\n\")\n",
     "\n",
     "# Create a Pandas DataFrame called savings_df \n",
     "savings_df = create_savings_df(indx_list,cols_list,savings_data)\n",
     "\n",
     "# Display the savings_df DataFrame\n",
+    "print(f\"This is the savings_df: \")\n",
     "print(savings_df)"
    ]
   },
@@ -626,40 +811,27 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 2: Use the `savings_data` list to create a Pandas DataFrame named `savings_df`, and then display this DataFrame. The function to create the DataFrame should take the following three parameters:\n",
-    "\n",
-    "- `savings_data`: Use the list that you just created.\n",
-    "\n",
-    "- `columns`: Set this parameter equal to a Python list with a single value called `amount`.\n",
-    "\n",
-    "- `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 3: Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio. The y-axis of the pie chart uses `amount`. Be sure to add a title."
+    "##### Use the `savings_df` dataframe to plot a pie chart showcasing the composition of the member’s portfolio. "
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 170,
+   "execution_count": 71,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<AxesSubplot:title={'center':'Asset Breakdown; Crypto & Stocks/Bonds Asset Valuation'}, ylabel='amount'>"
+       "<AxesSubplot:title={'center':'Asset Breakdown: Crypto & Stocks/Bonds Valuation'}, ylabel='amount'>"
       ]
      },
-     "execution_count": 170,
+     "execution_count": 71,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -669,12 +841,13 @@
     }
    ],
    "source": [
-    "# Plot the total value of the member's portfolio (crypto and stock/bond) in a pie chart\n",
+    "# Plot the Tot. Value of the member's portfolio (crypto and stock/bond) in a pie chart\n",
+    "#      1. The y-axis is the `amount`\n",
     "colors = ['pink', 'silver']\n",
     "savings_pie_grph = savings_df.plot(kind='pie',\n",
     "                y='amount',\n",
     "                autopct='%1.0f%%', colors=colors,\n",
-    "                title='Asset Breakdown; Crypto & Stocks/Bonds Asset Valuation'\n",
+    "                title='Asset Breakdown: Crypto & Stocks/Bonds Valuation'\n",
     "               )\n",
     "savings_pie_grph"
    ]
@@ -683,29 +856,12 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 4: Using Python, determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan. Ideally, an emergency fund should equal to three times the member’s monthly income. To do this, implement the following steps:\n",
-    "\n",
-    "Step 1. Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of 12000. (You set this earlier in Part 1).\n",
-    "\n",
-    "Step 2. Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
-    "\n",
-    "* If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
-    "\n",
-    "* Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
-    "\n",
-    "* Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "##### Step 4-1: Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of 12000. (You set this earlier in Part 1)."
+    "##### **Determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan.** "
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 175,
+   "execution_count": 72,
    "metadata": {},
    "outputs": [
     {
@@ -720,7 +876,6 @@
     "# Create a variable named emergency_fund_value\n",
     "emergency_fund_value = 3.00 * monthly_income\n",
     "\n",
-    "\n",
     "# Evaluate the possibility of creating an emergency fund with 3 conditions:\n",
     "if portfolio_val > emergency_fund_value:\n",
     "    print(f\"Congratulations, You have enough money in this fund\")\n",
@@ -746,29 +901,15 @@
     "In this section, you’ll use the MCForecastTools library to create a Monte Carlo simulation for the member’s savings portfolio. To do this, complete the following steps:\n",
     "\n",
     "1. Make an API call via the Alpaca SDK to get 3 years of historical closing prices for a traditional 60/40 portfolio split: 60% stocks (SPY) and 40% bonds (AGG).\n",
-    "\n",
-    "2. Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results.The following image shows the overlay line plot resulting from a simulation with these characteristics. However, because a random number generator is used to run each live Monte Carlo simulation, your image will differ slightly from this exact image:\n",
-    "\n",
-    "![A screenshot depicts the resulting plot.](Images/5-4-monte-carlo-line-plot.png)\n",
-    "\n",
-    "3. Plot the probability distribution of the Monte Carlo simulation. Plot the probability distribution of the Monte Carlo simulation. The following image shows the histogram plot resulting from a simulation with these characteristics. However, because a random number generator is used to run each live Monte Carlo simulation, your image will differ slightly from this exact image:\n",
-    "\n",
-    "![A screenshot depicts the histogram plot.](Images/5-4-monte-carlo-histogram.png)\n",
-    "\n",
+    "2. Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results.\n",
+    "3. Plot the probability distribution of the Monte Carlo simulation. Plot the probability distribution of the Monte Carlo simulation. \n",
     "4. Generate the summary statistics for the Monte Carlo simulation.\n",
     "\n"
    ]
   },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 1: Make an API call via the Alpaca SDK to get 3 years of historical closing prices for a traditional 60/40 portfolio split: 60% stocks (SPY) and 40% bonds (AGG)."
-   ]
-  },
   {
    "cell_type": "code",
-   "execution_count": 197,
+   "execution_count": 74,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -782,13 +923,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 207,
+   "execution_count": 77,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "(98, 7)"
+       "(755, 7)"
       ]
      },
      "metadata": {},
@@ -797,7 +938,7 @@
     {
      "data": {
       "text/plain": [
-       "(98, 7)"
+       "(755, 7)"
       ]
      },
      "metadata": {},
@@ -868,89 +1009,89 @@
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
-       "      <th>2015-12-01 05:00:00+00:00</th>\n",
-       "      <td>108.54</td>\n",
-       "      <td>108.8400</td>\n",
-       "      <td>108.43</td>\n",
-       "      <td>108.82</td>\n",
-       "      <td>4259986</td>\n",
-       "      <td>15562</td>\n",
-       "      <td>108.754152</td>\n",
-       "      <td>209.42</td>\n",
-       "      <td>210.8200</td>\n",
-       "      <td>209.1100</td>\n",
-       "      <td>210.68</td>\n",
-       "      <td>97858418</td>\n",
-       "      <td>337780</td>\n",
-       "      <td>209.921410</td>\n",
+       "      <th>2017-04-21 04:00:00+00:00</th>\n",
+       "      <td>109.40</td>\n",
+       "      <td>109.4899</td>\n",
+       "      <td>109.30</td>\n",
+       "      <td>109.34</td>\n",
+       "      <td>1539265</td>\n",
+       "      <td>8708</td>\n",
+       "      <td>109.386803</td>\n",
+       "      <td>235.22</td>\n",
+       "      <td>235.31</td>\n",
+       "      <td>234.1300</td>\n",
+       "      <td>234.59</td>\n",
+       "      <td>110389847</td>\n",
+       "      <td>258915</td>\n",
+       "      <td>234.784238</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-02 05:00:00+00:00</th>\n",
-       "      <td>108.73</td>\n",
-       "      <td>108.7799</td>\n",
-       "      <td>108.61</td>\n",
-       "      <td>108.67</td>\n",
-       "      <td>2462787</td>\n",
-       "      <td>11581</td>\n",
-       "      <td>108.684692</td>\n",
-       "      <td>210.60</td>\n",
-       "      <td>211.0000</td>\n",
-       "      <td>208.2300</td>\n",
-       "      <td>208.54</td>\n",
-       "      <td>108069059</td>\n",
-       "      <td>367013</td>\n",
-       "      <td>209.563055</td>\n",
+       "      <th>2017-04-24 04:00:00+00:00</th>\n",
+       "      <td>109.05</td>\n",
+       "      <td>109.2200</td>\n",
+       "      <td>109.00</td>\n",
+       "      <td>109.18</td>\n",
+       "      <td>2745689</td>\n",
+       "      <td>10549</td>\n",
+       "      <td>109.150827</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>237.41</td>\n",
+       "      <td>234.5628</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>119209877</td>\n",
+       "      <td>290927</td>\n",
+       "      <td>236.615988</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-03 05:00:00+00:00</th>\n",
-       "      <td>108.41</td>\n",
-       "      <td>108.4100</td>\n",
-       "      <td>107.81</td>\n",
-       "      <td>107.89</td>\n",
-       "      <td>4634020</td>\n",
-       "      <td>16801</td>\n",
-       "      <td>108.040315</td>\n",
-       "      <td>208.90</td>\n",
-       "      <td>209.1500</td>\n",
-       "      <td>204.7511</td>\n",
-       "      <td>205.58</td>\n",
-       "      <td>166224154</td>\n",
-       "      <td>546768</td>\n",
-       "      <td>206.878936</td>\n",
+       "      <th>2017-04-25 04:00:00+00:00</th>\n",
+       "      <td>108.99</td>\n",
+       "      <td>109.0450</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>1888469</td>\n",
+       "      <td>10064</td>\n",
+       "      <td>108.912429</td>\n",
+       "      <td>237.93</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.8100</td>\n",
+       "      <td>238.55</td>\n",
+       "      <td>76698265</td>\n",
+       "      <td>240232</td>\n",
+       "      <td>238.459191</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-04 05:00:00+00:00</th>\n",
-       "      <td>108.05</td>\n",
-       "      <td>108.3000</td>\n",
-       "      <td>108.00</td>\n",
-       "      <td>108.24</td>\n",
-       "      <td>2182057</td>\n",
-       "      <td>9796</td>\n",
-       "      <td>108.192232</td>\n",
-       "      <td>206.10</td>\n",
-       "      <td>209.9700</td>\n",
-       "      <td>205.9300</td>\n",
-       "      <td>209.66</td>\n",
-       "      <td>192878747</td>\n",
-       "      <td>556731</td>\n",
-       "      <td>208.178631</td>\n",
+       "      <th>2017-04-26 04:00:00+00:00</th>\n",
+       "      <td>108.85</td>\n",
+       "      <td>108.9700</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.96</td>\n",
+       "      <td>2893801</td>\n",
+       "      <td>10145</td>\n",
+       "      <td>108.884769</td>\n",
+       "      <td>238.53</td>\n",
+       "      <td>239.53</td>\n",
+       "      <td>238.3500</td>\n",
+       "      <td>238.40</td>\n",
+       "      <td>84702455</td>\n",
+       "      <td>260064</td>\n",
+       "      <td>238.801347</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-07 05:00:00+00:00</th>\n",
-       "      <td>108.30</td>\n",
-       "      <td>108.5800</td>\n",
-       "      <td>108.23</td>\n",
-       "      <td>108.40</td>\n",
-       "      <td>2143773</td>\n",
-       "      <td>9104</td>\n",
-       "      <td>108.460067</td>\n",
-       "      <td>209.20</td>\n",
-       "      <td>209.7295</td>\n",
-       "      <td>207.2000</td>\n",
-       "      <td>208.27</td>\n",
-       "      <td>102027111</td>\n",
-       "      <td>374705</td>\n",
-       "      <td>208.276128</td>\n",
+       "      <th>2017-04-27 04:00:00+00:00</th>\n",
+       "      <td>108.94</td>\n",
+       "      <td>109.1000</td>\n",
+       "      <td>108.91</td>\n",
+       "      <td>109.06</td>\n",
+       "      <td>1660940</td>\n",
+       "      <td>7367</td>\n",
+       "      <td>109.026595</td>\n",
+       "      <td>238.74</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.9800</td>\n",
+       "      <td>238.60</td>\n",
+       "      <td>57410326</td>\n",
+       "      <td>189214</td>\n",
+       "      <td>238.526193</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -960,29 +1101,29 @@
        "                              AGG                                     \\\n",
        "                             open      high     low   close   volume   \n",
        "timestamp                                                              \n",
-       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
-       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
-       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
-       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
-       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "2017-04-21 04:00:00+00:00  109.40  109.4899  109.30  109.34  1539265   \n",
+       "2017-04-24 04:00:00+00:00  109.05  109.2200  109.00  109.18  2745689   \n",
+       "2017-04-25 04:00:00+00:00  108.99  109.0450  108.77  108.82  1888469   \n",
+       "2017-04-26 04:00:00+00:00  108.85  108.9700  108.77  108.96  2893801   \n",
+       "2017-04-27 04:00:00+00:00  108.94  109.1000  108.91  109.06  1660940   \n",
        "\n",
-       "                                                      SPY                      \\\n",
-       "                          trade_count        vwap    open      high       low   \n",
-       "timestamp                                                                       \n",
-       "2015-12-01 05:00:00+00:00       15562  108.754152  209.42  210.8200  209.1100   \n",
-       "2015-12-02 05:00:00+00:00       11581  108.684692  210.60  211.0000  208.2300   \n",
-       "2015-12-03 05:00:00+00:00       16801  108.040315  208.90  209.1500  204.7511   \n",
-       "2015-12-04 05:00:00+00:00        9796  108.192232  206.10  209.9700  205.9300   \n",
-       "2015-12-07 05:00:00+00:00        9104  108.460067  209.20  209.7295  207.2000   \n",
+       "                                                      SPY                    \\\n",
+       "                          trade_count        vwap    open    high       low   \n",
+       "timestamp                                                                     \n",
+       "2017-04-21 04:00:00+00:00        8708  109.386803  235.22  235.31  234.1300   \n",
+       "2017-04-24 04:00:00+00:00       10549  109.150827  237.17  237.41  234.5628   \n",
+       "2017-04-25 04:00:00+00:00       10064  108.912429  237.93  238.95  237.8100   \n",
+       "2017-04-26 04:00:00+00:00       10145  108.884769  238.53  239.53  238.3500   \n",
+       "2017-04-27 04:00:00+00:00        7367  109.026595  238.74  238.95  237.9800   \n",
        "\n",
        "                                                                      \n",
        "                            close     volume trade_count        vwap  \n",
        "timestamp                                                             \n",
-       "2015-12-01 05:00:00+00:00  210.68   97858418      337780  209.921410  \n",
-       "2015-12-02 05:00:00+00:00  208.54  108069059      367013  209.563055  \n",
-       "2015-12-03 05:00:00+00:00  205.58  166224154      546768  206.878936  \n",
-       "2015-12-04 05:00:00+00:00  209.66  192878747      556731  208.178631  \n",
-       "2015-12-07 05:00:00+00:00  208.27  102027111      374705  208.276128  "
+       "2017-04-21 04:00:00+00:00  234.59  110389847      258915  234.784238  \n",
+       "2017-04-24 04:00:00+00:00  237.17  119209877      290927  236.615988  \n",
+       "2017-04-25 04:00:00+00:00  238.55   76698265      240232  238.459191  \n",
+       "2017-04-26 04:00:00+00:00  238.40   84702455      260064  238.801347  \n",
+       "2017-04-27 04:00:00+00:00  238.60   57410326      189214  238.526193  "
       ]
      },
      "metadata": {},
@@ -1053,121 +1194,121 @@
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
-       "      <th>2016-04-15 04:00:00+00:00</th>\n",
-       "      <td>110.80</td>\n",
-       "      <td>110.98</td>\n",
-       "      <td>110.750</td>\n",
-       "      <td>110.95</td>\n",
-       "      <td>1579648</td>\n",
-       "      <td>9657</td>\n",
-       "      <td>110.921389</td>\n",
-       "      <td>208.00</td>\n",
-       "      <td>208.1721</td>\n",
-       "      <td>207.40</td>\n",
-       "      <td>207.80</td>\n",
-       "      <td>75761615</td>\n",
-       "      <td>250856</td>\n",
-       "      <td>207.854515</td>\n",
+       "      <th>2020-04-15 04:00:00+00:00</th>\n",
+       "      <td>117.03</td>\n",
+       "      <td>117.305</td>\n",
+       "      <td>116.710</td>\n",
+       "      <td>117.24</td>\n",
+       "      <td>4367913</td>\n",
+       "      <td>19622</td>\n",
+       "      <td>117.144903</td>\n",
+       "      <td>277.52</td>\n",
+       "      <td>283.9407</td>\n",
+       "      <td>275.46</td>\n",
+       "      <td>277.76</td>\n",
+       "      <td>122419142</td>\n",
+       "      <td>711143</td>\n",
+       "      <td>277.829579</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2016-04-18 04:00:00+00:00</th>\n",
-       "      <td>110.91</td>\n",
-       "      <td>110.95</td>\n",
-       "      <td>110.790</td>\n",
-       "      <td>110.94</td>\n",
-       "      <td>2146193</td>\n",
-       "      <td>10803</td>\n",
-       "      <td>110.851761</td>\n",
-       "      <td>207.11</td>\n",
-       "      <td>209.2800</td>\n",
-       "      <td>207.00</td>\n",
-       "      <td>209.25</td>\n",
-       "      <td>82530883</td>\n",
-       "      <td>268230</td>\n",
-       "      <td>208.623179</td>\n",
+       "      <th>2020-04-16 04:00:00+00:00</th>\n",
+       "      <td>117.19</td>\n",
+       "      <td>117.525</td>\n",
+       "      <td>117.190</td>\n",
+       "      <td>117.39</td>\n",
+       "      <td>4744716</td>\n",
+       "      <td>16906</td>\n",
+       "      <td>117.399687</td>\n",
+       "      <td>279.05</td>\n",
+       "      <td>280.0300</td>\n",
+       "      <td>275.76</td>\n",
+       "      <td>279.10</td>\n",
+       "      <td>132899585</td>\n",
+       "      <td>748803</td>\n",
+       "      <td>278.834513</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2016-04-19 04:00:00+00:00</th>\n",
-       "      <td>110.94</td>\n",
-       "      <td>111.00</td>\n",
-       "      <td>110.770</td>\n",
-       "      <td>110.93</td>\n",
-       "      <td>2019189</td>\n",
-       "      <td>11773</td>\n",
-       "      <td>110.932164</td>\n",
-       "      <td>209.70</td>\n",
-       "      <td>210.2000</td>\n",
-       "      <td>208.94</td>\n",
-       "      <td>209.91</td>\n",
-       "      <td>87907889</td>\n",
-       "      <td>324657</td>\n",
-       "      <td>209.689686</td>\n",
+       "      <th>2020-04-17 04:00:00+00:00</th>\n",
+       "      <td>117.52</td>\n",
+       "      <td>117.620</td>\n",
+       "      <td>117.035</td>\n",
+       "      <td>117.25</td>\n",
+       "      <td>4949824</td>\n",
+       "      <td>25621</td>\n",
+       "      <td>117.358347</td>\n",
+       "      <td>285.41</td>\n",
+       "      <td>287.3000</td>\n",
+       "      <td>282.40</td>\n",
+       "      <td>286.64</td>\n",
+       "      <td>147287419</td>\n",
+       "      <td>699791</td>\n",
+       "      <td>284.304906</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2016-04-20 04:00:00+00:00</th>\n",
-       "      <td>111.02</td>\n",
-       "      <td>111.03</td>\n",
-       "      <td>110.604</td>\n",
-       "      <td>110.66</td>\n",
-       "      <td>2376076</td>\n",
-       "      <td>11319</td>\n",
-       "      <td>110.798771</td>\n",
-       "      <td>209.90</td>\n",
-       "      <td>210.9200</td>\n",
-       "      <td>209.39</td>\n",
-       "      <td>210.07</td>\n",
-       "      <td>81015514</td>\n",
-       "      <td>266771</td>\n",
-       "      <td>210.152074</td>\n",
+       "      <th>2020-04-20 04:00:00+00:00</th>\n",
+       "      <td>117.15</td>\n",
+       "      <td>117.280</td>\n",
+       "      <td>116.940</td>\n",
+       "      <td>117.08</td>\n",
+       "      <td>3856448</td>\n",
+       "      <td>18509</td>\n",
+       "      <td>117.030839</td>\n",
+       "      <td>282.60</td>\n",
+       "      <td>286.7912</td>\n",
+       "      <td>281.35</td>\n",
+       "      <td>281.59</td>\n",
+       "      <td>100126051</td>\n",
+       "      <td>600462</td>\n",
+       "      <td>283.731398</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2016-04-21 04:00:00+00:00</th>\n",
-       "      <td>110.52</td>\n",
-       "      <td>110.62</td>\n",
-       "      <td>110.450</td>\n",
-       "      <td>110.51</td>\n",
-       "      <td>2692797</td>\n",
-       "      <td>10838</td>\n",
-       "      <td>110.521580</td>\n",
-       "      <td>210.13</td>\n",
-       "      <td>210.2500</td>\n",
-       "      <td>208.65</td>\n",
-       "      <td>208.90</td>\n",
-       "      <td>85473874</td>\n",
-       "      <td>294905</td>\n",
-       "      <td>209.439796</td>\n",
+       "      <th>2020-04-21 04:00:00+00:00</th>\n",
+       "      <td>117.43</td>\n",
+       "      <td>117.440</td>\n",
+       "      <td>117.070</td>\n",
+       "      <td>117.14</td>\n",
+       "      <td>4660507</td>\n",
+       "      <td>19425</td>\n",
+       "      <td>117.166762</td>\n",
+       "      <td>276.48</td>\n",
+       "      <td>278.0400</td>\n",
+       "      <td>272.02</td>\n",
+       "      <td>273.04</td>\n",
+       "      <td>126387834</td>\n",
+       "      <td>923555</td>\n",
+       "      <td>274.755324</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "text/plain": [
-       "                              AGG                                    \\\n",
-       "                             open    high      low   close   volume   \n",
-       "timestamp                                                             \n",
-       "2016-04-15 04:00:00+00:00  110.80  110.98  110.750  110.95  1579648   \n",
-       "2016-04-18 04:00:00+00:00  110.91  110.95  110.790  110.94  2146193   \n",
-       "2016-04-19 04:00:00+00:00  110.94  111.00  110.770  110.93  2019189   \n",
-       "2016-04-20 04:00:00+00:00  111.02  111.03  110.604  110.66  2376076   \n",
-       "2016-04-21 04:00:00+00:00  110.52  110.62  110.450  110.51  2692797   \n",
+       "                              AGG                                     \\\n",
+       "                             open     high      low   close   volume   \n",
+       "timestamp                                                              \n",
+       "2020-04-15 04:00:00+00:00  117.03  117.305  116.710  117.24  4367913   \n",
+       "2020-04-16 04:00:00+00:00  117.19  117.525  117.190  117.39  4744716   \n",
+       "2020-04-17 04:00:00+00:00  117.52  117.620  117.035  117.25  4949824   \n",
+       "2020-04-20 04:00:00+00:00  117.15  117.280  116.940  117.08  3856448   \n",
+       "2020-04-21 04:00:00+00:00  117.43  117.440  117.070  117.14  4660507   \n",
        "\n",
        "                                                      SPY                    \\\n",
        "                          trade_count        vwap    open      high     low   \n",
        "timestamp                                                                     \n",
-       "2016-04-15 04:00:00+00:00        9657  110.921389  208.00  208.1721  207.40   \n",
-       "2016-04-18 04:00:00+00:00       10803  110.851761  207.11  209.2800  207.00   \n",
-       "2016-04-19 04:00:00+00:00       11773  110.932164  209.70  210.2000  208.94   \n",
-       "2016-04-20 04:00:00+00:00       11319  110.798771  209.90  210.9200  209.39   \n",
-       "2016-04-21 04:00:00+00:00       10838  110.521580  210.13  210.2500  208.65   \n",
+       "2020-04-15 04:00:00+00:00       19622  117.144903  277.52  283.9407  275.46   \n",
+       "2020-04-16 04:00:00+00:00       16906  117.399687  279.05  280.0300  275.76   \n",
+       "2020-04-17 04:00:00+00:00       25621  117.358347  285.41  287.3000  282.40   \n",
+       "2020-04-20 04:00:00+00:00       18509  117.030839  282.60  286.7912  281.35   \n",
+       "2020-04-21 04:00:00+00:00       19425  117.166762  276.48  278.0400  272.02   \n",
        "\n",
-       "                                                                     \n",
-       "                            close    volume trade_count        vwap  \n",
-       "timestamp                                                            \n",
-       "2016-04-15 04:00:00+00:00  207.80  75761615      250856  207.854515  \n",
-       "2016-04-18 04:00:00+00:00  209.25  82530883      268230  208.623179  \n",
-       "2016-04-19 04:00:00+00:00  209.91  87907889      324657  209.689686  \n",
-       "2016-04-20 04:00:00+00:00  210.07  81015514      266771  210.152074  \n",
-       "2016-04-21 04:00:00+00:00  208.90  85473874      294905  209.439796  "
+       "                                                                      \n",
+       "                            close     volume trade_count        vwap  \n",
+       "timestamp                                                             \n",
+       "2020-04-15 04:00:00+00:00  277.76  122419142      711143  277.829579  \n",
+       "2020-04-16 04:00:00+00:00  279.10  132899585      748803  278.834513  \n",
+       "2020-04-17 04:00:00+00:00  286.64  147287419      699791  284.304906  \n",
+       "2020-04-20 04:00:00+00:00  281.59  100126051      600462  283.731398  \n",
+       "2020-04-21 04:00:00+00:00  273.04  126387834      923555  274.755324  "
       ]
      },
      "metadata": {},
@@ -1175,22 +1316,21 @@
     }
    ],
    "source": [
-    "# Use the Alpaca get_bars function to make the API call to get the 3 years worth of pricing data\n",
-    "# The tickers and timeframe parameters should have been set in Part 1 of this activity \n",
-    "# The start and end dates should be updated with the information set above\n",
-    "# Remember to add the df property to the end of the call so the response is returned as a DataFrame\n",
+    "# Using the Alpaca get_bars function to make the API call to get the 3 years worth of pricing data\n",
+    "# The start and end dates are updated added the df property to the end of the call\n",
     "prices_df = alpaca.get_bars(\n",
     "    tickers,\n",
     "    timeframe,\n",
     "    start=start_date_mc,\n",
-    "    end=end_date_mc,\n",
-    "    limit=limit_rows\n",
+    "    end=end_date_mc\n",
+    "    #limit=limit_rows\n",
     ").df\n",
     "\n",
     "# Reorganize the DataFrame: Separate ticker data\n",
     "AGG = prices_df[prices_df['symbol']=='AGG'].drop('symbol', axis=1)\n",
     "SPY = prices_df[prices_df['symbol']=='SPY'].drop('symbol', axis=1)\n",
     "\n",
+    "# Check what the Separate Ticket Data looks like before concatenation\n",
     "display(SPY.shape)\n",
     "display(AGG.shape)\n",
     "\n",
@@ -1198,20 +1338,21 @@
     "df_prices= pd.DataFrame()\n",
     "df_prices= pd.concat([AGG,SPY],axis=1, keys=['AGG','SPY'])\n",
     "\n",
-    "display(df_prices.head())\n",
-    "display(df_prices.tail())"
+    "# Checking what the  first and last 5 lines look like \n",
+    "display(f\" This is what the first 5 lines of the prices dataframe looks like: {df_prices.head()}\")\n",
+    "display(f\" This is what the first 5 lines of the prices dataframe looks like: {df_prices.tail()}\")"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 2: Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results."
+    "#### Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 209,
+   "execution_count": 78,
    "metadata": {},
    "outputs": [
     {
@@ -1283,99 +1424,99 @@
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
-       "      <th>2015-12-01 05:00:00+00:00</th>\n",
-       "      <td>108.54</td>\n",
-       "      <td>108.8400</td>\n",
-       "      <td>108.43</td>\n",
-       "      <td>108.82</td>\n",
-       "      <td>4259986</td>\n",
-       "      <td>15562</td>\n",
-       "      <td>108.754152</td>\n",
+       "      <th>2017-04-21 04:00:00+00:00</th>\n",
+       "      <td>109.40</td>\n",
+       "      <td>109.4899</td>\n",
+       "      <td>109.30</td>\n",
+       "      <td>109.34</td>\n",
+       "      <td>1539265</td>\n",
+       "      <td>8708</td>\n",
+       "      <td>109.386803</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>209.42</td>\n",
-       "      <td>210.8200</td>\n",
-       "      <td>209.1100</td>\n",
-       "      <td>210.68</td>\n",
-       "      <td>97858418</td>\n",
-       "      <td>337780</td>\n",
-       "      <td>209.921410</td>\n",
+       "      <td>235.22</td>\n",
+       "      <td>235.31</td>\n",
+       "      <td>234.1300</td>\n",
+       "      <td>234.59</td>\n",
+       "      <td>110389847</td>\n",
+       "      <td>258915</td>\n",
+       "      <td>234.784238</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-02 05:00:00+00:00</th>\n",
-       "      <td>108.73</td>\n",
-       "      <td>108.7799</td>\n",
-       "      <td>108.61</td>\n",
-       "      <td>108.67</td>\n",
-       "      <td>2462787</td>\n",
-       "      <td>11581</td>\n",
-       "      <td>108.684692</td>\n",
-       "      <td>-0.001378</td>\n",
-       "      <td>210.60</td>\n",
-       "      <td>211.0000</td>\n",
-       "      <td>208.2300</td>\n",
-       "      <td>208.54</td>\n",
-       "      <td>108069059</td>\n",
-       "      <td>367013</td>\n",
-       "      <td>209.563055</td>\n",
-       "      <td>-0.010158</td>\n",
+       "      <th>2017-04-24 04:00:00+00:00</th>\n",
+       "      <td>109.05</td>\n",
+       "      <td>109.2200</td>\n",
+       "      <td>109.00</td>\n",
+       "      <td>109.18</td>\n",
+       "      <td>2745689</td>\n",
+       "      <td>10549</td>\n",
+       "      <td>109.150827</td>\n",
+       "      <td>-0.001463</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>237.41</td>\n",
+       "      <td>234.5628</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>119209877</td>\n",
+       "      <td>290927</td>\n",
+       "      <td>236.615988</td>\n",
+       "      <td>0.010998</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-03 05:00:00+00:00</th>\n",
-       "      <td>108.41</td>\n",
-       "      <td>108.4100</td>\n",
-       "      <td>107.81</td>\n",
-       "      <td>107.89</td>\n",
-       "      <td>4634020</td>\n",
-       "      <td>16801</td>\n",
-       "      <td>108.040315</td>\n",
-       "      <td>-0.007178</td>\n",
-       "      <td>208.90</td>\n",
-       "      <td>209.1500</td>\n",
-       "      <td>204.7511</td>\n",
-       "      <td>205.58</td>\n",
-       "      <td>166224154</td>\n",
-       "      <td>546768</td>\n",
-       "      <td>206.878936</td>\n",
-       "      <td>-0.014194</td>\n",
+       "      <th>2017-04-25 04:00:00+00:00</th>\n",
+       "      <td>108.99</td>\n",
+       "      <td>109.0450</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>1888469</td>\n",
+       "      <td>10064</td>\n",
+       "      <td>108.912429</td>\n",
+       "      <td>-0.003297</td>\n",
+       "      <td>237.93</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.8100</td>\n",
+       "      <td>238.55</td>\n",
+       "      <td>76698265</td>\n",
+       "      <td>240232</td>\n",
+       "      <td>238.459191</td>\n",
+       "      <td>0.005819</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-04 05:00:00+00:00</th>\n",
-       "      <td>108.05</td>\n",
-       "      <td>108.3000</td>\n",
-       "      <td>108.00</td>\n",
-       "      <td>108.24</td>\n",
-       "      <td>2182057</td>\n",
-       "      <td>9796</td>\n",
-       "      <td>108.192232</td>\n",
-       "      <td>0.003244</td>\n",
-       "      <td>206.10</td>\n",
-       "      <td>209.9700</td>\n",
-       "      <td>205.9300</td>\n",
-       "      <td>209.66</td>\n",
-       "      <td>192878747</td>\n",
-       "      <td>556731</td>\n",
-       "      <td>208.178631</td>\n",
-       "      <td>0.019846</td>\n",
+       "      <th>2017-04-26 04:00:00+00:00</th>\n",
+       "      <td>108.85</td>\n",
+       "      <td>108.9700</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.96</td>\n",
+       "      <td>2893801</td>\n",
+       "      <td>10145</td>\n",
+       "      <td>108.884769</td>\n",
+       "      <td>0.001287</td>\n",
+       "      <td>238.53</td>\n",
+       "      <td>239.53</td>\n",
+       "      <td>238.3500</td>\n",
+       "      <td>238.40</td>\n",
+       "      <td>84702455</td>\n",
+       "      <td>260064</td>\n",
+       "      <td>238.801347</td>\n",
+       "      <td>-0.000629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-07 05:00:00+00:00</th>\n",
-       "      <td>108.30</td>\n",
-       "      <td>108.5800</td>\n",
-       "      <td>108.23</td>\n",
-       "      <td>108.40</td>\n",
-       "      <td>2143773</td>\n",
-       "      <td>9104</td>\n",
-       "      <td>108.460067</td>\n",
-       "      <td>0.001478</td>\n",
-       "      <td>209.20</td>\n",
-       "      <td>209.7295</td>\n",
-       "      <td>207.2000</td>\n",
-       "      <td>208.27</td>\n",
-       "      <td>102027111</td>\n",
-       "      <td>374705</td>\n",
-       "      <td>208.276128</td>\n",
-       "      <td>-0.006630</td>\n",
+       "      <th>2017-04-27 04:00:00+00:00</th>\n",
+       "      <td>108.94</td>\n",
+       "      <td>109.1000</td>\n",
+       "      <td>108.91</td>\n",
+       "      <td>109.06</td>\n",
+       "      <td>1660940</td>\n",
+       "      <td>7367</td>\n",
+       "      <td>109.026595</td>\n",
+       "      <td>0.000918</td>\n",
+       "      <td>238.74</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.9800</td>\n",
+       "      <td>238.60</td>\n",
+       "      <td>57410326</td>\n",
+       "      <td>189214</td>\n",
+       "      <td>238.526193</td>\n",
+       "      <td>0.000839</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -1385,41 +1526,41 @@
        "                              AGG                                     \\\n",
        "                             open      high     low   close   volume   \n",
        "timestamp                                                              \n",
-       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
-       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
-       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
-       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
-       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "2017-04-21 04:00:00+00:00  109.40  109.4899  109.30  109.34  1539265   \n",
+       "2017-04-24 04:00:00+00:00  109.05  109.2200  109.00  109.18  2745689   \n",
+       "2017-04-25 04:00:00+00:00  108.99  109.0450  108.77  108.82  1888469   \n",
+       "2017-04-26 04:00:00+00:00  108.85  108.9700  108.77  108.96  2893801   \n",
+       "2017-04-27 04:00:00+00:00  108.94  109.1000  108.91  109.06  1660940   \n",
        "\n",
        "                                                                   SPY  \\\n",
        "                          trade_count        vwap daily_return    open   \n",
        "timestamp                                                                \n",
-       "2015-12-01 05:00:00+00:00       15562  108.754152          NaN  209.42   \n",
-       "2015-12-02 05:00:00+00:00       11581  108.684692    -0.001378  210.60   \n",
-       "2015-12-03 05:00:00+00:00       16801  108.040315    -0.007178  208.90   \n",
-       "2015-12-04 05:00:00+00:00        9796  108.192232     0.003244  206.10   \n",
-       "2015-12-07 05:00:00+00:00        9104  108.460067     0.001478  209.20   \n",
+       "2017-04-21 04:00:00+00:00        8708  109.386803          NaN  235.22   \n",
+       "2017-04-24 04:00:00+00:00       10549  109.150827    -0.001463  237.17   \n",
+       "2017-04-25 04:00:00+00:00       10064  108.912429    -0.003297  237.93   \n",
+       "2017-04-26 04:00:00+00:00       10145  108.884769     0.001287  238.53   \n",
+       "2017-04-27 04:00:00+00:00        7367  109.026595     0.000918  238.74   \n",
        "\n",
-       "                                                                              \\\n",
-       "                               high       low   close     volume trade_count   \n",
-       "timestamp                                                                      \n",
-       "2015-12-01 05:00:00+00:00  210.8200  209.1100  210.68   97858418      337780   \n",
-       "2015-12-02 05:00:00+00:00  211.0000  208.2300  208.54  108069059      367013   \n",
-       "2015-12-03 05:00:00+00:00  209.1500  204.7511  205.58  166224154      546768   \n",
-       "2015-12-04 05:00:00+00:00  209.9700  205.9300  209.66  192878747      556731   \n",
-       "2015-12-07 05:00:00+00:00  209.7295  207.2000  208.27  102027111      374705   \n",
+       "                                                                            \\\n",
+       "                             high       low   close     volume trade_count   \n",
+       "timestamp                                                                    \n",
+       "2017-04-21 04:00:00+00:00  235.31  234.1300  234.59  110389847      258915   \n",
+       "2017-04-24 04:00:00+00:00  237.41  234.5628  237.17  119209877      290927   \n",
+       "2017-04-25 04:00:00+00:00  238.95  237.8100  238.55   76698265      240232   \n",
+       "2017-04-26 04:00:00+00:00  239.53  238.3500  238.40   84702455      260064   \n",
+       "2017-04-27 04:00:00+00:00  238.95  237.9800  238.60   57410326      189214   \n",
        "\n",
        "                                                    \n",
        "                                 vwap daily_return  \n",
        "timestamp                                           \n",
-       "2015-12-01 05:00:00+00:00  209.921410          NaN  \n",
-       "2015-12-02 05:00:00+00:00  209.563055    -0.010158  \n",
-       "2015-12-03 05:00:00+00:00  206.878936    -0.014194  \n",
-       "2015-12-04 05:00:00+00:00  208.178631     0.019846  \n",
-       "2015-12-07 05:00:00+00:00  208.276128    -0.006630  "
+       "2017-04-21 04:00:00+00:00  234.784238          NaN  \n",
+       "2017-04-24 04:00:00+00:00  236.615988     0.010998  \n",
+       "2017-04-25 04:00:00+00:00  238.459191     0.005819  \n",
+       "2017-04-26 04:00:00+00:00  238.801347    -0.000629  \n",
+       "2017-04-27 04:00:00+00:00  238.526193     0.000839  "
       ]
      },
-     "execution_count": 209,
+     "execution_count": 78,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1441,7 +1582,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 210,
+   "execution_count": 79,
    "metadata": {},
    "outputs": [
     {
@@ -1465,7 +1606,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
+      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
       "  portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()\n"
      ]
     },
@@ -1585,99 +1726,99 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
-       "      <td>0.995416</td>\n",
-       "      <td>1.004481</td>\n",
-       "      <td>0.996797</td>\n",
-       "      <td>1.000518</td>\n",
-       "      <td>1.002498</td>\n",
-       "      <td>1.000430</td>\n",
-       "      <td>1.004572</td>\n",
-       "      <td>0.996509</td>\n",
-       "      <td>0.996917</td>\n",
-       "      <td>0.990032</td>\n",
+       "      <td>1.008253</td>\n",
+       "      <td>1.006098</td>\n",
+       "      <td>0.992512</td>\n",
+       "      <td>1.002595</td>\n",
+       "      <td>0.998880</td>\n",
+       "      <td>1.000970</td>\n",
+       "      <td>1.001584</td>\n",
+       "      <td>0.995094</td>\n",
+       "      <td>0.998594</td>\n",
+       "      <td>1.007824</td>\n",
        "      <td>...</td>\n",
-       "      <td>0.996178</td>\n",
-       "      <td>1.006469</td>\n",
-       "      <td>0.998108</td>\n",
-       "      <td>1.000002</td>\n",
-       "      <td>0.996809</td>\n",
-       "      <td>0.999500</td>\n",
-       "      <td>1.002837</td>\n",
-       "      <td>1.002619</td>\n",
-       "      <td>0.990883</td>\n",
-       "      <td>1.000588</td>\n",
+       "      <td>1.005154</td>\n",
+       "      <td>1.004630</td>\n",
+       "      <td>0.996747</td>\n",
+       "      <td>1.006207</td>\n",
+       "      <td>0.998405</td>\n",
+       "      <td>0.997908</td>\n",
+       "      <td>1.006152</td>\n",
+       "      <td>1.001764</td>\n",
+       "      <td>1.001233</td>\n",
+       "      <td>0.996848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
-       "      <td>0.994230</td>\n",
-       "      <td>1.002156</td>\n",
-       "      <td>0.994374</td>\n",
-       "      <td>0.999545</td>\n",
-       "      <td>1.000504</td>\n",
-       "      <td>1.003181</td>\n",
-       "      <td>1.008086</td>\n",
-       "      <td>0.993343</td>\n",
-       "      <td>0.997515</td>\n",
-       "      <td>0.994913</td>\n",
+       "      <td>1.009995</td>\n",
+       "      <td>1.016669</td>\n",
+       "      <td>0.992902</td>\n",
+       "      <td>1.008630</td>\n",
+       "      <td>1.004047</td>\n",
+       "      <td>0.994494</td>\n",
+       "      <td>1.007313</td>\n",
+       "      <td>0.989995</td>\n",
+       "      <td>0.995111</td>\n",
+       "      <td>1.002882</td>\n",
        "      <td>...</td>\n",
-       "      <td>0.993167</td>\n",
-       "      <td>1.007124</td>\n",
-       "      <td>0.993116</td>\n",
-       "      <td>1.005476</td>\n",
-       "      <td>0.999496</td>\n",
-       "      <td>0.995351</td>\n",
-       "      <td>1.007293</td>\n",
-       "      <td>1.002614</td>\n",
-       "      <td>0.996298</td>\n",
-       "      <td>0.991494</td>\n",
+       "      <td>1.006756</td>\n",
+       "      <td>1.012158</td>\n",
+       "      <td>1.001224</td>\n",
+       "      <td>1.008024</td>\n",
+       "      <td>1.005682</td>\n",
+       "      <td>0.995003</td>\n",
+       "      <td>1.008761</td>\n",
+       "      <td>1.000862</td>\n",
+       "      <td>1.002618</td>\n",
+       "      <td>0.999083</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
-       "      <td>0.986593</td>\n",
-       "      <td>0.997533</td>\n",
-       "      <td>0.995173</td>\n",
-       "      <td>0.999482</td>\n",
-       "      <td>1.001568</td>\n",
-       "      <td>1.005330</td>\n",
-       "      <td>1.006448</td>\n",
-       "      <td>0.995043</td>\n",
-       "      <td>0.992387</td>\n",
-       "      <td>0.997687</td>\n",
+       "      <td>1.006659</td>\n",
+       "      <td>1.019584</td>\n",
+       "      <td>0.983944</td>\n",
+       "      <td>1.011256</td>\n",
+       "      <td>1.012052</td>\n",
+       "      <td>0.988268</td>\n",
+       "      <td>1.019424</td>\n",
+       "      <td>0.994624</td>\n",
+       "      <td>0.992298</td>\n",
+       "      <td>1.009325</td>\n",
        "      <td>...</td>\n",
-       "      <td>0.985804</td>\n",
-       "      <td>1.003864</td>\n",
-       "      <td>0.988760</td>\n",
-       "      <td>1.010174</td>\n",
-       "      <td>1.007404</td>\n",
-       "      <td>1.000905</td>\n",
-       "      <td>1.010112</td>\n",
-       "      <td>0.994048</td>\n",
-       "      <td>1.003290</td>\n",
-       "      <td>0.995069</td>\n",
+       "      <td>1.012094</td>\n",
+       "      <td>1.025601</td>\n",
+       "      <td>1.007402</td>\n",
+       "      <td>1.000066</td>\n",
+       "      <td>1.009778</td>\n",
+       "      <td>0.986562</td>\n",
+       "      <td>1.012961</td>\n",
+       "      <td>0.992210</td>\n",
+       "      <td>1.007533</td>\n",
+       "      <td>1.004140</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
-       "      <td>0.982768</td>\n",
-       "      <td>1.002140</td>\n",
-       "      <td>0.999426</td>\n",
-       "      <td>1.000684</td>\n",
-       "      <td>0.993500</td>\n",
-       "      <td>1.006079</td>\n",
-       "      <td>1.012499</td>\n",
-       "      <td>1.001858</td>\n",
-       "      <td>0.984449</td>\n",
-       "      <td>0.982084</td>\n",
+       "      <td>1.002740</td>\n",
+       "      <td>1.014968</td>\n",
+       "      <td>0.984675</td>\n",
+       "      <td>1.008209</td>\n",
+       "      <td>1.018781</td>\n",
+       "      <td>0.970172</td>\n",
+       "      <td>1.019794</td>\n",
+       "      <td>0.997483</td>\n",
+       "      <td>0.988574</td>\n",
+       "      <td>1.010907</td>\n",
        "      <td>...</td>\n",
-       "      <td>0.989665</td>\n",
-       "      <td>0.997920</td>\n",
-       "      <td>0.984155</td>\n",
-       "      <td>1.010970</td>\n",
-       "      <td>1.011985</td>\n",
-       "      <td>1.002254</td>\n",
-       "      <td>1.010482</td>\n",
-       "      <td>0.992693</td>\n",
-       "      <td>1.002736</td>\n",
-       "      <td>0.997603</td>\n",
+       "      <td>1.020977</td>\n",
+       "      <td>1.024021</td>\n",
+       "      <td>1.006035</td>\n",
+       "      <td>0.999291</td>\n",
+       "      <td>0.996608</td>\n",
+       "      <td>0.990044</td>\n",
+       "      <td>1.018579</td>\n",
+       "      <td>0.988767</td>\n",
+       "      <td>1.002129</td>\n",
+       "      <td>0.999784</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
@@ -1705,123 +1846,123 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7556</th>\n",
-       "      <td>1.817856</td>\n",
-       "      <td>3.208326</td>\n",
-       "      <td>5.895986</td>\n",
-       "      <td>2.485260</td>\n",
-       "      <td>0.727375</td>\n",
-       "      <td>1.107474</td>\n",
-       "      <td>0.806208</td>\n",
-       "      <td>1.385431</td>\n",
-       "      <td>2.123156</td>\n",
-       "      <td>3.755214</td>\n",
+       "      <td>1.969751</td>\n",
+       "      <td>2.691881</td>\n",
+       "      <td>2.395656</td>\n",
+       "      <td>2.981225</td>\n",
+       "      <td>6.260517</td>\n",
+       "      <td>6.916246</td>\n",
+       "      <td>2.816200</td>\n",
+       "      <td>6.132198</td>\n",
+       "      <td>3.771502</td>\n",
+       "      <td>1.872378</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.234793</td>\n",
-       "      <td>1.279325</td>\n",
-       "      <td>1.242116</td>\n",
-       "      <td>2.465024</td>\n",
-       "      <td>2.057157</td>\n",
-       "      <td>2.136048</td>\n",
-       "      <td>3.538444</td>\n",
-       "      <td>2.083928</td>\n",
-       "      <td>0.815692</td>\n",
-       "      <td>1.376205</td>\n",
+       "      <td>6.915155</td>\n",
+       "      <td>5.577726</td>\n",
+       "      <td>3.134008</td>\n",
+       "      <td>2.786076</td>\n",
+       "      <td>4.214366</td>\n",
+       "      <td>2.574528</td>\n",
+       "      <td>5.289592</td>\n",
+       "      <td>1.609830</td>\n",
+       "      <td>2.896729</td>\n",
+       "      <td>2.135066</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7557</th>\n",
-       "      <td>1.802740</td>\n",
-       "      <td>3.195680</td>\n",
-       "      <td>5.902446</td>\n",
-       "      <td>2.473293</td>\n",
-       "      <td>0.731769</td>\n",
-       "      <td>1.106334</td>\n",
-       "      <td>0.805435</td>\n",
-       "      <td>1.376790</td>\n",
-       "      <td>2.113912</td>\n",
-       "      <td>3.762436</td>\n",
+       "      <td>1.976409</td>\n",
+       "      <td>2.686453</td>\n",
+       "      <td>2.392005</td>\n",
+       "      <td>2.999767</td>\n",
+       "      <td>6.301926</td>\n",
+       "      <td>6.956696</td>\n",
+       "      <td>2.799915</td>\n",
+       "      <td>6.086087</td>\n",
+       "      <td>3.764942</td>\n",
+       "      <td>1.883501</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.233659</td>\n",
-       "      <td>1.285466</td>\n",
-       "      <td>1.243618</td>\n",
-       "      <td>2.447239</td>\n",
-       "      <td>2.057369</td>\n",
-       "      <td>2.127757</td>\n",
-       "      <td>3.562791</td>\n",
-       "      <td>2.074030</td>\n",
-       "      <td>0.809907</td>\n",
-       "      <td>1.383094</td>\n",
+       "      <td>6.866283</td>\n",
+       "      <td>5.554780</td>\n",
+       "      <td>3.151511</td>\n",
+       "      <td>2.800639</td>\n",
+       "      <td>4.217081</td>\n",
+       "      <td>2.576109</td>\n",
+       "      <td>5.255691</td>\n",
+       "      <td>1.612770</td>\n",
+       "      <td>2.911897</td>\n",
+       "      <td>2.139328</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7558</th>\n",
-       "      <td>1.814689</td>\n",
-       "      <td>3.189384</td>\n",
-       "      <td>5.934780</td>\n",
-       "      <td>2.493697</td>\n",
-       "      <td>0.728540</td>\n",
-       "      <td>1.109729</td>\n",
-       "      <td>0.806788</td>\n",
-       "      <td>1.380329</td>\n",
-       "      <td>2.119938</td>\n",
-       "      <td>3.770996</td>\n",
+       "      <td>1.982841</td>\n",
+       "      <td>2.684624</td>\n",
+       "      <td>2.382499</td>\n",
+       "      <td>2.989713</td>\n",
+       "      <td>6.301254</td>\n",
+       "      <td>7.035336</td>\n",
+       "      <td>2.788239</td>\n",
+       "      <td>6.123475</td>\n",
+       "      <td>3.726611</td>\n",
+       "      <td>1.887468</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.233067</td>\n",
-       "      <td>1.290164</td>\n",
-       "      <td>1.242070</td>\n",
-       "      <td>2.453611</td>\n",
-       "      <td>2.064028</td>\n",
-       "      <td>2.132178</td>\n",
-       "      <td>3.548387</td>\n",
-       "      <td>2.063120</td>\n",
-       "      <td>0.809743</td>\n",
-       "      <td>1.385340</td>\n",
+       "      <td>6.826757</td>\n",
+       "      <td>5.516465</td>\n",
+       "      <td>3.112097</td>\n",
+       "      <td>2.783460</td>\n",
+       "      <td>4.226690</td>\n",
+       "      <td>2.549341</td>\n",
+       "      <td>5.198994</td>\n",
+       "      <td>1.614292</td>\n",
+       "      <td>2.941095</td>\n",
+       "      <td>2.116563</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7559</th>\n",
-       "      <td>1.815606</td>\n",
-       "      <td>3.185811</td>\n",
-       "      <td>5.947027</td>\n",
-       "      <td>2.475825</td>\n",
-       "      <td>0.727832</td>\n",
-       "      <td>1.114729</td>\n",
-       "      <td>0.807992</td>\n",
-       "      <td>1.378370</td>\n",
-       "      <td>2.129914</td>\n",
-       "      <td>3.766119</td>\n",
+       "      <td>1.965902</td>\n",
+       "      <td>2.685136</td>\n",
+       "      <td>2.378786</td>\n",
+       "      <td>3.002884</td>\n",
+       "      <td>6.288322</td>\n",
+       "      <td>7.003577</td>\n",
+       "      <td>2.803226</td>\n",
+       "      <td>6.117124</td>\n",
+       "      <td>3.749594</td>\n",
+       "      <td>1.900099</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.236337</td>\n",
-       "      <td>1.279740</td>\n",
-       "      <td>1.241750</td>\n",
-       "      <td>2.469166</td>\n",
-       "      <td>2.059569</td>\n",
-       "      <td>2.128260</td>\n",
-       "      <td>3.531976</td>\n",
-       "      <td>2.065823</td>\n",
-       "      <td>0.810442</td>\n",
-       "      <td>1.401024</td>\n",
+       "      <td>6.791296</td>\n",
+       "      <td>5.491520</td>\n",
+       "      <td>3.090034</td>\n",
+       "      <td>2.805434</td>\n",
+       "      <td>4.196107</td>\n",
+       "      <td>2.551723</td>\n",
+       "      <td>5.214413</td>\n",
+       "      <td>1.601457</td>\n",
+       "      <td>2.941627</td>\n",
+       "      <td>2.105078</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7560</th>\n",
-       "      <td>1.820084</td>\n",
-       "      <td>3.179302</td>\n",
-       "      <td>5.953199</td>\n",
-       "      <td>2.478205</td>\n",
-       "      <td>0.724302</td>\n",
-       "      <td>1.116184</td>\n",
-       "      <td>0.800249</td>\n",
-       "      <td>1.372267</td>\n",
-       "      <td>2.129224</td>\n",
-       "      <td>3.778292</td>\n",
+       "      <td>1.979325</td>\n",
+       "      <td>2.685786</td>\n",
+       "      <td>2.378994</td>\n",
+       "      <td>3.015255</td>\n",
+       "      <td>6.328089</td>\n",
+       "      <td>7.032850</td>\n",
+       "      <td>2.799886</td>\n",
+       "      <td>6.128219</td>\n",
+       "      <td>3.722970</td>\n",
+       "      <td>1.914846</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.241591</td>\n",
-       "      <td>1.276476</td>\n",
-       "      <td>1.238913</td>\n",
-       "      <td>2.473878</td>\n",
-       "      <td>2.058323</td>\n",
-       "      <td>2.135516</td>\n",
-       "      <td>3.545815</td>\n",
-       "      <td>2.054306</td>\n",
-       "      <td>0.811296</td>\n",
-       "      <td>1.402196</td>\n",
+       "      <td>6.816968</td>\n",
+       "      <td>5.478393</td>\n",
+       "      <td>3.071425</td>\n",
+       "      <td>2.800556</td>\n",
+       "      <td>4.197540</td>\n",
+       "      <td>2.552706</td>\n",
+       "      <td>5.276443</td>\n",
+       "      <td>1.604561</td>\n",
+       "      <td>2.962536</td>\n",
+       "      <td>2.109551</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -1831,47 +1972,47 @@
       "text/plain": [
        "           0         1         2         3         4         5         6    \\\n",
        "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
-       "1     0.995416  1.004481  0.996797  1.000518  1.002498  1.000430  1.004572   \n",
-       "2     0.994230  1.002156  0.994374  0.999545  1.000504  1.003181  1.008086   \n",
-       "3     0.986593  0.997533  0.995173  0.999482  1.001568  1.005330  1.006448   \n",
-       "4     0.982768  1.002140  0.999426  1.000684  0.993500  1.006079  1.012499   \n",
+       "1     1.008253  1.006098  0.992512  1.002595  0.998880  1.000970  1.001584   \n",
+       "2     1.009995  1.016669  0.992902  1.008630  1.004047  0.994494  1.007313   \n",
+       "3     1.006659  1.019584  0.983944  1.011256  1.012052  0.988268  1.019424   \n",
+       "4     1.002740  1.014968  0.984675  1.008209  1.018781  0.970172  1.019794   \n",
        "...        ...       ...       ...       ...       ...       ...       ...   \n",
-       "7556  1.817856  3.208326  5.895986  2.485260  0.727375  1.107474  0.806208   \n",
-       "7557  1.802740  3.195680  5.902446  2.473293  0.731769  1.106334  0.805435   \n",
-       "7558  1.814689  3.189384  5.934780  2.493697  0.728540  1.109729  0.806788   \n",
-       "7559  1.815606  3.185811  5.947027  2.475825  0.727832  1.114729  0.807992   \n",
-       "7560  1.820084  3.179302  5.953199  2.478205  0.724302  1.116184  0.800249   \n",
+       "7556  1.969751  2.691881  2.395656  2.981225  6.260517  6.916246  2.816200   \n",
+       "7557  1.976409  2.686453  2.392005  2.999767  6.301926  6.956696  2.799915   \n",
+       "7558  1.982841  2.684624  2.382499  2.989713  6.301254  7.035336  2.788239   \n",
+       "7559  1.965902  2.685136  2.378786  3.002884  6.288322  7.003577  2.803226   \n",
+       "7560  1.979325  2.685786  2.378994  3.015255  6.328089  7.032850  2.799886   \n",
        "\n",
        "           7         8         9    ...       490       491       492  \\\n",
        "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
-       "1     0.996509  0.996917  0.990032  ...  0.996178  1.006469  0.998108   \n",
-       "2     0.993343  0.997515  0.994913  ...  0.993167  1.007124  0.993116   \n",
-       "3     0.995043  0.992387  0.997687  ...  0.985804  1.003864  0.988760   \n",
-       "4     1.001858  0.984449  0.982084  ...  0.989665  0.997920  0.984155   \n",
+       "1     0.995094  0.998594  1.007824  ...  1.005154  1.004630  0.996747   \n",
+       "2     0.989995  0.995111  1.002882  ...  1.006756  1.012158  1.001224   \n",
+       "3     0.994624  0.992298  1.009325  ...  1.012094  1.025601  1.007402   \n",
+       "4     0.997483  0.988574  1.010907  ...  1.020977  1.024021  1.006035   \n",
        "...        ...       ...       ...  ...       ...       ...       ...   \n",
-       "7556  1.385431  2.123156  3.755214  ...  1.234793  1.279325  1.242116   \n",
-       "7557  1.376790  2.113912  3.762436  ...  1.233659  1.285466  1.243618   \n",
-       "7558  1.380329  2.119938  3.770996  ...  1.233067  1.290164  1.242070   \n",
-       "7559  1.378370  2.129914  3.766119  ...  1.236337  1.279740  1.241750   \n",
-       "7560  1.372267  2.129224  3.778292  ...  1.241591  1.276476  1.238913   \n",
+       "7556  6.132198  3.771502  1.872378  ...  6.915155  5.577726  3.134008   \n",
+       "7557  6.086087  3.764942  1.883501  ...  6.866283  5.554780  3.151511   \n",
+       "7558  6.123475  3.726611  1.887468  ...  6.826757  5.516465  3.112097   \n",
+       "7559  6.117124  3.749594  1.900099  ...  6.791296  5.491520  3.090034   \n",
+       "7560  6.128219  3.722970  1.914846  ...  6.816968  5.478393  3.071425   \n",
        "\n",
        "           493       494       495       496       497       498       499  \n",
        "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
-       "1     1.000002  0.996809  0.999500  1.002837  1.002619  0.990883  1.000588  \n",
-       "2     1.005476  0.999496  0.995351  1.007293  1.002614  0.996298  0.991494  \n",
-       "3     1.010174  1.007404  1.000905  1.010112  0.994048  1.003290  0.995069  \n",
-       "4     1.010970  1.011985  1.002254  1.010482  0.992693  1.002736  0.997603  \n",
+       "1     1.006207  0.998405  0.997908  1.006152  1.001764  1.001233  0.996848  \n",
+       "2     1.008024  1.005682  0.995003  1.008761  1.000862  1.002618  0.999083  \n",
+       "3     1.000066  1.009778  0.986562  1.012961  0.992210  1.007533  1.004140  \n",
+       "4     0.999291  0.996608  0.990044  1.018579  0.988767  1.002129  0.999784  \n",
        "...        ...       ...       ...       ...       ...       ...       ...  \n",
-       "7556  2.465024  2.057157  2.136048  3.538444  2.083928  0.815692  1.376205  \n",
-       "7557  2.447239  2.057369  2.127757  3.562791  2.074030  0.809907  1.383094  \n",
-       "7558  2.453611  2.064028  2.132178  3.548387  2.063120  0.809743  1.385340  \n",
-       "7559  2.469166  2.059569  2.128260  3.531976  2.065823  0.810442  1.401024  \n",
-       "7560  2.473878  2.058323  2.135516  3.545815  2.054306  0.811296  1.402196  \n",
+       "7556  2.786076  4.214366  2.574528  5.289592  1.609830  2.896729  2.135066  \n",
+       "7557  2.800639  4.217081  2.576109  5.255691  1.612770  2.911897  2.139328  \n",
+       "7558  2.783460  4.226690  2.549341  5.198994  1.614292  2.941095  2.116563  \n",
+       "7559  2.805434  4.196107  2.551723  5.214413  1.601457  2.941627  2.105078  \n",
+       "7560  2.800556  4.197540  2.552706  5.276443  1.604561  2.962536  2.109551  \n",
        "\n",
        "[7561 rows x 500 columns]"
       ]
      },
-     "execution_count": 210,
+     "execution_count": 79,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1883,12 +2024,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 211,
+   "execution_count": 83,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -1918,12 +2059,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 213,
+   "execution_count": 84,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -1940,7 +2081,7 @@
     "MC_sim_dist_plot = MC_thirty_year.plot_distribution()\n",
     "\n",
     "# Save the plot for future use\n",
-    "#MC_sim_dist_plot.get_figure().savefig('MC_fiveyear_dist_plot.png',bbox_inches='tight')"
+    "MC_sim_dist_plot.get_figure().savefig('MC_thirty_year_dist_plot.png',bbox_inches='tight')"
    ]
   },
   {
@@ -1952,7 +2093,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 214,
+   "execution_count": 85,
    "metadata": {
     "scrolled": true,
     "tags": []
@@ -1963,15 +2104,15 @@
      "output_type": "stream",
      "text": [
       "count           500.000000\n",
-      "mean              1.934888\n",
-      "std               0.829951\n",
-      "min               0.434936\n",
-      "25%               1.345831\n",
-      "50%               1.780129\n",
-      "75%               2.354013\n",
-      "max               6.142362\n",
-      "95% CI Lower      0.781430\n",
-      "95% CI Upper      3.644129\n",
+      "mean              3.904416\n",
+      "std               2.334129\n",
+      "min               0.800331\n",
+      "25%               2.482127\n",
+      "50%               3.363703\n",
+      "75%               4.722520\n",
+      "max              26.222406\n",
+      "95% CI Lower      1.377481\n",
+      "95% CI Upper      9.036649\n",
       "Name: 7560, dtype: float64\n"
      ]
     }
@@ -2016,7 +2157,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 217,
+   "execution_count": 86,
    "metadata": {},
    "outputs": [
     {
@@ -2024,7 +2165,7 @@
      "output_type": "stream",
      "text": [
       "There is a 95% chance that an initial investment of $60,688.70 in the portfolio\n",
-      "over the next 5 years will end within in the range of $47,423.99 and $221,157.44 \n"
+      "over the next 30 years will end within in the range of $83,597.52 and $548,422.50 \n"
      ]
     }
    ],
@@ -2066,7 +2207,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 219,
+   "execution_count": 87,
    "metadata": {},
    "outputs": [
     {
@@ -2138,99 +2279,99 @@
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
-       "      <th>2015-12-01 05:00:00+00:00</th>\n",
-       "      <td>108.54</td>\n",
-       "      <td>108.8400</td>\n",
-       "      <td>108.43</td>\n",
-       "      <td>108.82</td>\n",
-       "      <td>4259986</td>\n",
-       "      <td>15562</td>\n",
-       "      <td>108.754152</td>\n",
+       "      <th>2017-04-21 04:00:00+00:00</th>\n",
+       "      <td>109.40</td>\n",
+       "      <td>109.4899</td>\n",
+       "      <td>109.30</td>\n",
+       "      <td>109.34</td>\n",
+       "      <td>1539265</td>\n",
+       "      <td>8708</td>\n",
+       "      <td>109.386803</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>209.42</td>\n",
-       "      <td>210.8200</td>\n",
-       "      <td>209.1100</td>\n",
-       "      <td>210.68</td>\n",
-       "      <td>97858418</td>\n",
-       "      <td>337780</td>\n",
-       "      <td>209.921410</td>\n",
+       "      <td>235.22</td>\n",
+       "      <td>235.31</td>\n",
+       "      <td>234.1300</td>\n",
+       "      <td>234.59</td>\n",
+       "      <td>110389847</td>\n",
+       "      <td>258915</td>\n",
+       "      <td>234.784238</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-02 05:00:00+00:00</th>\n",
-       "      <td>108.73</td>\n",
-       "      <td>108.7799</td>\n",
-       "      <td>108.61</td>\n",
-       "      <td>108.67</td>\n",
-       "      <td>2462787</td>\n",
-       "      <td>11581</td>\n",
-       "      <td>108.684692</td>\n",
-       "      <td>-0.001378</td>\n",
-       "      <td>210.60</td>\n",
-       "      <td>211.0000</td>\n",
-       "      <td>208.2300</td>\n",
-       "      <td>208.54</td>\n",
-       "      <td>108069059</td>\n",
-       "      <td>367013</td>\n",
-       "      <td>209.563055</td>\n",
-       "      <td>-0.010158</td>\n",
+       "      <th>2017-04-24 04:00:00+00:00</th>\n",
+       "      <td>109.05</td>\n",
+       "      <td>109.2200</td>\n",
+       "      <td>109.00</td>\n",
+       "      <td>109.18</td>\n",
+       "      <td>2745689</td>\n",
+       "      <td>10549</td>\n",
+       "      <td>109.150827</td>\n",
+       "      <td>-0.001463</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>237.41</td>\n",
+       "      <td>234.5628</td>\n",
+       "      <td>237.17</td>\n",
+       "      <td>119209877</td>\n",
+       "      <td>290927</td>\n",
+       "      <td>236.615988</td>\n",
+       "      <td>0.010998</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-03 05:00:00+00:00</th>\n",
-       "      <td>108.41</td>\n",
-       "      <td>108.4100</td>\n",
-       "      <td>107.81</td>\n",
-       "      <td>107.89</td>\n",
-       "      <td>4634020</td>\n",
-       "      <td>16801</td>\n",
-       "      <td>108.040315</td>\n",
-       "      <td>-0.007178</td>\n",
-       "      <td>208.90</td>\n",
-       "      <td>209.1500</td>\n",
-       "      <td>204.7511</td>\n",
-       "      <td>205.58</td>\n",
-       "      <td>166224154</td>\n",
-       "      <td>546768</td>\n",
-       "      <td>206.878936</td>\n",
-       "      <td>-0.014194</td>\n",
+       "      <th>2017-04-25 04:00:00+00:00</th>\n",
+       "      <td>108.99</td>\n",
+       "      <td>109.0450</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>1888469</td>\n",
+       "      <td>10064</td>\n",
+       "      <td>108.912429</td>\n",
+       "      <td>-0.003297</td>\n",
+       "      <td>237.93</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.8100</td>\n",
+       "      <td>238.55</td>\n",
+       "      <td>76698265</td>\n",
+       "      <td>240232</td>\n",
+       "      <td>238.459191</td>\n",
+       "      <td>0.005819</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-04 05:00:00+00:00</th>\n",
-       "      <td>108.05</td>\n",
-       "      <td>108.3000</td>\n",
-       "      <td>108.00</td>\n",
-       "      <td>108.24</td>\n",
-       "      <td>2182057</td>\n",
-       "      <td>9796</td>\n",
-       "      <td>108.192232</td>\n",
-       "      <td>0.003244</td>\n",
-       "      <td>206.10</td>\n",
-       "      <td>209.9700</td>\n",
-       "      <td>205.9300</td>\n",
-       "      <td>209.66</td>\n",
-       "      <td>192878747</td>\n",
-       "      <td>556731</td>\n",
-       "      <td>208.178631</td>\n",
-       "      <td>0.019846</td>\n",
+       "      <th>2017-04-26 04:00:00+00:00</th>\n",
+       "      <td>108.85</td>\n",
+       "      <td>108.9700</td>\n",
+       "      <td>108.77</td>\n",
+       "      <td>108.96</td>\n",
+       "      <td>2893801</td>\n",
+       "      <td>10145</td>\n",
+       "      <td>108.884769</td>\n",
+       "      <td>0.001287</td>\n",
+       "      <td>238.53</td>\n",
+       "      <td>239.53</td>\n",
+       "      <td>238.3500</td>\n",
+       "      <td>238.40</td>\n",
+       "      <td>84702455</td>\n",
+       "      <td>260064</td>\n",
+       "      <td>238.801347</td>\n",
+       "      <td>-0.000629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2015-12-07 05:00:00+00:00</th>\n",
-       "      <td>108.30</td>\n",
-       "      <td>108.5800</td>\n",
-       "      <td>108.23</td>\n",
-       "      <td>108.40</td>\n",
-       "      <td>2143773</td>\n",
-       "      <td>9104</td>\n",
-       "      <td>108.460067</td>\n",
-       "      <td>0.001478</td>\n",
-       "      <td>209.20</td>\n",
-       "      <td>209.7295</td>\n",
-       "      <td>207.2000</td>\n",
-       "      <td>208.27</td>\n",
-       "      <td>102027111</td>\n",
-       "      <td>374705</td>\n",
-       "      <td>208.276128</td>\n",
-       "      <td>-0.006630</td>\n",
+       "      <th>2017-04-27 04:00:00+00:00</th>\n",
+       "      <td>108.94</td>\n",
+       "      <td>109.1000</td>\n",
+       "      <td>108.91</td>\n",
+       "      <td>109.06</td>\n",
+       "      <td>1660940</td>\n",
+       "      <td>7367</td>\n",
+       "      <td>109.026595</td>\n",
+       "      <td>0.000918</td>\n",
+       "      <td>238.74</td>\n",
+       "      <td>238.95</td>\n",
+       "      <td>237.9800</td>\n",
+       "      <td>238.60</td>\n",
+       "      <td>57410326</td>\n",
+       "      <td>189214</td>\n",
+       "      <td>238.526193</td>\n",
+       "      <td>0.000839</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -2240,41 +2381,41 @@
        "                              AGG                                     \\\n",
        "                             open      high     low   close   volume   \n",
        "timestamp                                                              \n",
-       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
-       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
-       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
-       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
-       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "2017-04-21 04:00:00+00:00  109.40  109.4899  109.30  109.34  1539265   \n",
+       "2017-04-24 04:00:00+00:00  109.05  109.2200  109.00  109.18  2745689   \n",
+       "2017-04-25 04:00:00+00:00  108.99  109.0450  108.77  108.82  1888469   \n",
+       "2017-04-26 04:00:00+00:00  108.85  108.9700  108.77  108.96  2893801   \n",
+       "2017-04-27 04:00:00+00:00  108.94  109.1000  108.91  109.06  1660940   \n",
        "\n",
        "                                                                   SPY  \\\n",
        "                          trade_count        vwap daily_return    open   \n",
        "timestamp                                                                \n",
-       "2015-12-01 05:00:00+00:00       15562  108.754152          NaN  209.42   \n",
-       "2015-12-02 05:00:00+00:00       11581  108.684692    -0.001378  210.60   \n",
-       "2015-12-03 05:00:00+00:00       16801  108.040315    -0.007178  208.90   \n",
-       "2015-12-04 05:00:00+00:00        9796  108.192232     0.003244  206.10   \n",
-       "2015-12-07 05:00:00+00:00        9104  108.460067     0.001478  209.20   \n",
+       "2017-04-21 04:00:00+00:00        8708  109.386803          NaN  235.22   \n",
+       "2017-04-24 04:00:00+00:00       10549  109.150827    -0.001463  237.17   \n",
+       "2017-04-25 04:00:00+00:00       10064  108.912429    -0.003297  237.93   \n",
+       "2017-04-26 04:00:00+00:00       10145  108.884769     0.001287  238.53   \n",
+       "2017-04-27 04:00:00+00:00        7367  109.026595     0.000918  238.74   \n",
        "\n",
-       "                                                                              \\\n",
-       "                               high       low   close     volume trade_count   \n",
-       "timestamp                                                                      \n",
-       "2015-12-01 05:00:00+00:00  210.8200  209.1100  210.68   97858418      337780   \n",
-       "2015-12-02 05:00:00+00:00  211.0000  208.2300  208.54  108069059      367013   \n",
-       "2015-12-03 05:00:00+00:00  209.1500  204.7511  205.58  166224154      546768   \n",
-       "2015-12-04 05:00:00+00:00  209.9700  205.9300  209.66  192878747      556731   \n",
-       "2015-12-07 05:00:00+00:00  209.7295  207.2000  208.27  102027111      374705   \n",
+       "                                                                            \\\n",
+       "                             high       low   close     volume trade_count   \n",
+       "timestamp                                                                    \n",
+       "2017-04-21 04:00:00+00:00  235.31  234.1300  234.59  110389847      258915   \n",
+       "2017-04-24 04:00:00+00:00  237.41  234.5628  237.17  119209877      290927   \n",
+       "2017-04-25 04:00:00+00:00  238.95  237.8100  238.55   76698265      240232   \n",
+       "2017-04-26 04:00:00+00:00  239.53  238.3500  238.40   84702455      260064   \n",
+       "2017-04-27 04:00:00+00:00  238.95  237.9800  238.60   57410326      189214   \n",
        "\n",
        "                                                    \n",
        "                                 vwap daily_return  \n",
        "timestamp                                           \n",
-       "2015-12-01 05:00:00+00:00  209.921410          NaN  \n",
-       "2015-12-02 05:00:00+00:00  209.563055    -0.010158  \n",
-       "2015-12-03 05:00:00+00:00  206.878936    -0.014194  \n",
-       "2015-12-04 05:00:00+00:00  208.178631     0.019846  \n",
-       "2015-12-07 05:00:00+00:00  208.276128    -0.006630  "
+       "2017-04-21 04:00:00+00:00  234.784238          NaN  \n",
+       "2017-04-24 04:00:00+00:00  236.615988     0.010998  \n",
+       "2017-04-25 04:00:00+00:00  238.459191     0.005819  \n",
+       "2017-04-26 04:00:00+00:00  238.801347    -0.000629  \n",
+       "2017-04-27 04:00:00+00:00  238.526193     0.000839  "
       ]
      },
-     "execution_count": 219,
+     "execution_count": 87,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -2297,7 +2438,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 220,
+   "execution_count": 88,
    "metadata": {},
    "outputs": [
     {
@@ -2321,7 +2462,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
+      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
       "  portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()\n"
      ]
     },
@@ -2441,99 +2582,99 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
-       "      <td>1.001996</td>\n",
-       "      <td>1.002826</td>\n",
-       "      <td>0.997476</td>\n",
-       "      <td>1.002529</td>\n",
-       "      <td>1.000997</td>\n",
-       "      <td>0.995456</td>\n",
-       "      <td>1.005885</td>\n",
-       "      <td>0.998914</td>\n",
-       "      <td>1.000563</td>\n",
-       "      <td>1.001268</td>\n",
+       "      <td>1.003968</td>\n",
+       "      <td>0.996696</td>\n",
+       "      <td>0.999417</td>\n",
+       "      <td>1.000035</td>\n",
+       "      <td>1.003133</td>\n",
+       "      <td>1.003822</td>\n",
+       "      <td>1.000069</td>\n",
+       "      <td>0.998516</td>\n",
+       "      <td>0.998906</td>\n",
+       "      <td>0.999204</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.006260</td>\n",
-       "      <td>1.003151</td>\n",
-       "      <td>1.000614</td>\n",
-       "      <td>0.996284</td>\n",
-       "      <td>1.004947</td>\n",
-       "      <td>1.006713</td>\n",
-       "      <td>0.998164</td>\n",
-       "      <td>1.003474</td>\n",
-       "      <td>1.002156</td>\n",
-       "      <td>0.999479</td>\n",
+       "      <td>0.998207</td>\n",
+       "      <td>1.003909</td>\n",
+       "      <td>1.011612</td>\n",
+       "      <td>1.000415</td>\n",
+       "      <td>1.001307</td>\n",
+       "      <td>0.998441</td>\n",
+       "      <td>0.992080</td>\n",
+       "      <td>1.001593</td>\n",
+       "      <td>1.002781</td>\n",
+       "      <td>0.996299</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
-       "      <td>1.003022</td>\n",
-       "      <td>0.998928</td>\n",
-       "      <td>0.995606</td>\n",
-       "      <td>1.000174</td>\n",
-       "      <td>0.998829</td>\n",
-       "      <td>0.995395</td>\n",
-       "      <td>1.006507</td>\n",
-       "      <td>1.000087</td>\n",
-       "      <td>1.003424</td>\n",
-       "      <td>1.003162</td>\n",
+       "      <td>1.002542</td>\n",
+       "      <td>0.997702</td>\n",
+       "      <td>0.996288</td>\n",
+       "      <td>0.994534</td>\n",
+       "      <td>1.005623</td>\n",
+       "      <td>1.001248</td>\n",
+       "      <td>0.994714</td>\n",
+       "      <td>0.996807</td>\n",
+       "      <td>0.994349</td>\n",
+       "      <td>0.999380</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.012074</td>\n",
-       "      <td>1.004880</td>\n",
-       "      <td>0.998521</td>\n",
-       "      <td>0.993953</td>\n",
-       "      <td>1.015243</td>\n",
-       "      <td>1.008627</td>\n",
-       "      <td>1.006313</td>\n",
-       "      <td>1.001656</td>\n",
-       "      <td>1.002674</td>\n",
-       "      <td>0.996028</td>\n",
+       "      <td>0.997212</td>\n",
+       "      <td>1.000231</td>\n",
+       "      <td>1.012971</td>\n",
+       "      <td>0.999741</td>\n",
+       "      <td>1.003125</td>\n",
+       "      <td>0.992724</td>\n",
+       "      <td>0.988614</td>\n",
+       "      <td>1.007155</td>\n",
+       "      <td>1.009002</td>\n",
+       "      <td>0.993575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
-       "      <td>1.001654</td>\n",
-       "      <td>1.000618</td>\n",
-       "      <td>0.991449</td>\n",
-       "      <td>1.001103</td>\n",
-       "      <td>1.001637</td>\n",
-       "      <td>0.995827</td>\n",
-       "      <td>1.009066</td>\n",
-       "      <td>0.997249</td>\n",
-       "      <td>1.006752</td>\n",
-       "      <td>1.004234</td>\n",
+       "      <td>1.003223</td>\n",
+       "      <td>0.995110</td>\n",
+       "      <td>1.000588</td>\n",
+       "      <td>0.994296</td>\n",
+       "      <td>1.004321</td>\n",
+       "      <td>1.002493</td>\n",
+       "      <td>0.995013</td>\n",
+       "      <td>0.998544</td>\n",
+       "      <td>0.996597</td>\n",
+       "      <td>0.997926</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.009399</td>\n",
-       "      <td>1.005646</td>\n",
-       "      <td>1.000018</td>\n",
-       "      <td>0.992299</td>\n",
-       "      <td>1.017224</td>\n",
-       "      <td>1.010538</td>\n",
-       "      <td>1.007105</td>\n",
-       "      <td>0.998970</td>\n",
-       "      <td>1.000418</td>\n",
-       "      <td>0.996833</td>\n",
+       "      <td>0.994796</td>\n",
+       "      <td>1.005450</td>\n",
+       "      <td>1.007842</td>\n",
+       "      <td>0.995907</td>\n",
+       "      <td>1.007817</td>\n",
+       "      <td>0.994050</td>\n",
+       "      <td>0.988778</td>\n",
+       "      <td>1.006474</td>\n",
+       "      <td>1.003531</td>\n",
+       "      <td>0.993109</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
-       "      <td>0.997948</td>\n",
-       "      <td>1.001974</td>\n",
-       "      <td>0.990061</td>\n",
-       "      <td>1.001054</td>\n",
-       "      <td>0.997467</td>\n",
-       "      <td>0.997374</td>\n",
-       "      <td>1.008653</td>\n",
-       "      <td>1.003303</td>\n",
-       "      <td>1.007684</td>\n",
-       "      <td>1.008195</td>\n",
+       "      <td>1.004927</td>\n",
+       "      <td>0.997483</td>\n",
+       "      <td>1.004699</td>\n",
+       "      <td>0.986922</td>\n",
+       "      <td>1.004343</td>\n",
+       "      <td>0.996370</td>\n",
+       "      <td>0.996025</td>\n",
+       "      <td>1.001485</td>\n",
+       "      <td>0.997548</td>\n",
+       "      <td>1.005150</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.005372</td>\n",
-       "      <td>1.005334</td>\n",
-       "      <td>1.000705</td>\n",
-       "      <td>0.990215</td>\n",
-       "      <td>1.017017</td>\n",
-       "      <td>1.008011</td>\n",
-       "      <td>1.013148</td>\n",
-       "      <td>0.998100</td>\n",
-       "      <td>1.005241</td>\n",
-       "      <td>0.999292</td>\n",
+       "      <td>0.998907</td>\n",
+       "      <td>1.001483</td>\n",
+       "      <td>1.008223</td>\n",
+       "      <td>0.992295</td>\n",
+       "      <td>1.003733</td>\n",
+       "      <td>0.989380</td>\n",
+       "      <td>0.987328</td>\n",
+       "      <td>1.004726</td>\n",
+       "      <td>1.002973</td>\n",
+       "      <td>0.992775</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
@@ -2561,123 +2702,123 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2516</th>\n",
-       "      <td>1.262176</td>\n",
-       "      <td>1.499660</td>\n",
-       "      <td>1.168768</td>\n",
-       "      <td>1.161150</td>\n",
-       "      <td>1.481129</td>\n",
-       "      <td>1.697437</td>\n",
-       "      <td>1.234175</td>\n",
-       "      <td>1.486514</td>\n",
-       "      <td>1.200787</td>\n",
-       "      <td>1.114178</td>\n",
+       "      <td>1.340684</td>\n",
+       "      <td>1.714879</td>\n",
+       "      <td>1.391500</td>\n",
+       "      <td>1.105881</td>\n",
+       "      <td>1.199133</td>\n",
+       "      <td>1.592661</td>\n",
+       "      <td>1.226361</td>\n",
+       "      <td>1.615708</td>\n",
+       "      <td>1.051752</td>\n",
+       "      <td>1.829854</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.120010</td>\n",
-       "      <td>1.611631</td>\n",
-       "      <td>1.601934</td>\n",
-       "      <td>1.384206</td>\n",
-       "      <td>1.472724</td>\n",
-       "      <td>1.435029</td>\n",
-       "      <td>1.319988</td>\n",
-       "      <td>1.255970</td>\n",
-       "      <td>1.399747</td>\n",
-       "      <td>1.369451</td>\n",
+       "      <td>1.121279</td>\n",
+       "      <td>1.347393</td>\n",
+       "      <td>1.381216</td>\n",
+       "      <td>2.138410</td>\n",
+       "      <td>1.305923</td>\n",
+       "      <td>1.183595</td>\n",
+       "      <td>1.056257</td>\n",
+       "      <td>1.290881</td>\n",
+       "      <td>1.641617</td>\n",
+       "      <td>1.189513</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2517</th>\n",
-       "      <td>1.258543</td>\n",
-       "      <td>1.503087</td>\n",
-       "      <td>1.166365</td>\n",
-       "      <td>1.162796</td>\n",
-       "      <td>1.481472</td>\n",
-       "      <td>1.699343</td>\n",
-       "      <td>1.234229</td>\n",
-       "      <td>1.494686</td>\n",
-       "      <td>1.193864</td>\n",
-       "      <td>1.112011</td>\n",
+       "      <td>1.343042</td>\n",
+       "      <td>1.708583</td>\n",
+       "      <td>1.373585</td>\n",
+       "      <td>1.105873</td>\n",
+       "      <td>1.201127</td>\n",
+       "      <td>1.597219</td>\n",
+       "      <td>1.225094</td>\n",
+       "      <td>1.615958</td>\n",
+       "      <td>1.043972</td>\n",
+       "      <td>1.839905</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.117217</td>\n",
-       "      <td>1.611016</td>\n",
-       "      <td>1.603360</td>\n",
-       "      <td>1.381922</td>\n",
-       "      <td>1.475802</td>\n",
-       "      <td>1.433202</td>\n",
-       "      <td>1.327488</td>\n",
-       "      <td>1.259867</td>\n",
-       "      <td>1.398071</td>\n",
-       "      <td>1.370947</td>\n",
+       "      <td>1.115757</td>\n",
+       "      <td>1.348719</td>\n",
+       "      <td>1.377915</td>\n",
+       "      <td>2.134561</td>\n",
+       "      <td>1.301571</td>\n",
+       "      <td>1.188154</td>\n",
+       "      <td>1.053694</td>\n",
+       "      <td>1.295958</td>\n",
+       "      <td>1.632281</td>\n",
+       "      <td>1.184167</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2518</th>\n",
-       "      <td>1.260777</td>\n",
-       "      <td>1.500234</td>\n",
-       "      <td>1.164549</td>\n",
-       "      <td>1.164125</td>\n",
-       "      <td>1.490087</td>\n",
-       "      <td>1.704825</td>\n",
-       "      <td>1.236687</td>\n",
-       "      <td>1.493343</td>\n",
-       "      <td>1.195503</td>\n",
-       "      <td>1.112368</td>\n",
+       "      <td>1.328095</td>\n",
+       "      <td>1.698323</td>\n",
+       "      <td>1.377901</td>\n",
+       "      <td>1.105066</td>\n",
+       "      <td>1.198839</td>\n",
+       "      <td>1.601946</td>\n",
+       "      <td>1.222029</td>\n",
+       "      <td>1.612470</td>\n",
+       "      <td>1.043309</td>\n",
+       "      <td>1.848932</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.115073</td>\n",
-       "      <td>1.611674</td>\n",
-       "      <td>1.599681</td>\n",
-       "      <td>1.386791</td>\n",
-       "      <td>1.475279</td>\n",
-       "      <td>1.436890</td>\n",
-       "      <td>1.326311</td>\n",
-       "      <td>1.267081</td>\n",
-       "      <td>1.398302</td>\n",
-       "      <td>1.368808</td>\n",
+       "      <td>1.115475</td>\n",
+       "      <td>1.348152</td>\n",
+       "      <td>1.377523</td>\n",
+       "      <td>2.131091</td>\n",
+       "      <td>1.311064</td>\n",
+       "      <td>1.188505</td>\n",
+       "      <td>1.054879</td>\n",
+       "      <td>1.293146</td>\n",
+       "      <td>1.620359</td>\n",
+       "      <td>1.185251</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2519</th>\n",
-       "      <td>1.264765</td>\n",
-       "      <td>1.499056</td>\n",
-       "      <td>1.168827</td>\n",
-       "      <td>1.160263</td>\n",
-       "      <td>1.492501</td>\n",
-       "      <td>1.706832</td>\n",
-       "      <td>1.236531</td>\n",
-       "      <td>1.498308</td>\n",
-       "      <td>1.194134</td>\n",
-       "      <td>1.109872</td>\n",
+       "      <td>1.340343</td>\n",
+       "      <td>1.707714</td>\n",
+       "      <td>1.376279</td>\n",
+       "      <td>1.105696</td>\n",
+       "      <td>1.195439</td>\n",
+       "      <td>1.595224</td>\n",
+       "      <td>1.228214</td>\n",
+       "      <td>1.604137</td>\n",
+       "      <td>1.041421</td>\n",
+       "      <td>1.844302</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.116673</td>\n",
-       "      <td>1.611887</td>\n",
-       "      <td>1.595173</td>\n",
-       "      <td>1.382228</td>\n",
-       "      <td>1.472086</td>\n",
-       "      <td>1.441390</td>\n",
-       "      <td>1.320130</td>\n",
-       "      <td>1.267262</td>\n",
-       "      <td>1.397987</td>\n",
-       "      <td>1.375935</td>\n",
+       "      <td>1.116569</td>\n",
+       "      <td>1.348104</td>\n",
+       "      <td>1.374941</td>\n",
+       "      <td>2.136241</td>\n",
+       "      <td>1.313128</td>\n",
+       "      <td>1.191337</td>\n",
+       "      <td>1.056157</td>\n",
+       "      <td>1.287498</td>\n",
+       "      <td>1.623881</td>\n",
+       "      <td>1.187486</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2520</th>\n",
-       "      <td>1.265419</td>\n",
-       "      <td>1.504478</td>\n",
-       "      <td>1.165455</td>\n",
-       "      <td>1.161619</td>\n",
-       "      <td>1.493244</td>\n",
-       "      <td>1.704969</td>\n",
-       "      <td>1.232784</td>\n",
-       "      <td>1.498358</td>\n",
-       "      <td>1.190762</td>\n",
-       "      <td>1.111974</td>\n",
+       "      <td>1.344424</td>\n",
+       "      <td>1.704627</td>\n",
+       "      <td>1.372022</td>\n",
+       "      <td>1.109352</td>\n",
+       "      <td>1.197477</td>\n",
+       "      <td>1.591032</td>\n",
+       "      <td>1.234007</td>\n",
+       "      <td>1.602769</td>\n",
+       "      <td>1.045095</td>\n",
+       "      <td>1.848108</td>\n",
        "      <td>...</td>\n",
-       "      <td>1.116493</td>\n",
-       "      <td>1.618708</td>\n",
-       "      <td>1.596545</td>\n",
-       "      <td>1.386699</td>\n",
-       "      <td>1.473046</td>\n",
-       "      <td>1.436758</td>\n",
-       "      <td>1.322485</td>\n",
-       "      <td>1.271118</td>\n",
-       "      <td>1.396610</td>\n",
-       "      <td>1.375737</td>\n",
+       "      <td>1.119036</td>\n",
+       "      <td>1.342878</td>\n",
+       "      <td>1.374301</td>\n",
+       "      <td>2.149994</td>\n",
+       "      <td>1.314648</td>\n",
+       "      <td>1.196926</td>\n",
+       "      <td>1.049333</td>\n",
+       "      <td>1.285908</td>\n",
+       "      <td>1.622219</td>\n",
+       "      <td>1.184247</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -2687,47 +2828,47 @@
       "text/plain": [
        "           0         1         2         3         4         5         6    \\\n",
        "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
-       "1     1.001996  1.002826  0.997476  1.002529  1.000997  0.995456  1.005885   \n",
-       "2     1.003022  0.998928  0.995606  1.000174  0.998829  0.995395  1.006507   \n",
-       "3     1.001654  1.000618  0.991449  1.001103  1.001637  0.995827  1.009066   \n",
-       "4     0.997948  1.001974  0.990061  1.001054  0.997467  0.997374  1.008653   \n",
+       "1     1.003968  0.996696  0.999417  1.000035  1.003133  1.003822  1.000069   \n",
+       "2     1.002542  0.997702  0.996288  0.994534  1.005623  1.001248  0.994714   \n",
+       "3     1.003223  0.995110  1.000588  0.994296  1.004321  1.002493  0.995013   \n",
+       "4     1.004927  0.997483  1.004699  0.986922  1.004343  0.996370  0.996025   \n",
        "...        ...       ...       ...       ...       ...       ...       ...   \n",
-       "2516  1.262176  1.499660  1.168768  1.161150  1.481129  1.697437  1.234175   \n",
-       "2517  1.258543  1.503087  1.166365  1.162796  1.481472  1.699343  1.234229   \n",
-       "2518  1.260777  1.500234  1.164549  1.164125  1.490087  1.704825  1.236687   \n",
-       "2519  1.264765  1.499056  1.168827  1.160263  1.492501  1.706832  1.236531   \n",
-       "2520  1.265419  1.504478  1.165455  1.161619  1.493244  1.704969  1.232784   \n",
+       "2516  1.340684  1.714879  1.391500  1.105881  1.199133  1.592661  1.226361   \n",
+       "2517  1.343042  1.708583  1.373585  1.105873  1.201127  1.597219  1.225094   \n",
+       "2518  1.328095  1.698323  1.377901  1.105066  1.198839  1.601946  1.222029   \n",
+       "2519  1.340343  1.707714  1.376279  1.105696  1.195439  1.595224  1.228214   \n",
+       "2520  1.344424  1.704627  1.372022  1.109352  1.197477  1.591032  1.234007   \n",
        "\n",
        "           7         8         9    ...       490       491       492  \\\n",
        "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
-       "1     0.998914  1.000563  1.001268  ...  1.006260  1.003151  1.000614   \n",
-       "2     1.000087  1.003424  1.003162  ...  1.012074  1.004880  0.998521   \n",
-       "3     0.997249  1.006752  1.004234  ...  1.009399  1.005646  1.000018   \n",
-       "4     1.003303  1.007684  1.008195  ...  1.005372  1.005334  1.000705   \n",
+       "1     0.998516  0.998906  0.999204  ...  0.998207  1.003909  1.011612   \n",
+       "2     0.996807  0.994349  0.999380  ...  0.997212  1.000231  1.012971   \n",
+       "3     0.998544  0.996597  0.997926  ...  0.994796  1.005450  1.007842   \n",
+       "4     1.001485  0.997548  1.005150  ...  0.998907  1.001483  1.008223   \n",
        "...        ...       ...       ...  ...       ...       ...       ...   \n",
-       "2516  1.486514  1.200787  1.114178  ...  1.120010  1.611631  1.601934   \n",
-       "2517  1.494686  1.193864  1.112011  ...  1.117217  1.611016  1.603360   \n",
-       "2518  1.493343  1.195503  1.112368  ...  1.115073  1.611674  1.599681   \n",
-       "2519  1.498308  1.194134  1.109872  ...  1.116673  1.611887  1.595173   \n",
-       "2520  1.498358  1.190762  1.111974  ...  1.116493  1.618708  1.596545   \n",
+       "2516  1.615708  1.051752  1.829854  ...  1.121279  1.347393  1.381216   \n",
+       "2517  1.615958  1.043972  1.839905  ...  1.115757  1.348719  1.377915   \n",
+       "2518  1.612470  1.043309  1.848932  ...  1.115475  1.348152  1.377523   \n",
+       "2519  1.604137  1.041421  1.844302  ...  1.116569  1.348104  1.374941   \n",
+       "2520  1.602769  1.045095  1.848108  ...  1.119036  1.342878  1.374301   \n",
        "\n",
        "           493       494       495       496       497       498       499  \n",
        "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
-       "1     0.996284  1.004947  1.006713  0.998164  1.003474  1.002156  0.999479  \n",
-       "2     0.993953  1.015243  1.008627  1.006313  1.001656  1.002674  0.996028  \n",
-       "3     0.992299  1.017224  1.010538  1.007105  0.998970  1.000418  0.996833  \n",
-       "4     0.990215  1.017017  1.008011  1.013148  0.998100  1.005241  0.999292  \n",
+       "1     1.000415  1.001307  0.998441  0.992080  1.001593  1.002781  0.996299  \n",
+       "2     0.999741  1.003125  0.992724  0.988614  1.007155  1.009002  0.993575  \n",
+       "3     0.995907  1.007817  0.994050  0.988778  1.006474  1.003531  0.993109  \n",
+       "4     0.992295  1.003733  0.989380  0.987328  1.004726  1.002973  0.992775  \n",
        "...        ...       ...       ...       ...       ...       ...       ...  \n",
-       "2516  1.384206  1.472724  1.435029  1.319988  1.255970  1.399747  1.369451  \n",
-       "2517  1.381922  1.475802  1.433202  1.327488  1.259867  1.398071  1.370947  \n",
-       "2518  1.386791  1.475279  1.436890  1.326311  1.267081  1.398302  1.368808  \n",
-       "2519  1.382228  1.472086  1.441390  1.320130  1.267262  1.397987  1.375935  \n",
-       "2520  1.386699  1.473046  1.436758  1.322485  1.271118  1.396610  1.375737  \n",
+       "2516  2.138410  1.305923  1.183595  1.056257  1.290881  1.641617  1.189513  \n",
+       "2517  2.134561  1.301571  1.188154  1.053694  1.295958  1.632281  1.184167  \n",
+       "2518  2.131091  1.311064  1.188505  1.054879  1.293146  1.620359  1.185251  \n",
+       "2519  2.136241  1.313128  1.191337  1.056157  1.287498  1.623881  1.187486  \n",
+       "2520  2.149994  1.314648  1.196926  1.049333  1.285908  1.622219  1.184247  \n",
        "\n",
        "[2521 rows x 500 columns]"
       ]
      },
-     "execution_count": 220,
+     "execution_count": 88,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -2740,12 +2881,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 221,
+   "execution_count": 90,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -2788,7 +2929,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 223,
+   "execution_count": 91,
    "metadata": {},
    "outputs": [
     {
@@ -2796,15 +2937,15 @@
      "output_type": "stream",
      "text": [
       "count           500.000000\n",
-      "mean              1.361165\n",
-      "std               0.183951\n",
-      "min               0.881066\n",
-      "25%               1.226060\n",
-      "50%               1.353608\n",
-      "75%               1.477290\n",
-      "max               1.896707\n",
-      "95% CI Lower      1.045778\n",
-      "95% CI Upper      1.738758\n",
+      "mean              1.388901\n",
+      "std               0.273389\n",
+      "min               0.708003\n",
+      "25%               1.179971\n",
+      "50%               1.381968\n",
+      "75%               1.576866\n",
+      "max               2.325089\n",
+      "95% CI Lower      0.933175\n",
+      "95% CI Upper      1.937684\n",
       "Name: 2520, dtype: float64\n"
      ]
     }
@@ -2835,7 +2976,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 225,
+   "execution_count": 93,
    "metadata": {},
    "outputs": [
     {
@@ -2853,15 +2994,15 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 228,
+   "execution_count": 94,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "There is a 95% chance that an initial investment of $60,688.70 in the portfolio\n",
-      "over the next 30 years will end within in the range of $63,466.93 and $105,522.98 \n"
+      "There is a 95% chance that an initial investment of $60,688.70 in the portfolio,\n",
+      "over the next 10 years will end within in the range of $56,633.15 and $117,595.54 \n"
      ]
     }
    ],
@@ -2875,10 +3016,8 @@
     "lower_cumltv_return_10y = \"${:,.2f}\".format(ci_lower_ten_cumulative_return)\n",
     "upper_cumltv_return_10y = \"${:,.2f}\".format(ci_upper_ten_cumulative_return)\n",
     "\n",
-    "print(f\"There is a 95% chance that an initial investment of {tot_holdings_val} in the portfolio\")\n",
-    "print(f\"over the next 30 years will end within in the range of {lower_cumltv_return_10y} and {upper_cumltv_return_10y} \")\n",
-    "\n",
-    "\n"
+    "print(f\"There is a 95% chance that an initial investment of {tot_holdings_val} in the portfolio,\")\n",
+    "print(f\"over the next 10 years will end within in the range of {lower_cumltv_return_10y} and {upper_cumltv_return_10y} \")\n"
    ]
   },
   {
@@ -2888,30 +3027,23 @@
     "#### Question: Will weighting the portfolio more heavily to stocks allow the credit union members to retire after only 10 years?"
    ]
   },
-  {
-   "cell_type": "raw",
-   "metadata": {},
-   "source": [
-    "**Answer** # YOUR ANSWER HERE"
-   ]
-  },
   {
    "cell_type": "code",
-   "execution_count": 229,
+   "execution_count": 95,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Initial lower estimation $47,423.99, Final lower estimation $63,466.93\n",
-      "Initial upper estimation $221,157.44, Final upper estimation $105,522.98\n"
+      "30 year lower estimation $83,597.52, 10 year lower estimation $56,633.15\n",
+      "30 year upper estimation $548,422.50, 10 year upper estimation $117,595.54\n"
      ]
     }
    ],
    "source": [
-    "print(f\"Initial lower estimation {lower_cumltv_return}, Final lower estimation {lower_cumltv_return_10y}\")\n",
-    "print(f\"Initial upper estimation {upper_cumltv_return}, Final upper estimation {upper_cumltv_return_10y }\")"
+    "print(f\"30 year lower estimation {lower_cumltv_return}, 10 year lower estimation {lower_cumltv_return_10y}\")\n",
+    "print(f\"30 year upper estimation {upper_cumltv_return}, 10 year upper estimation {upper_cumltv_return_10y }\")"
    ]
   },
   {
@@ -2919,7 +3051,9 @@
    "execution_count": null,
    "metadata": {},
    "outputs": [],
-   "source": []
+   "source": [
+    "**Answer** # YOUR ANSWER HERE"
+   ]
   }
  ],
  "metadata": {

commit 8819908dd94dfa2fac0c1c718e53a2e0468c09d9
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Sun Apr 24 02:37:18 2022 -0400

    Changed the folder structure up

diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/.DS_Store differ
diff --git a/Utils/MCForecastTools.py b/MCForecastTools.py
similarity index 100%
rename from Utils/MCForecastTools.py
rename to MCForecastTools.py
diff --git a/Utils/app.txt b/Utils/app.txt
deleted file mode 100644
index 8b13789..0000000
--- a/Utils/app.txt
+++ /dev/null
@@ -1 +0,0 @@
-

commit b8f5160964ea4375476fb6911418599afa702d48
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Sun Apr 24 01:58:53 2022 -0400

    added updated ipynb file

diff --git a/financial_planning_tools.ipynb b/financial_planning_tools.ipynb
index f950857..546bf91 100644
--- a/financial_planning_tools.ipynb
+++ b/financial_planning_tools.ipynb
@@ -6,24 +6,24 @@
    "source": [
     "# Financial Planning with APIs and Simulations\n",
     "\n",
-    "In this Challenge, you’ll create two financial analysis tools by using a single Jupyter notebook:\n",
+    "Create two financial analysis tools with a single Jupyter notebook:\n",
     "\n",
-    "Part 1: A financial planner for emergencies. The members will be able to use this tool to visualize their current savings. The members can then determine if they have enough reserves for an emergency fund.\n",
+    "1. Tool 1: A financial planner for *emergencies*. \n",
+    "2. Tool 2: A financial planner for **retirement**. \n",
     "\n",
-    "Part 2: A financial planner for retirement. This tool will forecast the performance of their retirement portfolio in 30 years. To do this, the tool will make an Alpaca API call via the Alpaca SDK to get historical price data for use in Monte Carlo simulations.\n",
-    "\n",
-    "You’ll use the information from the Monte Carlo simulation to answer questions about the portfolio in your Jupyter notebook.\n",
-    "\n"
+    "While the first tool is more an account summary page for all their held assets, the second tool forecasts portfolio performance.  The goal is to 1) allow the credit union members to visualize their current savings 2) see their portfolio's perspective performance in 30 yeaers 3) determine if they have enough reserves for an emergency fund."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 85,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Import the required libraries and dependencies\n",
     "import os\n",
+    "import re\n",
+    "from re import search\n",
     "import requests\n",
     "import json\n",
     "import pandas as pd\n",
@@ -31,435 +31,524 @@
     "import alpaca_trade_api as tradeapi\n",
     "from MCForecastTools import MCSimulation\n",
     "\n",
+    "\n",
     "%matplotlib inline"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Load the environment variables from the .env file\n",
-    "#by calling the load_dotenv function\n",
-    "load_dotenv()"
-   ]
-  },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## Part 1: Create a Financial Planner for Emergencies"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Evaluate the Cryptocurrency Wallet by Using the Requests Library\n",
-    "\n",
-    "In this section, you’ll determine the current value of a member’s cryptocurrency wallet. You’ll collect the current prices for the Bitcoin and Ethereum cryptocurrencies by using the Python Requests library. For the prototype, you’ll assume that the member holds the 1.2 Bitcoins (BTC) and 5.3 Ethereum coins (ETH). To do all this, complete the following steps:\n",
-    "\n",
-    "1. Create a variable named `monthly_income`, and set its value to `12000`.\n",
-    "\n",
-    "2. Use the Requests library to get the current price (in US dollars) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints that the starter code supplies.\n",
-    "\n",
-    "3. Navigate the JSON response object to access the current price of each coin, and store each in a variable.\n",
-    "\n",
-    "    > **Hint** Note the specific identifier for each cryptocurrency in the API JSON response. The Bitcoin identifier is `1`, and the Ethereum identifier is `1027`.\n",
-    "\n",
-    "4. Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet.\n",
-    "\n"
+    "## FUNCTIONS"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 86,
    "metadata": {},
    "outputs": [],
    "source": [
-    "# The current number of coins for each cryptocurrency asset held in the portfolio.\n",
-    "btc_coins = 1.2\n",
-    "eth_coins = 5.3"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 1: Create a variable named `monthly_income`, and set its value to `12000`."
+    "def API_CryptoCoinSetup(crypto_coins=dict):\n",
+    "    \n",
+    "    \"\"\"\n",
+    "    The basic idea here is that whatever cypto symbol input\n",
+    "    this program will spit out the current $USD price. As the\n",
+    "    name indicates, an API will be used\n",
+    "    \"\"\"\n",
+    "    \n",
+    "    coin_urls =[]\n",
+    "    coin_keys =[]\n",
+    "    api_dict  ={}\n",
+    "    \n",
+    "    for key in coin_dict:\n",
+    "        coin_keys = key+'_url'\n",
+    "        coin_urls = \"https://api.alternative.me/v2/ticker/\" + key + \"/\" +\"?convert=USD\"\n",
+    "        api_dict[coin_keys] = coin_urls\n",
+    "    \n",
+    "  \n",
+    "    return(api_dict)\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 87,
    "metadata": {},
    "outputs": [],
    "source": [
-    "# The monthly amount for the member's household income\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Review the endpoint URLs for the API calls to Free Crypto API in order to get the current pricing information for both BTC and ETH."
+    "def API_CryptoPrices(crypto_coins=dict,):\n",
+    "    \n",
+    "    \"\"\"\n",
+    "    returns back \n",
+    "    \n",
+    "    \"\"\"\n",
+    "    \n",
+    "    # API USAGE: BTC AND ETH PRICE INFORMATION \n",
+    "    # PART 1: Crypto API Call endpoint URLs for the held cryptocurrency assets\n",
+    "    # btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=USD\"\n",
+    "    # eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=USD\"\n",
+    "    \n",
+    "    btc_response\n",
+    "    eth_response\n",
+    "\n",
+    "    for key in crypto_coins:\n",
+    "        if key == \"Ethereum_url\":\n",
+    "            eth_responce = requests.get(crypto_coins[key]).json()\n",
+    "        elif key == \"Bitcoin_url\":\n",
+    "            btc_responce = requests.get(crypto_coins[key]).json()\n",
+    "\n",
+    "    # Use the json.dumps function to review the response data from the API call\n",
+    "    # NOTE: Indent and sort_keys parameters used for readability\n",
+    "\n",
+    "    print(json.dumps(btc_response, indent=4, sort_keys=True))\n",
+    "    print(\"\\n\\n\")\n",
+    "    print(json.dumps(eth_response, indent=4, sort_keys=True))\n",
+    "    print(\"\\n\\n\")\n",
+    "    \n",
+    "    # Navigate the BTC response object to access the current price of BTC\n",
+    "    btc_price = btc_response['data']['1']['quotes']['USD']['price']\n",
+    "\n",
+    "    # Print the current price of BTC\n",
+    "    eth_price = eth_response['data']['1027']['quotes']['USD']['price']\n",
+    " \n",
+    "    return(eth_price, btc_price)   "
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 159,
    "metadata": {},
    "outputs": [],
    "source": [
-    "# The Free Crypto API Call endpoint URLs for the held cryptocurrency assets\n",
-    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=USD\"\n",
-    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=USD\""
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 2. Use the Requests library to get the current price (in US dollars) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints that the starter code supplied."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Using the Python requests library, make an API call to access the current price of BTC\n",
-    "btc_response = # YOUR CODE HERE\n",
+    "def create_savings_df(idx=list,cols=list,data=list):\n",
+    "    \n",
+    "    personal_savings = pd.DataFrame(list(data),\n",
+    "              columns=cols)\n",
+    "    \n",
+    "    personal_savings['index'] = indx_list\n",
+    "    personal_savings = personal_savings.set_index('index')\n",
     "\n",
-    "# Use the json.dumps function to review the response data from the API call\n",
-    "# Use the indent and sort_keys parameters to make the response object readable\n",
-    "# YOUR CODE HERE\n"
+    "    return(personal_savings)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 51,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "True"
+      ]
+     },
+     "execution_count": 51,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "# Using the Python requests library, make an API call to access the current price ETH\n",
-    "eth_response = # YOUR CODE HERE\n",
-    "\n",
-    "# Use the json.dumps function to review the response data from the API call\n",
-    "# Use the indent and sort_keys parameters to make the response object readable\n",
-    "# YOUR CODE HERE\n"
+    "# Load the environment variables from the .env file\n",
+    "#by calling the load_dotenv function\n",
+    "load_dotenv('app.env')"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 3: Navigate the JSON response object to access the current price of each coin, and store each in a variable."
+    "## Part 1: Create a Financial Planner for Emergencies"
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": null,
+   "cell_type": "markdown",
    "metadata": {},
-   "outputs": [],
    "source": [
-    "# Navigate the BTC response object to access the current price of BTC\n",
-    "btc_price = # YOUR CODE HERE\n",
+    "### Evaluate the Cryptocurrency Wallet by Using the Requests Library\n",
     "\n",
-    "# Print the current price of BTC\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Navigate the BTC response object to access the current price of ETH\n",
-    "eth_price = # YOUR CODE HERE\n",
+    "**Aim**: Determine the current value of a member’s cryptocurrency wallet. You’ll collect the current prices for the Bitcoin and Ethereum cryptocurrencies by using the Python Requests library. Assume that the member holds the 1.2 Bitcoins (BTC) and 5.3 Ethereum coins (ETH). Steps:\n",
     "\n",
-    "# Print the current price of ETH\n",
-    "# YOUR CODE HERE\n"
+    "1. Create a variable named `monthly_income`, and set its value to `12000`.\n",
+    "2. Use Requests library to get the current price (USD) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints.\n",
+    "3. Navigate the JSON response object to access the current price of each coin, and store each in a variable.\n",
+    "4. Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet.\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "### Step 4: Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet."
+    "## CODE"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
+   "execution_count": 96,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{\n",
+      "    \"data\": {\n",
+      "        \"1\": {\n",
+      "            \"circulating_supply\": 19020025,\n",
+      "            \"id\": 1,\n",
+      "            \"last_updated\": 1650734380,\n",
+      "            \"max_supply\": 21000000,\n",
+      "            \"name\": \"Bitcoin\",\n",
+      "            \"quotes\": {\n",
+      "                \"USD\": {\n",
+      "                    \"market_cap\": 757063604506,\n",
+      "                    \"percent_change_1h\": -0.411535096903784,\n",
+      "                    \"percent_change_24h\": 0.623025653082545,\n",
+      "                    \"percent_change_7d\": -2.04708590102934,\n",
+      "                    \"percentage_change_1h\": -0.411535096903784,\n",
+      "                    \"percentage_change_24h\": 0.623025653082545,\n",
+      "                    \"percentage_change_7d\": -2.04708590102934,\n",
+      "                    \"price\": 39756.0,\n",
+      "                    \"volume_24h\": 36091787992\n",
+      "                }\n",
+      "            },\n",
+      "            \"rank\": 1,\n",
+      "            \"symbol\": \"BTC\",\n",
+      "            \"total_supply\": 19020025,\n",
+      "            \"website_slug\": \"bitcoin\"\n",
+      "        }\n",
+      "    },\n",
+      "    \"metadata\": {\n",
+      "        \"error\": null,\n",
+      "        \"num_cryptocurrencies\": 3106,\n",
+      "        \"timestamp\": 1650734380\n",
+      "    }\n",
+      "}\n",
+      "\n",
+      "\n",
+      "\n",
+      "{\n",
+      "    \"data\": {\n",
+      "        \"1027\": {\n",
+      "            \"circulating_supply\": 120497970,\n",
+      "            \"id\": 1027,\n",
+      "            \"last_updated\": 1650734275,\n",
+      "            \"max_supply\": 0,\n",
+      "            \"name\": \"Ethereum\",\n",
+      "            \"quotes\": {\n",
+      "                \"USD\": {\n",
+      "                    \"market_cap\": 357374732727,\n",
+      "                    \"percent_change_1h\": -0.500278748251154,\n",
+      "                    \"percent_change_24h\": 0.0933006273066053,\n",
+      "                    \"percent_change_7d\": -2.71454304261497,\n",
+      "                    \"percentage_change_1h\": -0.500278748251154,\n",
+      "                    \"percentage_change_24h\": 0.0933006273066053,\n",
+      "                    \"percentage_change_7d\": -2.71454304261497,\n",
+      "                    \"price\": 2962.76,\n",
+      "                    \"volume_24h\": 10170903037\n",
+      "                }\n",
+      "            },\n",
+      "            \"rank\": 2,\n",
+      "            \"symbol\": \"ETH\",\n",
+      "            \"total_supply\": 120497970,\n",
+      "            \"website_slug\": \"ethereum\"\n",
+      "        }\n",
+      "    },\n",
+      "    \"metadata\": {\n",
+      "        \"error\": null,\n",
+      "        \"num_cryptocurrencies\": 3106,\n",
+      "        \"timestamp\": 1650734275\n",
+      "    }\n",
+      "}\n",
+      "\n",
+      "\n",
+      "\n",
+      "CALCULATIONS:\n",
+      "1. The price of one Ethereum coin(USD): $2,962.76\n",
+      "2. The price of one Bitcoin coin(USD): $39,756.00\n",
+      "3. This is value of your total BTC holding in USD: 47707.2\n",
+      "4. This is value of your total ETH holding in USD: 15702.628\n",
+      "5. This is the values of your total crypto wallet $63,409.83:\n"
+     ]
+    }
+   ],
+   "source": [
+    "# 1. Need to know whart coins the Credit Union believes in\n",
+    "coin_dict ={'Ethereum':'ETH', 'Bitcoin':'BTC'}\n",
+    "key_iterable = coin_dict.keys()\n",
+    "key_list = list(key_iterable)\n",
+    "\n",
+    "# 2. The current number of coins for each cryptocurrency asset held in the portfolio.\n",
+    "btc_coins = 1.2\n",
+    "eth_coins = 5.3\n",
+    "\n",
+    "# 3. The monthly amount for the member's household income\n",
+    "monthly_income = 12000\n",
+    "\n",
+    "url_dict = API_CryptoCoinSetup(coin_dict)\n",
+    "url_list = list(url_dict.keys())\n",
+    "url_addresses = list(url_dict.values())\n",
+    "\n",
+    "eth_price,btc_price = API_CryptoPrices(url_dict)\n",
+    "\n",
+    "print(f\"CALCULATIONS:\")\n",
+    "eth_curr = \"${:,.2f}\".format(eth_price)\n",
+    "btc_curr = \"${:,.2f}\".format(btc_price)\n",
+    "print(f\"1. The price of one Ethereum coin(USD): {eth_curr}\")\n",
+    "print(f\"2. The price of one Bitcoin coin(USD): {btc_curr}\")\n",
+    "\n",
+    "\n",
     "# Compute the current value of the BTC holding \n",
-    "btc_value = # YOUR CODE HERE\n",
+    "btc_value = (btc_price * btc_coins) \n",
+    "btc_holding =\"${:,.2f}\".format(btc_value)\n",
+    "eth_value = (eth_price * eth_coins)\n",
+    "eth_holding=\"${:,.2f}\".format(eth_value)\n",
     "\n",
     "# Print current value of your holding in BTC\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Compute the current value of the ETH holding \n",
-    "eth_value = # YOUR CODE HERE\n",
+    "print(f\"3. This is the value of your total BTC holding in USD: {btc_value}\")\n",
+    "print(f\"4. This is the value of your total ETH holding in USD: {eth_value}\")\n",
+    "\n",
     "\n",
-    "# Print current value of your holding in ETH\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
     "# Compute the total value of the cryptocurrency wallet\n",
-    "# Add the value of the BTC holding to the value of the ETH holding\n",
-    "total_crypto_wallet = # YOUR CODE HERE\n",
+    "total_crypto_wallet = (btc_value + eth_value)\n",
+    "crypto_wallet_balance = \"${:,.2f}\".format(total_crypto_wallet)\n",
     "\n",
     "# Print current cryptocurrency wallet balance\n",
-    "# YOUR CODE HERE\n"
+    "print(f\"5. This is the values of your total crypto wallet {crypto_wallet_balance}:\")\n",
+    "\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "### Evaluate the Stock and Bond Holdings by Using the Alpaca SDK\n",
-    "\n",
-    "In this section, you’ll determine the current value of a member’s stock and bond holdings. You’ll make an API call to Alpaca via the Alpaca SDK to get the current closing prices of the SPDR S&P 500 ETF Trust (ticker: SPY) and of the iShares Core US Aggregate Bond ETF (ticker: AGG). For the prototype, assume that the member holds 110 shares of SPY, which represents the stock portion of their portfolio, and 200 shares of AGG, which represents the bond portion. To do all this, complete the following steps:\n",
-    "\n",
-    "1. In the `Starter_Code` folder, create an environment file (`.env`) to store the values of your Alpaca API key and Alpaca secret key.\n",
+    "# Evaluate the Stock and Bond Holdings by Using the Alpaca SDK\n",
     "\n",
-    "2. Set the variables for the Alpaca API and secret keys. Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object. In this object, include the parameters for the Alpaca API key, the secret key, and the version number.\n",
+    "Determine the current value of a member’s stock and bond holdings. You’ll make an API call to Alpaca via the Alpaca SDK to get the current closing prices of the SPDR S&P 500 ETF Trust (ticker: SPY) and of the iShares Core US Aggregate Bond ETF (ticker: AGG). Complete the following steps:\n",
     "\n",
+    "1. Create an environment file (`.env`) to store your Alpaca API key and Alpaca secret key values.\n",
+    "2. Set the variables for the Alpaca API and secret keys. (Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object)\n",
     "3. Set the following parameters for the Alpaca API call:\n",
-    "\n",
     "    - `tickers`: Use the tickers for the member’s stock and bond holdings.\n",
-    "\n",
     "    - `timeframe`: Use a time frame of one day.\n",
-    "\n",
-    "    - `start_date` and `end_date`: Use the same date for these parameters, and format them with the date of the previous weekday (or `2020-08-07`). This is because you want the one closing price for the most-recent trading day.\n",
-    "\n",
-    "4. Get the current closing prices for `SPY` and `AGG` by using the Alpaca `get_bars` function. Format the response as a Pandas DataFrame by including the `df` property at the end of the `get_bars` function.\n",
-    "\n",
+    "    - `start_date` and `end_date`: Use the same date for these parametersv (`2020-08-07`).\n",
+    "4. Get the current closing prices for `SPY` & `AGG` by using the Alpaca `get_bars` function. Format response as a Pandas df\n",
     "5. Navigating the Alpaca response DataFrame, select the `SPY` and `AGG` closing prices, and store them as variables.\n",
-    "\n",
-    "6. Calculate the value, in US dollars, of the current amount of shares in each of the stock and bond portions of the portfolio, and print the results.\n"
+    "6. Calculate the value (USD) of the current amount of stocks and bond shares in the portfolio.\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Review the total number of shares held in both (SPY) and (AGG)."
+    "#### PORTFOLIO DETAILS AND ALPACA SDK SET-UP"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 106,
    "metadata": {},
    "outputs": [],
    "source": [
+    "## USING THE ALPACA SDK\n",
+    "\n",
     "# Current amount of shares held in both the stock (SPY) and bond (AGG) portion of the portfolio.\n",
     "spy_shares = 110\n",
-    "agg_shares = 200\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 1: In the `Starter_Code` folder, create an environment file (`.env`) to store the values of your Alpaca API key and Alpaca secret key."
+    "agg_shares = 200\n",
+    "\n",
+    "# Load the environment variables from the .env file\n",
+    "# (call the load_dotenv function)\n",
+    "load_dotenv('app.env')\n",
+    "\n",
+    "# Set the variables for the Alpaca API and secret keys\n",
+    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\")\n",
+    "alpaca_secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n",
+    "\n",
+    "\n",
+    "# Create the Alpaca tradeapi.REST object\n",
+    "alpaca = tradeapi.REST(\n",
+    "    alpaca_api_key,\n",
+    "    alpaca_secret_key,\n",
+    "    api_version=\"v2\")\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 2: Set the variables for the Alpaca API and secret keys. Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object. In this object, include the parameters for the Alpaca API key, the secret key, and the version number."
+    "#### API Parameters"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 107,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Set the variables for the Alpaca API and secret keys\n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n",
-    "\n",
-    "# Create the Alpaca tradeapi.REST object\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 3: Set the following parameters for the Alpaca API call:\n",
+    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\")\n",
+    "alpaca_secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n",
     "\n",
-    "- `tickers`: Use the tickers for the member’s stock and bond holdings.\n",
     "\n",
-    "- `timeframe`: Use a time frame of one day.\n",
+    "# Create the Alpaca tradeapi.REST object\n",
+    "alpaca = tradeapi.REST(\n",
+    "    alpaca_api_key,\n",
+    "    alpaca_secret_key,\n",
+    "    api_version=\"v2\")\n",
     "\n",
-    "- `start_date` and `end_date`: Use the same date for these parameters, and format them with the date of the previous weekday (or `2020-08-07`). This is because you want the one closing price for the most-recent trading day.\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
     "# Set the tickers for both the bond and stock portion of the portfolio\n",
-    "# YOUR CODE HERE\n",
+    "tickers= ['SPY','AGG']\n",
     "\n",
     "# Set timeframe to 1Day\n",
-    "# YOUR CODE HERE\n",
+    "timeframe = \"1Day\"\n",
     "\n",
     "# Format current date as ISO format\n",
-    "# Set both the start and end date at the date of your prior weekday \n",
-    "# This will give you the closing price of the previous trading day\n",
-    "# Alternatively you can use a start and end date of 2020-08-07\n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n"
+    "# Set both the start and end date at the date to 2020-08-07\n",
+    "start_date = pd.Timestamp(\"2020-08-07\", tz=\"America/New_York\").isoformat()\n",
+    "end_date = pd.Timestamp(\"2020-08-07\", tz=\"America/New_York\").isoformat()\n",
+    "\n"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "#### Step 4: Get the current closing prices for `SPY` and `AGG` by using the Alpaca `get_bars` function. Format the response as a Pandas DataFrame by including the `df` property at the end of the `get_bars` function."
+    "#### USING ALPACA'S `get_bars` FUNCTION FOR CLOSING PRICES"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 141,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>AGG</th>\n",
+       "      <th>SPY</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2020-08-07</th>\n",
+       "      <td>119.43</td>\n",
+       "      <td>334.57</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               AGG     SPY\n",
+       "2020-08-07  119.43  334.57"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "\n",
+      "AGG    float64\n",
+      "SPY    float64\n",
+      "dtype: object\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "CALCULATIONS:\n",
+      "1. This is the AGG Closing Price: $119.43\n",
+      "2. This is the SPY Closing Price: $334.57 \n",
+      "3. This is the Total Value of your AGG Holdings: $23,886.00\n",
+      "4. This is the Total Value of your SPY Holdings: $36,802.70\n",
+      "5. This is the Value of your AGG & SPY Holdings: $60,688.70\n",
+      "5. This is the Value of your Crypto Wallet, Stocks & Bond Holdings: $124,098.53\n"
+     ]
+    }
+   ],
    "source": [
     "# Use the Alpaca get_bars function to get current closing prices the portfolio\n",
-    "# Be sure to set the `df` property after the function to format the response object as a DataFrame\n",
-    "# YOUR CODE HERE\n",
+    "# `df` property after the function\n",
+    "\n",
+    "df_portfolio = alpaca.get_bars(\n",
+    "    tickers,\n",
+    "    timeframe,\n",
+    "    start = start_date,\n",
+    "    end = end_date\n",
+    ").df\n",
+    "\n",
+    "#display(df_portfolio.head())\n",
     "\n",
     "# Reorganize the DataFrame\n",
-    "# Separate ticker data\n",
-    "# YOUR CODE HERE\n",
+    "AGG = df_portfolio[df_portfolio['symbol']=='AGG'].drop('symbol', axis=1)\n",
+    "SPY= df_portfolio[df_portfolio['symbol']=='SPY'].drop('symbol', axis=1)\n",
     "\n",
     "# Concatenate the ticker DataFrames\n",
-    "# YOUR CODE HERE\n",
+    "df_portfolio = pd.concat([AGG,SPY],axis=1, keys=['AGG','SPY'])\n",
+    "df_portfolio.index = df_portfolio.index.date\n",
     "\n",
     "# Review the first 5 rows of the Alpaca DataFrame\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 5: Navigating the Alpaca response DataFrame, select the `SPY` and `AGG` closing prices, and store them as variables."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Access the closing price for AGG from the Alpaca DataFrame\n",
-    "# Converting the value to a floating point number\n",
-    "agg_close_price = # YOUR CODE HERE\n",
+    "#display(df_portfolio.head())\n",
     "\n",
-    "# Print the AGG closing price\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Access the closing price for SPY from the Alpaca DataFrame\n",
-    "# Converting the value to a floating point number\n",
-    "spy_close_price = # YOUR CODE HERE\n",
+    "# Access the closing price for AGG from the Alpaca DataFrame\n",
+    "# Note: its cleaner and neater to just have a dataframe of closing prices \n",
     "\n",
-    "# Print the SPY closing price\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Step 6: Calculate the value, in US dollars, of the current amount of shares in each of the stock and bond portions of the portfolio, and print the results."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Calculate the current value of the bond portion of the portfolio\n",
-    "agg_value = # YOUR CODE HERE\n",
+    "df_closing_prices = pd.DataFrame()\n",
+    "df_closing_prices[\"AGG\"] = df_portfolio[\"AGG\"][\"close\"]\n",
+    "df_closing_prices[\"SPY\"] = df_portfolio[\"SPY\"][\"close\"]\n",
     "\n",
-    "# Print the current value of the bond portfolio\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Calculate the current value of the stock portion of the portfolio\n",
-    "spy_value = # YOUR CODE HERE\n",
+    "display(df_closing_prices.head())\n",
+    "print(\"\\n\")\n",
+    "print(df_closing_prices.dtypes)\n",
+    "print(\"\\n\\n\")\n",
+    "# Saving `SPY` and `AGG` closing prices to variables\n",
+    "agg_close_price = df_closing_prices.iat[0, 0]\n",
+    "spy_close_price = df_closing_prices.iat[0, 1]\n",
     "\n",
-    "# Print the current value of the stock portfolio\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Calculate the total value of the stock and bond portion of the portfolio\n",
-    "total_stocks_bonds = # YOUR CODE HERE\n",
+    "# Calculate the current value of the bond portion of the portfolio\n",
+    "agg_value = (agg_close_price * agg_shares)\n",
+    "spy_value = (spy_close_price * spy_shares)\n",
+    "total_stocks_bonds = agg_value + spy_value\n",
     "\n",
-    "# Print the current balance of the stock and bond portion of the portfolio\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
     "# Calculate the total value of the member's entire savings portfolio\n",
     "# Add the value of the cryptocurrency walled to the value of the total stocks and bonds\n",
-    "total_portfolio = # YOUR CODE HERE\n",
+    "portfolio_val = total_stocks_bonds + total_crypto_wallet\n",
     "\n",
-    "# Print current cryptocurrency wallet balance\n",
-    "# YOUR CODE HERE\n"
+    "# Just for show and fancy stylings\n",
+    "agg_close = \"${:,.2f}\".format(agg_close_price)\n",
+    "spy_close = \"${:,.2f}\".format(spy_close_price)\n",
+    "agg_val = \"${:,.2f}\".format(agg_value)\n",
+    "spy_val = \"${:,.2f}\".format(spy_value)\n",
+    "tot_holdings_val = \"${:,.2f}\".format(total_stocks_bonds)\n",
+    "tot_portfolio_val = \"${:,.2f}\".format(portfolio_val)\n",
+    "\n",
+    "\n",
+    "print(\"CALCULATIONS:\")\n",
+    "print(f\"1. This is the AGG Closing Price: {agg_close}\")\n",
+    "print(f\"2. This is the SPY Closing Price: {spy_close} \")\n",
+    "print(f\"3. This is the Total Value of your AGG Holdings: {agg_val}\")\n",
+    "print(f\"4. This is the Total Value of your SPY Holdings: {spy_val}\")\n",
+    "print(f\"5. This is the Value of your AGG & SPY Holdings: {tot_holdings_val}\")\n",
+    "print(f\"5. This is the Value of your Crypto Wallet, Stocks & Bond Holdings: {tot_portfolio_val}\")"
    ]
   },
   {
@@ -468,20 +557,16 @@
    "source": [
     "### Evaluate the Emergency Fund\n",
     "\n",
-    "In this section, you’ll use the valuations for the cryptocurrency wallet and for the stock and bond portions of the portfolio to determine if the credit union member has enough savings to build an emergency fund into their financial plan. To do this, complete the following steps:\n",
-    "\n",
-    "1. Create a Python list named `savings_data` that has two elements. The first element contains the total value of the cryptocurrency wallet. The second element contains the total value of the stock and bond portions of the portfolio.\n",
+    "**AIM: Use the valuations for the cryptocurrency wallet and for the stock and bond portions of the portfolio to determine if the credit union member has enough savings to build an emergency fund into their financial plan. Steps**\n",
     "\n",
+    "1. Create a Python list named `savings_data`:\n",
+    "    - `saving_data[0]`: the total value of the cryptocurrency wallet. \n",
+    "    - `saving_data[1]`: the total value of the stock and bond portions of the portfolio.\n",
     "2. Use the `savings_data` list to create a Pandas DataFrame named `savings_df`, and then display this DataFrame. The function to create the DataFrame should take the following three parameters:\n",
-    "\n",
     "    - `savings_data`: Use the list that you just created.\n",
-    "\n",
     "    - `columns`: Set this parameter equal to a Python list with a single value called `amount`.\n",
-    "\n",
     "    - `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n",
-    "\n",
-    "3. Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio. The y-axis of the pie chart uses `amount`. Be sure to add a title.\n",
-    "\n",
+    "3. Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio.\n",
     "4. Using Python, determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan. Ideally, an emergency fund should equal to three times the member’s monthly income. To do this, implement the following steps:\n",
     "\n",
     "    1. Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of $12000. (You set this earlier in Part 1).\n",
@@ -504,16 +589,37 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 160,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[60688.7, 124098.52799999999]\n",
+      "                amount\n",
+      "index                 \n",
+      "crypto       60688.700\n",
+      "stock/bond  124098.528\n"
+     ]
+    }
+   ],
    "source": [
     "# Consolidate financial assets data into a Python list\n",
-    "# YOUR CODE HERE\n",
+    "savings_data_list = []\n",
+    "\n",
+    "cols_list = ['amount']\n",
+    "indx_list =['crypto','stock/bond']\n",
+    "savings_data = [total_stocks_bonds,portfolio_val]\n",
     "\n",
     "# Review the Python list savings_data\n",
-    "# YOUR CODE HERE\n",
-    "    "
+    "print(savings_data)\n",
+    "\n",
+    "# Create a Pandas DataFrame called savings_df \n",
+    "savings_df = create_savings_df(indx_list,cols_list,savings_data)\n",
+    "\n",
+    "# Display the savings_df DataFrame\n",
+    "print(savings_df)"
    ]
   },
   {
@@ -529,19 +635,6 @@
     "- `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Create a Pandas DataFrame called savings_df \n",
-    "# YOUR CODE HERE\n",
-    "\n",
-    "# Display the savings_df DataFrame\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -551,12 +644,39 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 170,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<AxesSubplot:title={'center':'Asset Breakdown; Crypto & Stocks/Bonds Asset Valuation'}, ylabel='amount'>"
+      ]
+     },
+     "execution_count": 170,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Plot the total value of the member's portfolio (crypto and stock/bond) in a pie chart\n",
-    "# YOUR CODE HERE\n"
+    "colors = ['pink', 'silver']\n",
+    "savings_pie_grph = savings_df.plot(kind='pie',\n",
+    "                y='amount',\n",
+    "                autopct='%1.0f%%', colors=colors,\n",
+    "                title='Asset Breakdown; Crypto & Stocks/Bonds Asset Valuation'\n",
+    "               )\n",
+    "savings_pie_grph"
    ]
   },
   {
@@ -585,37 +705,29 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 175,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Congratulations, You have enough money in this fund\n"
+     ]
+    }
+   ],
    "source": [
     "# Create a variable named emergency_fund_value\n",
-    "# YOUR CODE HERE\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "##### Step 4-2: Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
-    "\n",
-    "* If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
+    "emergency_fund_value = 3.00 * monthly_income\n",
     "\n",
-    "* Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
     "\n",
-    "* Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
     "# Evaluate the possibility of creating an emergency fund with 3 conditions:\n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n"
+    "if portfolio_val > emergency_fund_value:\n",
+    "    print(f\"Congratulations, You have enough money in this fund\")\n",
+    "elif portfolio_val == emergency_fund_value:\n",
+    "    print(f\"Congratulations!!! Your Total Portfolio value is equal to the amount designated for an emergency savings\")\n",
+    "else:\n",
+    "    print(f\"Congrats, you are only ${emergency_fund_value - tot_portfolio_val} away from your goal\")\n"
    ]
   },
   {
@@ -656,41 +768,438 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 197,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Set start and end dates of 3 years back from your current date\n",
-    "# Alternatively, you can use an end date of 2020-08-07 and work 3 years back from that date \n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n",
+    "start_date_mc = pd.Timestamp(\"2017-04-21\", tz=\"America/New_York\").isoformat()\n",
+    "end_date_mc = pd.Timestamp(\"2020-04-21\", tz=\"America/New_York\").isoformat()\n",
     "\n",
     "# Set number of rows to 1000 to retrieve the maximum amount of rows\n",
-    "# YOUR CODE HERE"
+    "#limit_rows = 1000"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 207,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(98, 7)"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "(98, 7)"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"7\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"7\" halign=\"left\">SPY</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2015-12-01 05:00:00+00:00</th>\n",
+       "      <td>108.54</td>\n",
+       "      <td>108.8400</td>\n",
+       "      <td>108.43</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>4259986</td>\n",
+       "      <td>15562</td>\n",
+       "      <td>108.754152</td>\n",
+       "      <td>209.42</td>\n",
+       "      <td>210.8200</td>\n",
+       "      <td>209.1100</td>\n",
+       "      <td>210.68</td>\n",
+       "      <td>97858418</td>\n",
+       "      <td>337780</td>\n",
+       "      <td>209.921410</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-02 05:00:00+00:00</th>\n",
+       "      <td>108.73</td>\n",
+       "      <td>108.7799</td>\n",
+       "      <td>108.61</td>\n",
+       "      <td>108.67</td>\n",
+       "      <td>2462787</td>\n",
+       "      <td>11581</td>\n",
+       "      <td>108.684692</td>\n",
+       "      <td>210.60</td>\n",
+       "      <td>211.0000</td>\n",
+       "      <td>208.2300</td>\n",
+       "      <td>208.54</td>\n",
+       "      <td>108069059</td>\n",
+       "      <td>367013</td>\n",
+       "      <td>209.563055</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-03 05:00:00+00:00</th>\n",
+       "      <td>108.41</td>\n",
+       "      <td>108.4100</td>\n",
+       "      <td>107.81</td>\n",
+       "      <td>107.89</td>\n",
+       "      <td>4634020</td>\n",
+       "      <td>16801</td>\n",
+       "      <td>108.040315</td>\n",
+       "      <td>208.90</td>\n",
+       "      <td>209.1500</td>\n",
+       "      <td>204.7511</td>\n",
+       "      <td>205.58</td>\n",
+       "      <td>166224154</td>\n",
+       "      <td>546768</td>\n",
+       "      <td>206.878936</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-04 05:00:00+00:00</th>\n",
+       "      <td>108.05</td>\n",
+       "      <td>108.3000</td>\n",
+       "      <td>108.00</td>\n",
+       "      <td>108.24</td>\n",
+       "      <td>2182057</td>\n",
+       "      <td>9796</td>\n",
+       "      <td>108.192232</td>\n",
+       "      <td>206.10</td>\n",
+       "      <td>209.9700</td>\n",
+       "      <td>205.9300</td>\n",
+       "      <td>209.66</td>\n",
+       "      <td>192878747</td>\n",
+       "      <td>556731</td>\n",
+       "      <td>208.178631</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-07 05:00:00+00:00</th>\n",
+       "      <td>108.30</td>\n",
+       "      <td>108.5800</td>\n",
+       "      <td>108.23</td>\n",
+       "      <td>108.40</td>\n",
+       "      <td>2143773</td>\n",
+       "      <td>9104</td>\n",
+       "      <td>108.460067</td>\n",
+       "      <td>209.20</td>\n",
+       "      <td>209.7295</td>\n",
+       "      <td>207.2000</td>\n",
+       "      <td>208.27</td>\n",
+       "      <td>102027111</td>\n",
+       "      <td>374705</td>\n",
+       "      <td>208.276128</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                              AGG                                     \\\n",
+       "                             open      high     low   close   volume   \n",
+       "timestamp                                                              \n",
+       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
+       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
+       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
+       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
+       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "\n",
+       "                                                      SPY                      \\\n",
+       "                          trade_count        vwap    open      high       low   \n",
+       "timestamp                                                                       \n",
+       "2015-12-01 05:00:00+00:00       15562  108.754152  209.42  210.8200  209.1100   \n",
+       "2015-12-02 05:00:00+00:00       11581  108.684692  210.60  211.0000  208.2300   \n",
+       "2015-12-03 05:00:00+00:00       16801  108.040315  208.90  209.1500  204.7511   \n",
+       "2015-12-04 05:00:00+00:00        9796  108.192232  206.10  209.9700  205.9300   \n",
+       "2015-12-07 05:00:00+00:00        9104  108.460067  209.20  209.7295  207.2000   \n",
+       "\n",
+       "                                                                      \n",
+       "                            close     volume trade_count        vwap  \n",
+       "timestamp                                                             \n",
+       "2015-12-01 05:00:00+00:00  210.68   97858418      337780  209.921410  \n",
+       "2015-12-02 05:00:00+00:00  208.54  108069059      367013  209.563055  \n",
+       "2015-12-03 05:00:00+00:00  205.58  166224154      546768  206.878936  \n",
+       "2015-12-04 05:00:00+00:00  209.66  192878747      556731  208.178631  \n",
+       "2015-12-07 05:00:00+00:00  208.27  102027111      374705  208.276128  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"7\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"7\" halign=\"left\">SPY</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2016-04-15 04:00:00+00:00</th>\n",
+       "      <td>110.80</td>\n",
+       "      <td>110.98</td>\n",
+       "      <td>110.750</td>\n",
+       "      <td>110.95</td>\n",
+       "      <td>1579648</td>\n",
+       "      <td>9657</td>\n",
+       "      <td>110.921389</td>\n",
+       "      <td>208.00</td>\n",
+       "      <td>208.1721</td>\n",
+       "      <td>207.40</td>\n",
+       "      <td>207.80</td>\n",
+       "      <td>75761615</td>\n",
+       "      <td>250856</td>\n",
+       "      <td>207.854515</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-04-18 04:00:00+00:00</th>\n",
+       "      <td>110.91</td>\n",
+       "      <td>110.95</td>\n",
+       "      <td>110.790</td>\n",
+       "      <td>110.94</td>\n",
+       "      <td>2146193</td>\n",
+       "      <td>10803</td>\n",
+       "      <td>110.851761</td>\n",
+       "      <td>207.11</td>\n",
+       "      <td>209.2800</td>\n",
+       "      <td>207.00</td>\n",
+       "      <td>209.25</td>\n",
+       "      <td>82530883</td>\n",
+       "      <td>268230</td>\n",
+       "      <td>208.623179</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-04-19 04:00:00+00:00</th>\n",
+       "      <td>110.94</td>\n",
+       "      <td>111.00</td>\n",
+       "      <td>110.770</td>\n",
+       "      <td>110.93</td>\n",
+       "      <td>2019189</td>\n",
+       "      <td>11773</td>\n",
+       "      <td>110.932164</td>\n",
+       "      <td>209.70</td>\n",
+       "      <td>210.2000</td>\n",
+       "      <td>208.94</td>\n",
+       "      <td>209.91</td>\n",
+       "      <td>87907889</td>\n",
+       "      <td>324657</td>\n",
+       "      <td>209.689686</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-04-20 04:00:00+00:00</th>\n",
+       "      <td>111.02</td>\n",
+       "      <td>111.03</td>\n",
+       "      <td>110.604</td>\n",
+       "      <td>110.66</td>\n",
+       "      <td>2376076</td>\n",
+       "      <td>11319</td>\n",
+       "      <td>110.798771</td>\n",
+       "      <td>209.90</td>\n",
+       "      <td>210.9200</td>\n",
+       "      <td>209.39</td>\n",
+       "      <td>210.07</td>\n",
+       "      <td>81015514</td>\n",
+       "      <td>266771</td>\n",
+       "      <td>210.152074</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-04-21 04:00:00+00:00</th>\n",
+       "      <td>110.52</td>\n",
+       "      <td>110.62</td>\n",
+       "      <td>110.450</td>\n",
+       "      <td>110.51</td>\n",
+       "      <td>2692797</td>\n",
+       "      <td>10838</td>\n",
+       "      <td>110.521580</td>\n",
+       "      <td>210.13</td>\n",
+       "      <td>210.2500</td>\n",
+       "      <td>208.65</td>\n",
+       "      <td>208.90</td>\n",
+       "      <td>85473874</td>\n",
+       "      <td>294905</td>\n",
+       "      <td>209.439796</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                              AGG                                    \\\n",
+       "                             open    high      low   close   volume   \n",
+       "timestamp                                                             \n",
+       "2016-04-15 04:00:00+00:00  110.80  110.98  110.750  110.95  1579648   \n",
+       "2016-04-18 04:00:00+00:00  110.91  110.95  110.790  110.94  2146193   \n",
+       "2016-04-19 04:00:00+00:00  110.94  111.00  110.770  110.93  2019189   \n",
+       "2016-04-20 04:00:00+00:00  111.02  111.03  110.604  110.66  2376076   \n",
+       "2016-04-21 04:00:00+00:00  110.52  110.62  110.450  110.51  2692797   \n",
+       "\n",
+       "                                                      SPY                    \\\n",
+       "                          trade_count        vwap    open      high     low   \n",
+       "timestamp                                                                     \n",
+       "2016-04-15 04:00:00+00:00        9657  110.921389  208.00  208.1721  207.40   \n",
+       "2016-04-18 04:00:00+00:00       10803  110.851761  207.11  209.2800  207.00   \n",
+       "2016-04-19 04:00:00+00:00       11773  110.932164  209.70  210.2000  208.94   \n",
+       "2016-04-20 04:00:00+00:00       11319  110.798771  209.90  210.9200  209.39   \n",
+       "2016-04-21 04:00:00+00:00       10838  110.521580  210.13  210.2500  208.65   \n",
+       "\n",
+       "                                                                     \n",
+       "                            close    volume trade_count        vwap  \n",
+       "timestamp                                                            \n",
+       "2016-04-15 04:00:00+00:00  207.80  75761615      250856  207.854515  \n",
+       "2016-04-18 04:00:00+00:00  209.25  82530883      268230  208.623179  \n",
+       "2016-04-19 04:00:00+00:00  209.91  87907889      324657  209.689686  \n",
+       "2016-04-20 04:00:00+00:00  210.07  81015514      266771  210.152074  \n",
+       "2016-04-21 04:00:00+00:00  208.90  85473874      294905  209.439796  "
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Use the Alpaca get_bars function to make the API call to get the 3 years worth of pricing data\n",
     "# The tickers and timeframe parameters should have been set in Part 1 of this activity \n",
     "# The start and end dates should be updated with the information set above\n",
     "# Remember to add the df property to the end of the call so the response is returned as a DataFrame\n",
-    "# YOUR CODE HERE\n",
+    "prices_df = alpaca.get_bars(\n",
+    "    tickers,\n",
+    "    timeframe,\n",
+    "    start=start_date_mc,\n",
+    "    end=end_date_mc,\n",
+    "    limit=limit_rows\n",
+    ").df\n",
     "\n",
-    "# Reorganize the DataFrame\n",
-    "# Separate ticker data\n",
-    "# YOUR CODE HERE\n",
+    "# Reorganize the DataFrame: Separate ticker data\n",
+    "AGG = prices_df[prices_df['symbol']=='AGG'].drop('symbol', axis=1)\n",
+    "SPY = prices_df[prices_df['symbol']=='SPY'].drop('symbol', axis=1)\n",
+    "\n",
+    "display(SPY.shape)\n",
+    "display(AGG.shape)\n",
     "\n",
     "# Concatenate the ticker DataFrames\n",
-    "# YOUR CODE HERE\n",
+    "df_prices= pd.DataFrame()\n",
+    "df_prices= pd.concat([AGG,SPY],axis=1, keys=['AGG','SPY'])\n",
     "\n",
-    "# Display both the first and last five rows of the DataFrame\n",
-    "# YOUR CODE HERE\n",
-    "# YOUR CODE HERE\n"
+    "display(df_prices.head())\n",
+    "display(df_prices.tail())"
    ]
   },
   {
@@ -702,38 +1211,702 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 209,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"8\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"8\" halign=\"left\">SPY</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>daily_return</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>daily_return</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2015-12-01 05:00:00+00:00</th>\n",
+       "      <td>108.54</td>\n",
+       "      <td>108.8400</td>\n",
+       "      <td>108.43</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>4259986</td>\n",
+       "      <td>15562</td>\n",
+       "      <td>108.754152</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>209.42</td>\n",
+       "      <td>210.8200</td>\n",
+       "      <td>209.1100</td>\n",
+       "      <td>210.68</td>\n",
+       "      <td>97858418</td>\n",
+       "      <td>337780</td>\n",
+       "      <td>209.921410</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-02 05:00:00+00:00</th>\n",
+       "      <td>108.73</td>\n",
+       "      <td>108.7799</td>\n",
+       "      <td>108.61</td>\n",
+       "      <td>108.67</td>\n",
+       "      <td>2462787</td>\n",
+       "      <td>11581</td>\n",
+       "      <td>108.684692</td>\n",
+       "      <td>-0.001378</td>\n",
+       "      <td>210.60</td>\n",
+       "      <td>211.0000</td>\n",
+       "      <td>208.2300</td>\n",
+       "      <td>208.54</td>\n",
+       "      <td>108069059</td>\n",
+       "      <td>367013</td>\n",
+       "      <td>209.563055</td>\n",
+       "      <td>-0.010158</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-03 05:00:00+00:00</th>\n",
+       "      <td>108.41</td>\n",
+       "      <td>108.4100</td>\n",
+       "      <td>107.81</td>\n",
+       "      <td>107.89</td>\n",
+       "      <td>4634020</td>\n",
+       "      <td>16801</td>\n",
+       "      <td>108.040315</td>\n",
+       "      <td>-0.007178</td>\n",
+       "      <td>208.90</td>\n",
+       "      <td>209.1500</td>\n",
+       "      <td>204.7511</td>\n",
+       "      <td>205.58</td>\n",
+       "      <td>166224154</td>\n",
+       "      <td>546768</td>\n",
+       "      <td>206.878936</td>\n",
+       "      <td>-0.014194</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-04 05:00:00+00:00</th>\n",
+       "      <td>108.05</td>\n",
+       "      <td>108.3000</td>\n",
+       "      <td>108.00</td>\n",
+       "      <td>108.24</td>\n",
+       "      <td>2182057</td>\n",
+       "      <td>9796</td>\n",
+       "      <td>108.192232</td>\n",
+       "      <td>0.003244</td>\n",
+       "      <td>206.10</td>\n",
+       "      <td>209.9700</td>\n",
+       "      <td>205.9300</td>\n",
+       "      <td>209.66</td>\n",
+       "      <td>192878747</td>\n",
+       "      <td>556731</td>\n",
+       "      <td>208.178631</td>\n",
+       "      <td>0.019846</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-07 05:00:00+00:00</th>\n",
+       "      <td>108.30</td>\n",
+       "      <td>108.5800</td>\n",
+       "      <td>108.23</td>\n",
+       "      <td>108.40</td>\n",
+       "      <td>2143773</td>\n",
+       "      <td>9104</td>\n",
+       "      <td>108.460067</td>\n",
+       "      <td>0.001478</td>\n",
+       "      <td>209.20</td>\n",
+       "      <td>209.7295</td>\n",
+       "      <td>207.2000</td>\n",
+       "      <td>208.27</td>\n",
+       "      <td>102027111</td>\n",
+       "      <td>374705</td>\n",
+       "      <td>208.276128</td>\n",
+       "      <td>-0.006630</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                              AGG                                     \\\n",
+       "                             open      high     low   close   volume   \n",
+       "timestamp                                                              \n",
+       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
+       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
+       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
+       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
+       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "\n",
+       "                                                                   SPY  \\\n",
+       "                          trade_count        vwap daily_return    open   \n",
+       "timestamp                                                                \n",
+       "2015-12-01 05:00:00+00:00       15562  108.754152          NaN  209.42   \n",
+       "2015-12-02 05:00:00+00:00       11581  108.684692    -0.001378  210.60   \n",
+       "2015-12-03 05:00:00+00:00       16801  108.040315    -0.007178  208.90   \n",
+       "2015-12-04 05:00:00+00:00        9796  108.192232     0.003244  206.10   \n",
+       "2015-12-07 05:00:00+00:00        9104  108.460067     0.001478  209.20   \n",
+       "\n",
+       "                                                                              \\\n",
+       "                               high       low   close     volume trade_count   \n",
+       "timestamp                                                                      \n",
+       "2015-12-01 05:00:00+00:00  210.8200  209.1100  210.68   97858418      337780   \n",
+       "2015-12-02 05:00:00+00:00  211.0000  208.2300  208.54  108069059      367013   \n",
+       "2015-12-03 05:00:00+00:00  209.1500  204.7511  205.58  166224154      546768   \n",
+       "2015-12-04 05:00:00+00:00  209.9700  205.9300  209.66  192878747      556731   \n",
+       "2015-12-07 05:00:00+00:00  209.7295  207.2000  208.27  102027111      374705   \n",
+       "\n",
+       "                                                    \n",
+       "                                 vwap daily_return  \n",
+       "timestamp                                           \n",
+       "2015-12-01 05:00:00+00:00  209.921410          NaN  \n",
+       "2015-12-02 05:00:00+00:00  209.563055    -0.010158  \n",
+       "2015-12-03 05:00:00+00:00  206.878936    -0.014194  \n",
+       "2015-12-04 05:00:00+00:00  208.178631     0.019846  \n",
+       "2015-12-07 05:00:00+00:00  208.276128    -0.006630  "
+      ]
+     },
+     "execution_count": 209,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Configure the Monte Carlo simulation to forecast 30 years cumulative returns\n",
     "# The weights should be split 40% to AGG and 60% to SPY.\n",
     "# Run 500 samples.\n",
-    "# YOUR CODE HERE\n",
+    "MC_thirty_year = MCSimulation(\n",
+    "    portfolio_data = df_prices,\n",
+    "    weights = [.60,.40],\n",
+    "    num_simulation = 500,\n",
+    "    num_trading_days = 252*30\n",
+    ")\n",
     "\n",
     "# Review the simulation input data\n",
-    "# YOUR CODE HERE\n"
+    "MC_thirty_year.portfolio_data.head()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 210,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 0.\n",
+      "Running Monte Carlo simulation number 10.\n",
+      "Running Monte Carlo simulation number 20.\n",
+      "Running Monte Carlo simulation number 30.\n",
+      "Running Monte Carlo simulation number 40.\n",
+      "Running Monte Carlo simulation number 50.\n",
+      "Running Monte Carlo simulation number 60.\n",
+      "Running Monte Carlo simulation number 70.\n",
+      "Running Monte Carlo simulation number 80.\n",
+      "Running Monte Carlo simulation number 90.\n",
+      "Running Monte Carlo simulation number 100.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
+      "  portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 110.\n",
+      "Running Monte Carlo simulation number 120.\n",
+      "Running Monte Carlo simulation number 130.\n",
+      "Running Monte Carlo simulation number 140.\n",
+      "Running Monte Carlo simulation number 150.\n",
+      "Running Monte Carlo simulation number 160.\n",
+      "Running Monte Carlo simulation number 170.\n",
+      "Running Monte Carlo simulation number 180.\n",
+      "Running Monte Carlo simulation number 190.\n",
+      "Running Monte Carlo simulation number 200.\n",
+      "Running Monte Carlo simulation number 210.\n",
+      "Running Monte Carlo simulation number 220.\n",
+      "Running Monte Carlo simulation number 230.\n",
+      "Running Monte Carlo simulation number 240.\n",
+      "Running Monte Carlo simulation number 250.\n",
+      "Running Monte Carlo simulation number 260.\n",
+      "Running Monte Carlo simulation number 270.\n",
+      "Running Monte Carlo simulation number 280.\n",
+      "Running Monte Carlo simulation number 290.\n",
+      "Running Monte Carlo simulation number 300.\n",
+      "Running Monte Carlo simulation number 310.\n",
+      "Running Monte Carlo simulation number 320.\n",
+      "Running Monte Carlo simulation number 330.\n",
+      "Running Monte Carlo simulation number 340.\n",
+      "Running Monte Carlo simulation number 350.\n",
+      "Running Monte Carlo simulation number 360.\n",
+      "Running Monte Carlo simulation number 370.\n",
+      "Running Monte Carlo simulation number 380.\n",
+      "Running Monte Carlo simulation number 390.\n",
+      "Running Monte Carlo simulation number 400.\n",
+      "Running Monte Carlo simulation number 410.\n",
+      "Running Monte Carlo simulation number 420.\n",
+      "Running Monte Carlo simulation number 430.\n",
+      "Running Monte Carlo simulation number 440.\n",
+      "Running Monte Carlo simulation number 450.\n",
+      "Running Monte Carlo simulation number 460.\n",
+      "Running Monte Carlo simulation number 470.\n",
+      "Running Monte Carlo simulation number 480.\n",
+      "Running Monte Carlo simulation number 490.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>7</th>\n",
+       "      <th>8</th>\n",
+       "      <th>9</th>\n",
+       "      <th>...</th>\n",
+       "      <th>490</th>\n",
+       "      <th>491</th>\n",
+       "      <th>492</th>\n",
+       "      <th>493</th>\n",
+       "      <th>494</th>\n",
+       "      <th>495</th>\n",
+       "      <th>496</th>\n",
+       "      <th>497</th>\n",
+       "      <th>498</th>\n",
+       "      <th>499</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>0.995416</td>\n",
+       "      <td>1.004481</td>\n",
+       "      <td>0.996797</td>\n",
+       "      <td>1.000518</td>\n",
+       "      <td>1.002498</td>\n",
+       "      <td>1.000430</td>\n",
+       "      <td>1.004572</td>\n",
+       "      <td>0.996509</td>\n",
+       "      <td>0.996917</td>\n",
+       "      <td>0.990032</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.996178</td>\n",
+       "      <td>1.006469</td>\n",
+       "      <td>0.998108</td>\n",
+       "      <td>1.000002</td>\n",
+       "      <td>0.996809</td>\n",
+       "      <td>0.999500</td>\n",
+       "      <td>1.002837</td>\n",
+       "      <td>1.002619</td>\n",
+       "      <td>0.990883</td>\n",
+       "      <td>1.000588</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>0.994230</td>\n",
+       "      <td>1.002156</td>\n",
+       "      <td>0.994374</td>\n",
+       "      <td>0.999545</td>\n",
+       "      <td>1.000504</td>\n",
+       "      <td>1.003181</td>\n",
+       "      <td>1.008086</td>\n",
+       "      <td>0.993343</td>\n",
+       "      <td>0.997515</td>\n",
+       "      <td>0.994913</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.993167</td>\n",
+       "      <td>1.007124</td>\n",
+       "      <td>0.993116</td>\n",
+       "      <td>1.005476</td>\n",
+       "      <td>0.999496</td>\n",
+       "      <td>0.995351</td>\n",
+       "      <td>1.007293</td>\n",
+       "      <td>1.002614</td>\n",
+       "      <td>0.996298</td>\n",
+       "      <td>0.991494</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>0.986593</td>\n",
+       "      <td>0.997533</td>\n",
+       "      <td>0.995173</td>\n",
+       "      <td>0.999482</td>\n",
+       "      <td>1.001568</td>\n",
+       "      <td>1.005330</td>\n",
+       "      <td>1.006448</td>\n",
+       "      <td>0.995043</td>\n",
+       "      <td>0.992387</td>\n",
+       "      <td>0.997687</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.985804</td>\n",
+       "      <td>1.003864</td>\n",
+       "      <td>0.988760</td>\n",
+       "      <td>1.010174</td>\n",
+       "      <td>1.007404</td>\n",
+       "      <td>1.000905</td>\n",
+       "      <td>1.010112</td>\n",
+       "      <td>0.994048</td>\n",
+       "      <td>1.003290</td>\n",
+       "      <td>0.995069</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0.982768</td>\n",
+       "      <td>1.002140</td>\n",
+       "      <td>0.999426</td>\n",
+       "      <td>1.000684</td>\n",
+       "      <td>0.993500</td>\n",
+       "      <td>1.006079</td>\n",
+       "      <td>1.012499</td>\n",
+       "      <td>1.001858</td>\n",
+       "      <td>0.984449</td>\n",
+       "      <td>0.982084</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.989665</td>\n",
+       "      <td>0.997920</td>\n",
+       "      <td>0.984155</td>\n",
+       "      <td>1.010970</td>\n",
+       "      <td>1.011985</td>\n",
+       "      <td>1.002254</td>\n",
+       "      <td>1.010482</td>\n",
+       "      <td>0.992693</td>\n",
+       "      <td>1.002736</td>\n",
+       "      <td>0.997603</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7556</th>\n",
+       "      <td>1.817856</td>\n",
+       "      <td>3.208326</td>\n",
+       "      <td>5.895986</td>\n",
+       "      <td>2.485260</td>\n",
+       "      <td>0.727375</td>\n",
+       "      <td>1.107474</td>\n",
+       "      <td>0.806208</td>\n",
+       "      <td>1.385431</td>\n",
+       "      <td>2.123156</td>\n",
+       "      <td>3.755214</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.234793</td>\n",
+       "      <td>1.279325</td>\n",
+       "      <td>1.242116</td>\n",
+       "      <td>2.465024</td>\n",
+       "      <td>2.057157</td>\n",
+       "      <td>2.136048</td>\n",
+       "      <td>3.538444</td>\n",
+       "      <td>2.083928</td>\n",
+       "      <td>0.815692</td>\n",
+       "      <td>1.376205</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7557</th>\n",
+       "      <td>1.802740</td>\n",
+       "      <td>3.195680</td>\n",
+       "      <td>5.902446</td>\n",
+       "      <td>2.473293</td>\n",
+       "      <td>0.731769</td>\n",
+       "      <td>1.106334</td>\n",
+       "      <td>0.805435</td>\n",
+       "      <td>1.376790</td>\n",
+       "      <td>2.113912</td>\n",
+       "      <td>3.762436</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.233659</td>\n",
+       "      <td>1.285466</td>\n",
+       "      <td>1.243618</td>\n",
+       "      <td>2.447239</td>\n",
+       "      <td>2.057369</td>\n",
+       "      <td>2.127757</td>\n",
+       "      <td>3.562791</td>\n",
+       "      <td>2.074030</td>\n",
+       "      <td>0.809907</td>\n",
+       "      <td>1.383094</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7558</th>\n",
+       "      <td>1.814689</td>\n",
+       "      <td>3.189384</td>\n",
+       "      <td>5.934780</td>\n",
+       "      <td>2.493697</td>\n",
+       "      <td>0.728540</td>\n",
+       "      <td>1.109729</td>\n",
+       "      <td>0.806788</td>\n",
+       "      <td>1.380329</td>\n",
+       "      <td>2.119938</td>\n",
+       "      <td>3.770996</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.233067</td>\n",
+       "      <td>1.290164</td>\n",
+       "      <td>1.242070</td>\n",
+       "      <td>2.453611</td>\n",
+       "      <td>2.064028</td>\n",
+       "      <td>2.132178</td>\n",
+       "      <td>3.548387</td>\n",
+       "      <td>2.063120</td>\n",
+       "      <td>0.809743</td>\n",
+       "      <td>1.385340</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7559</th>\n",
+       "      <td>1.815606</td>\n",
+       "      <td>3.185811</td>\n",
+       "      <td>5.947027</td>\n",
+       "      <td>2.475825</td>\n",
+       "      <td>0.727832</td>\n",
+       "      <td>1.114729</td>\n",
+       "      <td>0.807992</td>\n",
+       "      <td>1.378370</td>\n",
+       "      <td>2.129914</td>\n",
+       "      <td>3.766119</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.236337</td>\n",
+       "      <td>1.279740</td>\n",
+       "      <td>1.241750</td>\n",
+       "      <td>2.469166</td>\n",
+       "      <td>2.059569</td>\n",
+       "      <td>2.128260</td>\n",
+       "      <td>3.531976</td>\n",
+       "      <td>2.065823</td>\n",
+       "      <td>0.810442</td>\n",
+       "      <td>1.401024</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7560</th>\n",
+       "      <td>1.820084</td>\n",
+       "      <td>3.179302</td>\n",
+       "      <td>5.953199</td>\n",
+       "      <td>2.478205</td>\n",
+       "      <td>0.724302</td>\n",
+       "      <td>1.116184</td>\n",
+       "      <td>0.800249</td>\n",
+       "      <td>1.372267</td>\n",
+       "      <td>2.129224</td>\n",
+       "      <td>3.778292</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.241591</td>\n",
+       "      <td>1.276476</td>\n",
+       "      <td>1.238913</td>\n",
+       "      <td>2.473878</td>\n",
+       "      <td>2.058323</td>\n",
+       "      <td>2.135516</td>\n",
+       "      <td>3.545815</td>\n",
+       "      <td>2.054306</td>\n",
+       "      <td>0.811296</td>\n",
+       "      <td>1.402196</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>7561 rows × 500 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "           0         1         2         3         4         5         6    \\\n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
+       "1     0.995416  1.004481  0.996797  1.000518  1.002498  1.000430  1.004572   \n",
+       "2     0.994230  1.002156  0.994374  0.999545  1.000504  1.003181  1.008086   \n",
+       "3     0.986593  0.997533  0.995173  0.999482  1.001568  1.005330  1.006448   \n",
+       "4     0.982768  1.002140  0.999426  1.000684  0.993500  1.006079  1.012499   \n",
+       "...        ...       ...       ...       ...       ...       ...       ...   \n",
+       "7556  1.817856  3.208326  5.895986  2.485260  0.727375  1.107474  0.806208   \n",
+       "7557  1.802740  3.195680  5.902446  2.473293  0.731769  1.106334  0.805435   \n",
+       "7558  1.814689  3.189384  5.934780  2.493697  0.728540  1.109729  0.806788   \n",
+       "7559  1.815606  3.185811  5.947027  2.475825  0.727832  1.114729  0.807992   \n",
+       "7560  1.820084  3.179302  5.953199  2.478205  0.724302  1.116184  0.800249   \n",
+       "\n",
+       "           7         8         9    ...       490       491       492  \\\n",
+       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
+       "1     0.996509  0.996917  0.990032  ...  0.996178  1.006469  0.998108   \n",
+       "2     0.993343  0.997515  0.994913  ...  0.993167  1.007124  0.993116   \n",
+       "3     0.995043  0.992387  0.997687  ...  0.985804  1.003864  0.988760   \n",
+       "4     1.001858  0.984449  0.982084  ...  0.989665  0.997920  0.984155   \n",
+       "...        ...       ...       ...  ...       ...       ...       ...   \n",
+       "7556  1.385431  2.123156  3.755214  ...  1.234793  1.279325  1.242116   \n",
+       "7557  1.376790  2.113912  3.762436  ...  1.233659  1.285466  1.243618   \n",
+       "7558  1.380329  2.119938  3.770996  ...  1.233067  1.290164  1.242070   \n",
+       "7559  1.378370  2.129914  3.766119  ...  1.236337  1.279740  1.241750   \n",
+       "7560  1.372267  2.129224  3.778292  ...  1.241591  1.276476  1.238913   \n",
+       "\n",
+       "           493       494       495       496       497       498       499  \n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
+       "1     1.000002  0.996809  0.999500  1.002837  1.002619  0.990883  1.000588  \n",
+       "2     1.005476  0.999496  0.995351  1.007293  1.002614  0.996298  0.991494  \n",
+       "3     1.010174  1.007404  1.000905  1.010112  0.994048  1.003290  0.995069  \n",
+       "4     1.010970  1.011985  1.002254  1.010482  0.992693  1.002736  0.997603  \n",
+       "...        ...       ...       ...       ...       ...       ...       ...  \n",
+       "7556  2.465024  2.057157  2.136048  3.538444  2.083928  0.815692  1.376205  \n",
+       "7557  2.447239  2.057369  2.127757  3.562791  2.074030  0.809907  1.383094  \n",
+       "7558  2.453611  2.064028  2.132178  3.548387  2.063120  0.809743  1.385340  \n",
+       "7559  2.469166  2.059569  2.128260  3.531976  2.065823  0.810442  1.401024  \n",
+       "7560  2.473878  2.058323  2.135516  3.545815  2.054306  0.811296  1.402196  \n",
+       "\n",
+       "[7561 rows x 500 columns]"
+      ]
+     },
+     "execution_count": 210,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Run the Monte Carlo simulation to forecast 30 years cumulative returns\n",
-    "# YOUR CODE HERE\n"
+    "MC_thirty_year.calc_cumulative_return()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 211,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Visualize the 30-year Monte Carlo simulation by creating an\n",
     "# overlay line plot\n",
-    "# YOUR CODE HERE\n"
+    "# Plot simulation outcomes\n",
+    "MC_sim_line_plot = MC_thirty_year.plot_simulation()\n",
+    "\n",
+    "# Save the plot for future use\n",
+    "MC_sim_line_plot.get_figure().savefig(\"MC_thirty_year_sim_plot.png\", bbox_inches=\"tight\")\n"
    ]
   },
   {
@@ -745,13 +1918,29 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 213,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Visualize the probability distribution of the 30-year Monte Carlo simulation \n",
     "# by plotting a histogram\n",
-    "# YOUR CODE HERE\n"
+    "MC_sim_dist_plot = MC_thirty_year.plot_distribution()\n",
+    "\n",
+    "# Save the plot for future use\n",
+    "#MC_sim_dist_plot.get_figure().savefig('MC_fiveyear_dist_plot.png',bbox_inches='tight')"
    ]
   },
   {
@@ -763,17 +1952,37 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 214,
+   "metadata": {
+    "scrolled": true,
+    "tags": []
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "count           500.000000\n",
+      "mean              1.934888\n",
+      "std               0.829951\n",
+      "min               0.434936\n",
+      "25%               1.345831\n",
+      "50%               1.780129\n",
+      "75%               2.354013\n",
+      "max               6.142362\n",
+      "95% CI Lower      0.781430\n",
+      "95% CI Upper      3.644129\n",
+      "Name: 7560, dtype: float64\n"
+     ]
+    }
+   ],
    "source": [
     "# Generate summary statistics from the 30-year Monte Carlo simulation results\n",
     "# Save the results as a variable\n",
-    "# YOUR CODE HERE\n",
-    "\n",
+    "MC_summary_statistics = MC_thirty_year.summarize_cumulative_return()\n",
     "\n",
     "# Review the 30-year Monte Carlo summary statistics\n",
-    "# YOUR CODE HERE"
+    "print(MC_summary_statistics)"
    ]
   },
   {
@@ -789,26 +1998,47 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 215,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "$60,688.70\n"
+     ]
+    }
+   ],
    "source": [
     "# Print the current balance of the stock and bond portion of the members portfolio\n",
-    "# YOUR CODE HERE\n"
+    "print(tot_holdings_val)\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 217,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "There is a 95% chance that an initial investment of $60,688.70 in the portfolio\n",
+      "over the next 5 years will end within in the range of $47,423.99 and $221,157.44 \n"
+     ]
+    }
+   ],
    "source": [
     "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes for the current stock/bond portfolio\n",
-    "ci_lower_thirty_cumulative_return = # YOUR CODE HERE\n",
-    "ci_upper_thirty_cumulative_return = # YOUR CODE HERE\n",
+    "ci_lower_thirty_cumulative_return =  MC_summary_statistics[8] * total_stocks_bonds\n",
+    "ci_upper_thirty_cumulative_return =  MC_summary_statistics[9] * total_stocks_bonds\n",
     "\n",
     "# Print the result of your calculations\n",
-    "# YOUR CODE HERE\n"
+    "lower_cumltv_return = \"${:,.2f}\".format(ci_lower_thirty_cumulative_return)\n",
+    "upper_cumltv_return = \"${:,.2f}\".format(ci_upper_thirty_cumulative_return)\n",
+    "\n",
+    "print(f\"There is a 95% chance that an initial investment of {tot_holdings_val} in the portfolio\")\n",
+    "print(f\"over the next 30 years will end within in the range of {lower_cumltv_return} and {upper_cumltv_return} \")\n"
    ]
   },
   {
@@ -836,64 +2066,757 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 219,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"8\" halign=\"left\">AGG</th>\n",
+       "      <th colspan=\"8\" halign=\"left\">SPY</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>daily_return</th>\n",
+       "      <th>open</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>close</th>\n",
+       "      <th>volume</th>\n",
+       "      <th>trade_count</th>\n",
+       "      <th>vwap</th>\n",
+       "      <th>daily_return</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2015-12-01 05:00:00+00:00</th>\n",
+       "      <td>108.54</td>\n",
+       "      <td>108.8400</td>\n",
+       "      <td>108.43</td>\n",
+       "      <td>108.82</td>\n",
+       "      <td>4259986</td>\n",
+       "      <td>15562</td>\n",
+       "      <td>108.754152</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>209.42</td>\n",
+       "      <td>210.8200</td>\n",
+       "      <td>209.1100</td>\n",
+       "      <td>210.68</td>\n",
+       "      <td>97858418</td>\n",
+       "      <td>337780</td>\n",
+       "      <td>209.921410</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-02 05:00:00+00:00</th>\n",
+       "      <td>108.73</td>\n",
+       "      <td>108.7799</td>\n",
+       "      <td>108.61</td>\n",
+       "      <td>108.67</td>\n",
+       "      <td>2462787</td>\n",
+       "      <td>11581</td>\n",
+       "      <td>108.684692</td>\n",
+       "      <td>-0.001378</td>\n",
+       "      <td>210.60</td>\n",
+       "      <td>211.0000</td>\n",
+       "      <td>208.2300</td>\n",
+       "      <td>208.54</td>\n",
+       "      <td>108069059</td>\n",
+       "      <td>367013</td>\n",
+       "      <td>209.563055</td>\n",
+       "      <td>-0.010158</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-03 05:00:00+00:00</th>\n",
+       "      <td>108.41</td>\n",
+       "      <td>108.4100</td>\n",
+       "      <td>107.81</td>\n",
+       "      <td>107.89</td>\n",
+       "      <td>4634020</td>\n",
+       "      <td>16801</td>\n",
+       "      <td>108.040315</td>\n",
+       "      <td>-0.007178</td>\n",
+       "      <td>208.90</td>\n",
+       "      <td>209.1500</td>\n",
+       "      <td>204.7511</td>\n",
+       "      <td>205.58</td>\n",
+       "      <td>166224154</td>\n",
+       "      <td>546768</td>\n",
+       "      <td>206.878936</td>\n",
+       "      <td>-0.014194</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-04 05:00:00+00:00</th>\n",
+       "      <td>108.05</td>\n",
+       "      <td>108.3000</td>\n",
+       "      <td>108.00</td>\n",
+       "      <td>108.24</td>\n",
+       "      <td>2182057</td>\n",
+       "      <td>9796</td>\n",
+       "      <td>108.192232</td>\n",
+       "      <td>0.003244</td>\n",
+       "      <td>206.10</td>\n",
+       "      <td>209.9700</td>\n",
+       "      <td>205.9300</td>\n",
+       "      <td>209.66</td>\n",
+       "      <td>192878747</td>\n",
+       "      <td>556731</td>\n",
+       "      <td>208.178631</td>\n",
+       "      <td>0.019846</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2015-12-07 05:00:00+00:00</th>\n",
+       "      <td>108.30</td>\n",
+       "      <td>108.5800</td>\n",
+       "      <td>108.23</td>\n",
+       "      <td>108.40</td>\n",
+       "      <td>2143773</td>\n",
+       "      <td>9104</td>\n",
+       "      <td>108.460067</td>\n",
+       "      <td>0.001478</td>\n",
+       "      <td>209.20</td>\n",
+       "      <td>209.7295</td>\n",
+       "      <td>207.2000</td>\n",
+       "      <td>208.27</td>\n",
+       "      <td>102027111</td>\n",
+       "      <td>374705</td>\n",
+       "      <td>208.276128</td>\n",
+       "      <td>-0.006630</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                              AGG                                     \\\n",
+       "                             open      high     low   close   volume   \n",
+       "timestamp                                                              \n",
+       "2015-12-01 05:00:00+00:00  108.54  108.8400  108.43  108.82  4259986   \n",
+       "2015-12-02 05:00:00+00:00  108.73  108.7799  108.61  108.67  2462787   \n",
+       "2015-12-03 05:00:00+00:00  108.41  108.4100  107.81  107.89  4634020   \n",
+       "2015-12-04 05:00:00+00:00  108.05  108.3000  108.00  108.24  2182057   \n",
+       "2015-12-07 05:00:00+00:00  108.30  108.5800  108.23  108.40  2143773   \n",
+       "\n",
+       "                                                                   SPY  \\\n",
+       "                          trade_count        vwap daily_return    open   \n",
+       "timestamp                                                                \n",
+       "2015-12-01 05:00:00+00:00       15562  108.754152          NaN  209.42   \n",
+       "2015-12-02 05:00:00+00:00       11581  108.684692    -0.001378  210.60   \n",
+       "2015-12-03 05:00:00+00:00       16801  108.040315    -0.007178  208.90   \n",
+       "2015-12-04 05:00:00+00:00        9796  108.192232     0.003244  206.10   \n",
+       "2015-12-07 05:00:00+00:00        9104  108.460067     0.001478  209.20   \n",
+       "\n",
+       "                                                                              \\\n",
+       "                               high       low   close     volume trade_count   \n",
+       "timestamp                                                                      \n",
+       "2015-12-01 05:00:00+00:00  210.8200  209.1100  210.68   97858418      337780   \n",
+       "2015-12-02 05:00:00+00:00  211.0000  208.2300  208.54  108069059      367013   \n",
+       "2015-12-03 05:00:00+00:00  209.1500  204.7511  205.58  166224154      546768   \n",
+       "2015-12-04 05:00:00+00:00  209.9700  205.9300  209.66  192878747      556731   \n",
+       "2015-12-07 05:00:00+00:00  209.7295  207.2000  208.27  102027111      374705   \n",
+       "\n",
+       "                                                    \n",
+       "                                 vwap daily_return  \n",
+       "timestamp                                           \n",
+       "2015-12-01 05:00:00+00:00  209.921410          NaN  \n",
+       "2015-12-02 05:00:00+00:00  209.563055    -0.010158  \n",
+       "2015-12-03 05:00:00+00:00  206.878936    -0.014194  \n",
+       "2015-12-04 05:00:00+00:00  208.178631     0.019846  \n",
+       "2015-12-07 05:00:00+00:00  208.276128    -0.006630  "
+      ]
+     },
+     "execution_count": 219,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Configure a Monte Carlo simulation to forecast 10 years cumulative returns\n",
     "# The weights should be split 20% to AGG and 80% to SPY.\n",
     "# Run 500 samples.\n",
-    "# YOUR CODE HERE\n",
+    "MC_ten_year = MCSimulation(\n",
+    "    portfolio_data = df_prices,\n",
+    "    weights = [.80,.20],\n",
+    "    num_simulation = 500,\n",
+    "    num_trading_days = 252*10\n",
+    ")\n",
     "\n",
     "# Review the simulation input data\n",
-    "# YOUR CODE HERE\n"
+    "MC_ten_year.portfolio_data.head()\n",
+    "\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 220,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 0.\n",
+      "Running Monte Carlo simulation number 10.\n",
+      "Running Monte Carlo simulation number 20.\n",
+      "Running Monte Carlo simulation number 30.\n",
+      "Running Monte Carlo simulation number 40.\n",
+      "Running Monte Carlo simulation number 50.\n",
+      "Running Monte Carlo simulation number 60.\n",
+      "Running Monte Carlo simulation number 70.\n",
+      "Running Monte Carlo simulation number 80.\n",
+      "Running Monte Carlo simulation number 90.\n",
+      "Running Monte Carlo simulation number 100.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/comdrpaquiot/Desktop/Fintech-WorkSpace/Python_Project/Mod5_Challenge/GitHub_Uploader/Challenge5_FinancialPlanning/MCForecastTools.py:117: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`\n",
+      "  portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running Monte Carlo simulation number 110.\n",
+      "Running Monte Carlo simulation number 120.\n",
+      "Running Monte Carlo simulation number 130.\n",
+      "Running Monte Carlo simulation number 140.\n",
+      "Running Monte Carlo simulation number 150.\n",
+      "Running Monte Carlo simulation number 160.\n",
+      "Running Monte Carlo simulation number 170.\n",
+      "Running Monte Carlo simulation number 180.\n",
+      "Running Monte Carlo simulation number 190.\n",
+      "Running Monte Carlo simulation number 200.\n",
+      "Running Monte Carlo simulation number 210.\n",
+      "Running Monte Carlo simulation number 220.\n",
+      "Running Monte Carlo simulation number 230.\n",
+      "Running Monte Carlo simulation number 240.\n",
+      "Running Monte Carlo simulation number 250.\n",
+      "Running Monte Carlo simulation number 260.\n",
+      "Running Monte Carlo simulation number 270.\n",
+      "Running Monte Carlo simulation number 280.\n",
+      "Running Monte Carlo simulation number 290.\n",
+      "Running Monte Carlo simulation number 300.\n",
+      "Running Monte Carlo simulation number 310.\n",
+      "Running Monte Carlo simulation number 320.\n",
+      "Running Monte Carlo simulation number 330.\n",
+      "Running Monte Carlo simulation number 340.\n",
+      "Running Monte Carlo simulation number 350.\n",
+      "Running Monte Carlo simulation number 360.\n",
+      "Running Monte Carlo simulation number 370.\n",
+      "Running Monte Carlo simulation number 380.\n",
+      "Running Monte Carlo simulation number 390.\n",
+      "Running Monte Carlo simulation number 400.\n",
+      "Running Monte Carlo simulation number 410.\n",
+      "Running Monte Carlo simulation number 420.\n",
+      "Running Monte Carlo simulation number 430.\n",
+      "Running Monte Carlo simulation number 440.\n",
+      "Running Monte Carlo simulation number 450.\n",
+      "Running Monte Carlo simulation number 460.\n",
+      "Running Monte Carlo simulation number 470.\n",
+      "Running Monte Carlo simulation number 480.\n",
+      "Running Monte Carlo simulation number 490.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>7</th>\n",
+       "      <th>8</th>\n",
+       "      <th>9</th>\n",
+       "      <th>...</th>\n",
+       "      <th>490</th>\n",
+       "      <th>491</th>\n",
+       "      <th>492</th>\n",
+       "      <th>493</th>\n",
+       "      <th>494</th>\n",
+       "      <th>495</th>\n",
+       "      <th>496</th>\n",
+       "      <th>497</th>\n",
+       "      <th>498</th>\n",
+       "      <th>499</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>1.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>1.001996</td>\n",
+       "      <td>1.002826</td>\n",
+       "      <td>0.997476</td>\n",
+       "      <td>1.002529</td>\n",
+       "      <td>1.000997</td>\n",
+       "      <td>0.995456</td>\n",
+       "      <td>1.005885</td>\n",
+       "      <td>0.998914</td>\n",
+       "      <td>1.000563</td>\n",
+       "      <td>1.001268</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.006260</td>\n",
+       "      <td>1.003151</td>\n",
+       "      <td>1.000614</td>\n",
+       "      <td>0.996284</td>\n",
+       "      <td>1.004947</td>\n",
+       "      <td>1.006713</td>\n",
+       "      <td>0.998164</td>\n",
+       "      <td>1.003474</td>\n",
+       "      <td>1.002156</td>\n",
+       "      <td>0.999479</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>1.003022</td>\n",
+       "      <td>0.998928</td>\n",
+       "      <td>0.995606</td>\n",
+       "      <td>1.000174</td>\n",
+       "      <td>0.998829</td>\n",
+       "      <td>0.995395</td>\n",
+       "      <td>1.006507</td>\n",
+       "      <td>1.000087</td>\n",
+       "      <td>1.003424</td>\n",
+       "      <td>1.003162</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.012074</td>\n",
+       "      <td>1.004880</td>\n",
+       "      <td>0.998521</td>\n",
+       "      <td>0.993953</td>\n",
+       "      <td>1.015243</td>\n",
+       "      <td>1.008627</td>\n",
+       "      <td>1.006313</td>\n",
+       "      <td>1.001656</td>\n",
+       "      <td>1.002674</td>\n",
+       "      <td>0.996028</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>1.001654</td>\n",
+       "      <td>1.000618</td>\n",
+       "      <td>0.991449</td>\n",
+       "      <td>1.001103</td>\n",
+       "      <td>1.001637</td>\n",
+       "      <td>0.995827</td>\n",
+       "      <td>1.009066</td>\n",
+       "      <td>0.997249</td>\n",
+       "      <td>1.006752</td>\n",
+       "      <td>1.004234</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.009399</td>\n",
+       "      <td>1.005646</td>\n",
+       "      <td>1.000018</td>\n",
+       "      <td>0.992299</td>\n",
+       "      <td>1.017224</td>\n",
+       "      <td>1.010538</td>\n",
+       "      <td>1.007105</td>\n",
+       "      <td>0.998970</td>\n",
+       "      <td>1.000418</td>\n",
+       "      <td>0.996833</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0.997948</td>\n",
+       "      <td>1.001974</td>\n",
+       "      <td>0.990061</td>\n",
+       "      <td>1.001054</td>\n",
+       "      <td>0.997467</td>\n",
+       "      <td>0.997374</td>\n",
+       "      <td>1.008653</td>\n",
+       "      <td>1.003303</td>\n",
+       "      <td>1.007684</td>\n",
+       "      <td>1.008195</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.005372</td>\n",
+       "      <td>1.005334</td>\n",
+       "      <td>1.000705</td>\n",
+       "      <td>0.990215</td>\n",
+       "      <td>1.017017</td>\n",
+       "      <td>1.008011</td>\n",
+       "      <td>1.013148</td>\n",
+       "      <td>0.998100</td>\n",
+       "      <td>1.005241</td>\n",
+       "      <td>0.999292</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2516</th>\n",
+       "      <td>1.262176</td>\n",
+       "      <td>1.499660</td>\n",
+       "      <td>1.168768</td>\n",
+       "      <td>1.161150</td>\n",
+       "      <td>1.481129</td>\n",
+       "      <td>1.697437</td>\n",
+       "      <td>1.234175</td>\n",
+       "      <td>1.486514</td>\n",
+       "      <td>1.200787</td>\n",
+       "      <td>1.114178</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.120010</td>\n",
+       "      <td>1.611631</td>\n",
+       "      <td>1.601934</td>\n",
+       "      <td>1.384206</td>\n",
+       "      <td>1.472724</td>\n",
+       "      <td>1.435029</td>\n",
+       "      <td>1.319988</td>\n",
+       "      <td>1.255970</td>\n",
+       "      <td>1.399747</td>\n",
+       "      <td>1.369451</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2517</th>\n",
+       "      <td>1.258543</td>\n",
+       "      <td>1.503087</td>\n",
+       "      <td>1.166365</td>\n",
+       "      <td>1.162796</td>\n",
+       "      <td>1.481472</td>\n",
+       "      <td>1.699343</td>\n",
+       "      <td>1.234229</td>\n",
+       "      <td>1.494686</td>\n",
+       "      <td>1.193864</td>\n",
+       "      <td>1.112011</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.117217</td>\n",
+       "      <td>1.611016</td>\n",
+       "      <td>1.603360</td>\n",
+       "      <td>1.381922</td>\n",
+       "      <td>1.475802</td>\n",
+       "      <td>1.433202</td>\n",
+       "      <td>1.327488</td>\n",
+       "      <td>1.259867</td>\n",
+       "      <td>1.398071</td>\n",
+       "      <td>1.370947</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2518</th>\n",
+       "      <td>1.260777</td>\n",
+       "      <td>1.500234</td>\n",
+       "      <td>1.164549</td>\n",
+       "      <td>1.164125</td>\n",
+       "      <td>1.490087</td>\n",
+       "      <td>1.704825</td>\n",
+       "      <td>1.236687</td>\n",
+       "      <td>1.493343</td>\n",
+       "      <td>1.195503</td>\n",
+       "      <td>1.112368</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.115073</td>\n",
+       "      <td>1.611674</td>\n",
+       "      <td>1.599681</td>\n",
+       "      <td>1.386791</td>\n",
+       "      <td>1.475279</td>\n",
+       "      <td>1.436890</td>\n",
+       "      <td>1.326311</td>\n",
+       "      <td>1.267081</td>\n",
+       "      <td>1.398302</td>\n",
+       "      <td>1.368808</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2519</th>\n",
+       "      <td>1.264765</td>\n",
+       "      <td>1.499056</td>\n",
+       "      <td>1.168827</td>\n",
+       "      <td>1.160263</td>\n",
+       "      <td>1.492501</td>\n",
+       "      <td>1.706832</td>\n",
+       "      <td>1.236531</td>\n",
+       "      <td>1.498308</td>\n",
+       "      <td>1.194134</td>\n",
+       "      <td>1.109872</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.116673</td>\n",
+       "      <td>1.611887</td>\n",
+       "      <td>1.595173</td>\n",
+       "      <td>1.382228</td>\n",
+       "      <td>1.472086</td>\n",
+       "      <td>1.441390</td>\n",
+       "      <td>1.320130</td>\n",
+       "      <td>1.267262</td>\n",
+       "      <td>1.397987</td>\n",
+       "      <td>1.375935</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2520</th>\n",
+       "      <td>1.265419</td>\n",
+       "      <td>1.504478</td>\n",
+       "      <td>1.165455</td>\n",
+       "      <td>1.161619</td>\n",
+       "      <td>1.493244</td>\n",
+       "      <td>1.704969</td>\n",
+       "      <td>1.232784</td>\n",
+       "      <td>1.498358</td>\n",
+       "      <td>1.190762</td>\n",
+       "      <td>1.111974</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1.116493</td>\n",
+       "      <td>1.618708</td>\n",
+       "      <td>1.596545</td>\n",
+       "      <td>1.386699</td>\n",
+       "      <td>1.473046</td>\n",
+       "      <td>1.436758</td>\n",
+       "      <td>1.322485</td>\n",
+       "      <td>1.271118</td>\n",
+       "      <td>1.396610</td>\n",
+       "      <td>1.375737</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>2521 rows × 500 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "           0         1         2         3         4         5         6    \\\n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
+       "1     1.001996  1.002826  0.997476  1.002529  1.000997  0.995456  1.005885   \n",
+       "2     1.003022  0.998928  0.995606  1.000174  0.998829  0.995395  1.006507   \n",
+       "3     1.001654  1.000618  0.991449  1.001103  1.001637  0.995827  1.009066   \n",
+       "4     0.997948  1.001974  0.990061  1.001054  0.997467  0.997374  1.008653   \n",
+       "...        ...       ...       ...       ...       ...       ...       ...   \n",
+       "2516  1.262176  1.499660  1.168768  1.161150  1.481129  1.697437  1.234175   \n",
+       "2517  1.258543  1.503087  1.166365  1.162796  1.481472  1.699343  1.234229   \n",
+       "2518  1.260777  1.500234  1.164549  1.164125  1.490087  1.704825  1.236687   \n",
+       "2519  1.264765  1.499056  1.168827  1.160263  1.492501  1.706832  1.236531   \n",
+       "2520  1.265419  1.504478  1.165455  1.161619  1.493244  1.704969  1.232784   \n",
+       "\n",
+       "           7         8         9    ...       490       491       492  \\\n",
+       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
+       "1     0.998914  1.000563  1.001268  ...  1.006260  1.003151  1.000614   \n",
+       "2     1.000087  1.003424  1.003162  ...  1.012074  1.004880  0.998521   \n",
+       "3     0.997249  1.006752  1.004234  ...  1.009399  1.005646  1.000018   \n",
+       "4     1.003303  1.007684  1.008195  ...  1.005372  1.005334  1.000705   \n",
+       "...        ...       ...       ...  ...       ...       ...       ...   \n",
+       "2516  1.486514  1.200787  1.114178  ...  1.120010  1.611631  1.601934   \n",
+       "2517  1.494686  1.193864  1.112011  ...  1.117217  1.611016  1.603360   \n",
+       "2518  1.493343  1.195503  1.112368  ...  1.115073  1.611674  1.599681   \n",
+       "2519  1.498308  1.194134  1.109872  ...  1.116673  1.611887  1.595173   \n",
+       "2520  1.498358  1.190762  1.111974  ...  1.116493  1.618708  1.596545   \n",
+       "\n",
+       "           493       494       495       496       497       498       499  \n",
+       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
+       "1     0.996284  1.004947  1.006713  0.998164  1.003474  1.002156  0.999479  \n",
+       "2     0.993953  1.015243  1.008627  1.006313  1.001656  1.002674  0.996028  \n",
+       "3     0.992299  1.017224  1.010538  1.007105  0.998970  1.000418  0.996833  \n",
+       "4     0.990215  1.017017  1.008011  1.013148  0.998100  1.005241  0.999292  \n",
+       "...        ...       ...       ...       ...       ...       ...       ...  \n",
+       "2516  1.384206  1.472724  1.435029  1.319988  1.255970  1.399747  1.369451  \n",
+       "2517  1.381922  1.475802  1.433202  1.327488  1.259867  1.398071  1.370947  \n",
+       "2518  1.386791  1.475279  1.436890  1.326311  1.267081  1.398302  1.368808  \n",
+       "2519  1.382228  1.472086  1.441390  1.320130  1.267262  1.397987  1.375935  \n",
+       "2520  1.386699  1.473046  1.436758  1.322485  1.271118  1.396610  1.375737  \n",
+       "\n",
+       "[2521 rows x 500 columns]"
+      ]
+     },
+     "execution_count": 220,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Run the Monte Carlo simulation to forecast 10 years cumulative returns\n",
-    "# YOUR CODE HERE\n"
+    "# YOUR CODE HERE\n",
+    "MC_ten_year.calc_cumulative_return()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 221,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Visualize the 10-year Monte Carlo simulation by creating an\n",
     "# overlay line plot\n",
-    "# YOUR CODE HERE\n"
+    "MC_sim_line_plot_2nd = MC_ten_year.plot_simulation()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 222,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Visualize the probability distribution of the 10-year Monte Carlo simulation \n",
     "# by plotting a histogram\n",
-    "# YOUR CODE HERE\n"
+    "MC_sim_dist_plot_2nd = MC_ten_year.plot_distribution()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 223,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "count           500.000000\n",
+      "mean              1.361165\n",
+      "std               0.183951\n",
+      "min               0.881066\n",
+      "25%               1.226060\n",
+      "50%               1.353608\n",
+      "75%               1.477290\n",
+      "max               1.896707\n",
+      "95% CI Lower      1.045778\n",
+      "95% CI Upper      1.738758\n",
+      "Name: 2520, dtype: float64\n"
+     ]
+    }
+   ],
    "source": [
     "# Generate summary statistics from the 10-year Monte Carlo simulation results\n",
     "# Save the results as a variable\n",
-    "# YOUR CODE HERE\n",
+    "MC_summary_statistics_2nd = MC_ten_year.summarize_cumulative_return()\n",
     "\n",
     "\n",
     "# Review the 10-year Monte Carlo summary statistics\n",
-    "# YOUR CODE HERE"
+    "print(MC_summary_statistics_2nd)"
    ]
   },
   {
@@ -912,26 +2835,50 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 225,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "$60,688.70\n"
+     ]
+    }
+   ],
    "source": [
     "# Print the current balance of the stock and bond portion of the members portfolio\n",
-    "# YOUR CODE HERE\n"
+    "print(tot_holdings_val)\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 228,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "There is a 95% chance that an initial investment of $60,688.70 in the portfolio\n",
+      "over the next 30 years will end within in the range of $63,466.93 and $105,522.98 \n"
+     ]
+    }
+   ],
    "source": [
     "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes for the current stock/bond portfolio\n",
-    "ci_lower_ten_cumulative_return = # YOUR CODE HERE\n",
-    "ci_upper_ten_cumulative_return = # YOUR CODE HERE\n",
+    "ci_lower_ten_cumulative_return = MC_summary_statistics_2nd[8] * total_stocks_bonds\n",
+    "ci_upper_ten_cumulative_return = MC_summary_statistics_2nd[9] * total_stocks_bonds\n",
+    "\n",
     "\n",
     "# Print the result of your calculations\n",
-    "# YOUR CODE HERE\n"
+    "lower_cumltv_return_10y = \"${:,.2f}\".format(ci_lower_ten_cumulative_return)\n",
+    "upper_cumltv_return_10y = \"${:,.2f}\".format(ci_upper_ten_cumulative_return)\n",
+    "\n",
+    "print(f\"There is a 95% chance that an initial investment of {tot_holdings_val} in the portfolio\")\n",
+    "print(f\"over the next 30 years will end within in the range of {lower_cumltv_return_10y} and {upper_cumltv_return_10y} \")\n",
+    "\n",
+    "\n"
    ]
   },
   {
@@ -948,6 +2895,25 @@
     "**Answer** # YOUR ANSWER HERE"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 229,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Initial lower estimation $47,423.99, Final lower estimation $63,466.93\n",
+      "Initial upper estimation $221,157.44, Final upper estimation $105,522.98\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(f\"Initial lower estimation {lower_cumltv_return}, Final lower estimation {lower_cumltv_return_10y}\")\n",
+    "print(f\"Initial upper estimation {upper_cumltv_return}, Final upper estimation {upper_cumltv_return_10y }\")"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
@@ -958,7 +2924,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -972,7 +2938,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.11"
   }
  },
  "nbformat": 4,

commit 70f93dc8cd44f48eb971ccb643786abaedfeaa52
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Sat Apr 23 01:23:02 2022 -0400

    Update README.md
    
    Added a blurb about the api.env file

diff --git a/README.md b/README.md
index 5ec7b61..f18c510 100644
--- a/README.md
+++ b/README.md
@@ -43,4 +43,11 @@ It important whenever we are talking about prediction in any discipline, finance
 
 # Code
 
+## api.env
+```python
+# Load the environment variables from the .env file
+# by calling the load_dotenv function
+load_dotenv('app.env')
+```
+In order for this code to work for you, you would need to have API keys saved to a file kept in the same directory as your ipynb file. In this case we are using the Alpaca API. If you have not done so please visit the Alpaca Website now get your API Keys.
 # Resources

commit 7d36e53807dffd5a75de94b7eafdcbf507b00798
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:52:59 2022 -0400

    Update README.md

diff --git a/README.md b/README.md
index b54fabd..5ec7b61 100644
--- a/README.md
+++ b/README.md
@@ -30,6 +30,7 @@ import os
 import alpaca_trade_api as tradeapi
 import datetime as dt
 import pytz
+from MCForecastTools import MCSimulation
 ```
 
 # A word about predictions 

commit dacbd87c47e770743000d231e145fe2a4bb33d5f
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:36:06 2022 -0400

    Update README.md

diff --git a/README.md b/README.md
index ccff127..b54fabd 100644
--- a/README.md
+++ b/README.md
@@ -18,6 +18,7 @@ Part 2: Create a Planner for Retirement
 ## Requirements/ Installations
 The requirement.txt file in this repository contain all the packages you'll need in your conding env. Please make sure to install if you do not have them already. While you could use the package manager [pip](https://pip.pypa.io/en/stable/) to install these individually please make use of the requirement text in the repo.
 
+### pip install for Requirements
 ```bash
 python -m pip install -r requirements.txt
 ```

commit 61be62471a0a5958dc159f8d4fa8dc29a43b03f7
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:35:09 2022 -0400

    Update README.md
    
    more saves to the Readme

diff --git a/README.md b/README.md
index 6db1fb4..ccff127 100644
--- a/README.md
+++ b/README.md
@@ -22,13 +22,14 @@ The requirement.txt file in this repository contain all the packages you'll need
 python -m pip install -r requirements.txt
 ```
 ### Imports
-* pandas
-* numpy
-* pathlib
-* os
-* matplotlib (pyplot)
-* json
-* requests
+```python
+import numpy as np
+import pandas as pd
+import os
+import alpaca_trade_api as tradeapi
+import datetime as dt
+import pytz
+```
 
 # A word about predictions 
 ![9780812973815](https://user-images.githubusercontent.com/101449950/163919796-3c537be4-c4c0-46cc-81f3-9031d3faa786.jpeg)

commit 48ef911b60fb5b89591936246b692c31ff560b3e
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:30:14 2022 -0400

    Update README.md
    
    further beefed up the Readme

diff --git a/README.md b/README.md
index b4bb07d..6db1fb4 100644
--- a/README.md
+++ b/README.md
@@ -38,4 +38,6 @@ python -m pip install -r requirements.txt
 
 It important whenever we are talking about prediction in any discipline, finance of course included, to acknowledge our blind spots and the extent to which the  past can be a proxy for future occurrences. In thos exercise we used the Monte Carlo Method of simulation in order to predict future occurences in order to help credit union members plan for the future. 
 
+# Code
+
 # Resources

commit 86894a021d850142a64e6129872d168145812985
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:29:24 2022 -0400

    Add files via upload
    
    added the MCFOrecastTools.py file

diff --git a/Utils/MCForecastTools.py b/Utils/MCForecastTools.py
new file mode 100644
index 0000000..1c0f465
--- /dev/null
+++ b/Utils/MCForecastTools.py
@@ -0,0 +1,172 @@
+# Import libraries and dependencies
+import numpy as np
+import pandas as pd
+import os
+import alpaca_trade_api as tradeapi
+import datetime as dt
+import pytz
+
+class MCSimulation:
+    """
+    A Python class for runnning Monte Carlo simulation on portfolio price data. 
+    
+    ...
+    
+    Attributes
+    ----------
+    portfolio_data : pandas.DataFrame
+        portfolio dataframe
+    weights: list(float)
+        portfolio investment breakdown
+    nSim: int
+        number of samples in simulation
+    nTrading: int
+        number of trading days to simulate
+    simulated_return : pandas.DataFrame
+        Simulated data from Monte Carlo
+    confidence_interval : pandas.Series
+        the 95% confidence intervals for simulated final cumulative returns
+        
+    """
+    
+    def __init__(self, portfolio_data, weights="", num_simulation=1000, num_trading_days=252):
+        """
+        Constructs all the necessary attributes for the MCSimulation object.
+
+        Parameters
+        ----------
+        portfolio_data: pandas.DataFrame
+            DataFrame containing stock price information from Alpaca API
+        weights: list(float)
+            A list fractions representing percentage of total investment per stock. DEFAULT: Equal distribution
+        num_simulation: int
+            Number of simulation samples. DEFAULT: 1000 simulation samples
+        num_trading_days: int
+            Number of trading days to simulate. DEFAULT: 252 days (1 year of business days)
+        """
+        
+        # Check to make sure that all attributes are set
+        if not isinstance(portfolio_data, pd.DataFrame):
+            raise TypeError("portfolio_data must be a Pandas DataFrame")
+            
+        # Set weights if empty, otherwise make sure sum of weights equals one.
+        if weights == "":
+            num_stocks = len(portfolio_data.columns.get_level_values(0).unique())
+            weights = [1.0/num_stocks for s in range(0,num_stocks)]
+        else:
+            if round(sum(weights),2) < .99:
+                raise AttributeError("Sum of portfolio weights must equal one.")
+        
+        # Calculate daily return if not within dataframe
+        if not "daily_return" in portfolio_data.columns.get_level_values(1).unique():
+            close_df = portfolio_data.xs('close',level=1,axis=1).pct_change()
+            tickers = portfolio_data.columns.get_level_values(0).unique()
+            column_names = [(x,"daily_return") for x in tickers]
+            close_df.columns = pd.MultiIndex.from_tuples(column_names)
+            portfolio_data = portfolio_data.merge(close_df,left_index=True,right_index=True).reindex(columns=tickers,level=0)    
+        
+        # Set class attributes
+        self.portfolio_data = portfolio_data
+        self.weights = weights
+        self.nSim = num_simulation
+        self.nTrading = num_trading_days
+        self.simulated_return = ""
+        
+    def calc_cumulative_return(self):
+        """
+        Calculates the cumulative return of a stock over time using a Monte Carlo simulation (Brownian motion with drift).
+
+        """
+        
+        # Get closing prices of each stock
+        last_prices = self.portfolio_data.xs('close',level=1,axis=1)[-1:].values.tolist()[0]
+        
+        # Calculate the mean and standard deviation of daily returns for each stock
+        daily_returns = self.portfolio_data.xs('daily_return',level=1,axis=1)
+        mean_returns = daily_returns.mean().tolist()
+        std_returns = daily_returns.std().tolist()
+        
+        # Initialize empty Dataframe to hold simulated prices
+        portfolio_cumulative_returns = pd.DataFrame()
+        
+        # Run the simulation of projecting stock prices 'nSim' number of times
+        for n in range(self.nSim):
+        
+            if n % 10 == 0:
+                print(f"Running Monte Carlo simulation number {n}.")
+        
+            # Create a list of lists to contain the simulated values for each stock
+            simvals = [[p] for p in last_prices]
+    
+            # For each stock in our data:
+            for s in range(len(last_prices)):
+
+                # Simulate the returns for each trading day
+                for i in range(self.nTrading):
+        
+                    # Calculate the simulated price using the last price within the list
+                    simvals[s].append(simvals[s][-1] * (1 + np.random.normal(mean_returns[s], std_returns[s])))
+    
+            # Calculate the daily returns of simulated prices
+            sim_df = pd.DataFrame(simvals).T.pct_change()
+    
+            # Use the `dot` function with the weights to multiply weights with each column's simulated daily returns
+            sim_df = sim_df.dot(self.weights)
+    
+            # Calculate the normalized, cumulative return series
+            portfolio_cumulative_returns[n] = (1 + sim_df.fillna(0)).cumprod()
+        
+        # Set attribute to use in plotting
+        self.simulated_return = portfolio_cumulative_returns
+        
+        # Calculate 95% confidence intervals for final cumulative returns
+        self.confidence_interval = portfolio_cumulative_returns.iloc[-1, :].quantile(q=[0.025, 0.975])
+        
+        return portfolio_cumulative_returns
+    
+    def plot_simulation(self):
+        """
+        Visualizes the simulated stock trajectories using calc_cumulative_return method.
+
+        """ 
+        
+        # Check to make sure that simulation has run previously. 
+        if not isinstance(self.simulated_return,pd.DataFrame):
+            self.calc_cumulative_return()
+            
+        # Use Pandas plot function to plot the return data
+        plot_title = f"{self.nSim} Simulations of Cumulative Portfolio Return Trajectories Over the Next {self.nTrading} Trading Days."
+        return self.simulated_return.plot(legend=None,title=plot_title)
+    
+    def plot_distribution(self):
+        """
+        Visualizes the distribution of cumulative returns simulated using calc_cumulative_return method.
+
+        """
+        
+        # Check to make sure that simulation has run previously. 
+        if not isinstance(self.simulated_return,pd.DataFrame):
+            self.calc_cumulative_return()
+        
+        # Use the `plot` function to create a probability distribution histogram of simulated ending prices
+        # with markings for a 95% confidence interval
+        plot_title = f"Distribution of Final Cumuluative Returns Across All {self.nSim} Simulations"
+        plt = self.simulated_return.iloc[-1, :].plot(kind='hist', bins=10,density=True,title=plot_title)
+        plt.axvline(self.confidence_interval.iloc[0], color='r')
+        plt.axvline(self.confidence_interval.iloc[1], color='r')
+        return plt
+    
+    def summarize_cumulative_return(self):
+        """
+        Calculate final summary statistics for Monte Carlo simulated stock data.
+        
+        """
+        
+        # Check to make sure that simulation has run previously. 
+        if not isinstance(self.simulated_return,pd.DataFrame):
+            self.calc_cumulative_return()
+            
+        metrics = self.simulated_return.iloc[-1].describe()
+        ci_series = self.confidence_interval
+        ci_series.index = ["95% CI Lower","95% CI Upper"]
+        return metrics.append(ci_series)
\ No newline at end of file

commit 81e0ee2ac364d51d32711da775a6cea02a9db231
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:28:37 2022 -0400

    Create app.txt
    
    created the utils folder

diff --git a/Utils/app.txt b/Utils/app.txt
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/Utils/app.txt
@@ -0,0 +1 @@
+

commit 527367c9b06a70d795e8b3b6bd4aa1ff02c7b5f2
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Tue Apr 19 00:27:16 2022 -0400

    Update README.md
    
    Beefed up the README.md

diff --git a/README.md b/README.md
index db35049..b4bb07d 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,41 @@
-# Challenge5_FinancialPlanning
\ No newline at end of file
+# Challenge5_FinancialPlanning
+![istockphoto-1166136976-612x612](https://user-images.githubusercontent.com/101449950/163918164-07cdbf72-1d52-4216-85bd-007ef3ba2575.jpeg)
+
+## Background
+My client in this exercise is a credit union. I need to build a tool to help the credit union members evaluate their financial health. That's very vague, however the credit union board wants its members to be able to assess their monthly budgets. They should also be able to forecast a reasonably effective retirement plan based on their current holdings of cryptocurrencies, stocks, and bonds. 
+
+### Project Outline
+Part 1: Create a Financial Planner for Emergencies
+  1. Evaluate the Cryptocurrency Wallet by Using the Requests Library
+  2. Evaluate the Stock and Bond Holdings by Using the Alpaca SDK
+  3. Evaluate the Emergency Fund
+
+Part 2: Create a Planner for Retirement
+  1. Create the Monte Carlo Simulation
+  2. Analyze the Retirement Portfolio Forecasts
+  3. Forecast Cumulative Returns in 10 Years
+
+## Requirements/ Installations
+The requirement.txt file in this repository contain all the packages you'll need in your conding env. Please make sure to install if you do not have them already. While you could use the package manager [pip](https://pip.pypa.io/en/stable/) to install these individually please make use of the requirement text in the repo.
+
+```bash
+python -m pip install -r requirements.txt
+```
+### Imports
+* pandas
+* numpy
+* pathlib
+* os
+* matplotlib (pyplot)
+* json
+* requests
+
+# A word about predictions 
+![9780812973815](https://user-images.githubusercontent.com/101449950/163919796-3c537be4-c4c0-46cc-81f3-9031d3faa786.jpeg)
+
+> “Consider a turkey that is fed every day. Every single feeding will firm up the bird’s belief that it is the general rule of life to be fed every day by friendly members of the human race “looking out for its best interests,” as a politician would say. On the afternoon of the Wednesday before Thanksgiving, something unexpected will happen to the turkey. It will incur a revision of belief.*” 
+― Nassim Nicholas Taleb, The Black Swan: The Impact of the Highly Improbable
+
+It important whenever we are talking about prediction in any discipline, finance of course included, to acknowledge our blind spots and the extent to which the  past can be a proxy for future occurrences. In thos exercise we used the Monte Carlo Method of simulation in order to predict future occurences in order to help credit union members plan for the future. 
+
+# Resources

commit 6b88757ed66c669907096387524d32effd19bc97
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Mon Apr 18 23:59:37 2022 -0400

    Add files via upload
    
    added the financial_planning_tools.ipynb

diff --git a/financial_planning_tools.ipynb b/financial_planning_tools.ipynb
new file mode 100644
index 0000000..f950857
--- /dev/null
+++ b/financial_planning_tools.ipynb
@@ -0,0 +1,980 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Financial Planning with APIs and Simulations\n",
+    "\n",
+    "In this Challenge, you’ll create two financial analysis tools by using a single Jupyter notebook:\n",
+    "\n",
+    "Part 1: A financial planner for emergencies. The members will be able to use this tool to visualize their current savings. The members can then determine if they have enough reserves for an emergency fund.\n",
+    "\n",
+    "Part 2: A financial planner for retirement. This tool will forecast the performance of their retirement portfolio in 30 years. To do this, the tool will make an Alpaca API call via the Alpaca SDK to get historical price data for use in Monte Carlo simulations.\n",
+    "\n",
+    "You’ll use the information from the Monte Carlo simulation to answer questions about the portfolio in your Jupyter notebook.\n",
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Import the required libraries and dependencies\n",
+    "import os\n",
+    "import requests\n",
+    "import json\n",
+    "import pandas as pd\n",
+    "from dotenv import load_dotenv\n",
+    "import alpaca_trade_api as tradeapi\n",
+    "from MCForecastTools import MCSimulation\n",
+    "\n",
+    "%matplotlib inline"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Load the environment variables from the .env file\n",
+    "#by calling the load_dotenv function\n",
+    "load_dotenv()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Part 1: Create a Financial Planner for Emergencies"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Evaluate the Cryptocurrency Wallet by Using the Requests Library\n",
+    "\n",
+    "In this section, you’ll determine the current value of a member’s cryptocurrency wallet. You’ll collect the current prices for the Bitcoin and Ethereum cryptocurrencies by using the Python Requests library. For the prototype, you’ll assume that the member holds the 1.2 Bitcoins (BTC) and 5.3 Ethereum coins (ETH). To do all this, complete the following steps:\n",
+    "\n",
+    "1. Create a variable named `monthly_income`, and set its value to `12000`.\n",
+    "\n",
+    "2. Use the Requests library to get the current price (in US dollars) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints that the starter code supplies.\n",
+    "\n",
+    "3. Navigate the JSON response object to access the current price of each coin, and store each in a variable.\n",
+    "\n",
+    "    > **Hint** Note the specific identifier for each cryptocurrency in the API JSON response. The Bitcoin identifier is `1`, and the Ethereum identifier is `1027`.\n",
+    "\n",
+    "4. Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet.\n",
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# The current number of coins for each cryptocurrency asset held in the portfolio.\n",
+    "btc_coins = 1.2\n",
+    "eth_coins = 5.3"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 1: Create a variable named `monthly_income`, and set its value to `12000`."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# The monthly amount for the member's household income\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Review the endpoint URLs for the API calls to Free Crypto API in order to get the current pricing information for both BTC and ETH."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# The Free Crypto API Call endpoint URLs for the held cryptocurrency assets\n",
+    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=USD\"\n",
+    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=USD\""
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 2. Use the Requests library to get the current price (in US dollars) of Bitcoin (BTC) and Ethereum (ETH) by using the API endpoints that the starter code supplied."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Using the Python requests library, make an API call to access the current price of BTC\n",
+    "btc_response = # YOUR CODE HERE\n",
+    "\n",
+    "# Use the json.dumps function to review the response data from the API call\n",
+    "# Use the indent and sort_keys parameters to make the response object readable\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Using the Python requests library, make an API call to access the current price ETH\n",
+    "eth_response = # YOUR CODE HERE\n",
+    "\n",
+    "# Use the json.dumps function to review the response data from the API call\n",
+    "# Use the indent and sort_keys parameters to make the response object readable\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 3: Navigate the JSON response object to access the current price of each coin, and store each in a variable."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Navigate the BTC response object to access the current price of BTC\n",
+    "btc_price = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the current price of BTC\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Navigate the BTC response object to access the current price of ETH\n",
+    "eth_price = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the current price of ETH\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Step 4: Calculate the value, in US dollars, of the current amount of each cryptocurrency and of the entire cryptocurrency wallet."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Compute the current value of the BTC holding \n",
+    "btc_value = # YOUR CODE HERE\n",
+    "\n",
+    "# Print current value of your holding in BTC\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Compute the current value of the ETH holding \n",
+    "eth_value = # YOUR CODE HERE\n",
+    "\n",
+    "# Print current value of your holding in ETH\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Compute the total value of the cryptocurrency wallet\n",
+    "# Add the value of the BTC holding to the value of the ETH holding\n",
+    "total_crypto_wallet = # YOUR CODE HERE\n",
+    "\n",
+    "# Print current cryptocurrency wallet balance\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Evaluate the Stock and Bond Holdings by Using the Alpaca SDK\n",
+    "\n",
+    "In this section, you’ll determine the current value of a member’s stock and bond holdings. You’ll make an API call to Alpaca via the Alpaca SDK to get the current closing prices of the SPDR S&P 500 ETF Trust (ticker: SPY) and of the iShares Core US Aggregate Bond ETF (ticker: AGG). For the prototype, assume that the member holds 110 shares of SPY, which represents the stock portion of their portfolio, and 200 shares of AGG, which represents the bond portion. To do all this, complete the following steps:\n",
+    "\n",
+    "1. In the `Starter_Code` folder, create an environment file (`.env`) to store the values of your Alpaca API key and Alpaca secret key.\n",
+    "\n",
+    "2. Set the variables for the Alpaca API and secret keys. Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object. In this object, include the parameters for the Alpaca API key, the secret key, and the version number.\n",
+    "\n",
+    "3. Set the following parameters for the Alpaca API call:\n",
+    "\n",
+    "    - `tickers`: Use the tickers for the member’s stock and bond holdings.\n",
+    "\n",
+    "    - `timeframe`: Use a time frame of one day.\n",
+    "\n",
+    "    - `start_date` and `end_date`: Use the same date for these parameters, and format them with the date of the previous weekday (or `2020-08-07`). This is because you want the one closing price for the most-recent trading day.\n",
+    "\n",
+    "4. Get the current closing prices for `SPY` and `AGG` by using the Alpaca `get_bars` function. Format the response as a Pandas DataFrame by including the `df` property at the end of the `get_bars` function.\n",
+    "\n",
+    "5. Navigating the Alpaca response DataFrame, select the `SPY` and `AGG` closing prices, and store them as variables.\n",
+    "\n",
+    "6. Calculate the value, in US dollars, of the current amount of shares in each of the stock and bond portions of the portfolio, and print the results.\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Review the total number of shares held in both (SPY) and (AGG)."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Current amount of shares held in both the stock (SPY) and bond (AGG) portion of the portfolio.\n",
+    "spy_shares = 110\n",
+    "agg_shares = 200\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 1: In the `Starter_Code` folder, create an environment file (`.env`) to store the values of your Alpaca API key and Alpaca secret key."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 2: Set the variables for the Alpaca API and secret keys. Using the Alpaca SDK, create the Alpaca `tradeapi.REST` object. In this object, include the parameters for the Alpaca API key, the secret key, and the version number."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Set the variables for the Alpaca API and secret keys\n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Create the Alpaca tradeapi.REST object\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 3: Set the following parameters for the Alpaca API call:\n",
+    "\n",
+    "- `tickers`: Use the tickers for the member’s stock and bond holdings.\n",
+    "\n",
+    "- `timeframe`: Use a time frame of one day.\n",
+    "\n",
+    "- `start_date` and `end_date`: Use the same date for these parameters, and format them with the date of the previous weekday (or `2020-08-07`). This is because you want the one closing price for the most-recent trading day.\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Set the tickers for both the bond and stock portion of the portfolio\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Set timeframe to 1Day\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Format current date as ISO format\n",
+    "# Set both the start and end date at the date of your prior weekday \n",
+    "# This will give you the closing price of the previous trading day\n",
+    "# Alternatively you can use a start and end date of 2020-08-07\n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 4: Get the current closing prices for `SPY` and `AGG` by using the Alpaca `get_bars` function. Format the response as a Pandas DataFrame by including the `df` property at the end of the `get_bars` function."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Use the Alpaca get_bars function to get current closing prices the portfolio\n",
+    "# Be sure to set the `df` property after the function to format the response object as a DataFrame\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Reorganize the DataFrame\n",
+    "# Separate ticker data\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Concatenate the ticker DataFrames\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Review the first 5 rows of the Alpaca DataFrame\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 5: Navigating the Alpaca response DataFrame, select the `SPY` and `AGG` closing prices, and store them as variables."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Access the closing price for AGG from the Alpaca DataFrame\n",
+    "# Converting the value to a floating point number\n",
+    "agg_close_price = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the AGG closing price\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Access the closing price for SPY from the Alpaca DataFrame\n",
+    "# Converting the value to a floating point number\n",
+    "spy_close_price = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the SPY closing price\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 6: Calculate the value, in US dollars, of the current amount of shares in each of the stock and bond portions of the portfolio, and print the results."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Calculate the current value of the bond portion of the portfolio\n",
+    "agg_value = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the current value of the bond portfolio\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Calculate the current value of the stock portion of the portfolio\n",
+    "spy_value = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the current value of the stock portfolio\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Calculate the total value of the stock and bond portion of the portfolio\n",
+    "total_stocks_bonds = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the current balance of the stock and bond portion of the portfolio\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Calculate the total value of the member's entire savings portfolio\n",
+    "# Add the value of the cryptocurrency walled to the value of the total stocks and bonds\n",
+    "total_portfolio = # YOUR CODE HERE\n",
+    "\n",
+    "# Print current cryptocurrency wallet balance\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Evaluate the Emergency Fund\n",
+    "\n",
+    "In this section, you’ll use the valuations for the cryptocurrency wallet and for the stock and bond portions of the portfolio to determine if the credit union member has enough savings to build an emergency fund into their financial plan. To do this, complete the following steps:\n",
+    "\n",
+    "1. Create a Python list named `savings_data` that has two elements. The first element contains the total value of the cryptocurrency wallet. The second element contains the total value of the stock and bond portions of the portfolio.\n",
+    "\n",
+    "2. Use the `savings_data` list to create a Pandas DataFrame named `savings_df`, and then display this DataFrame. The function to create the DataFrame should take the following three parameters:\n",
+    "\n",
+    "    - `savings_data`: Use the list that you just created.\n",
+    "\n",
+    "    - `columns`: Set this parameter equal to a Python list with a single value called `amount`.\n",
+    "\n",
+    "    - `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n",
+    "\n",
+    "3. Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio. The y-axis of the pie chart uses `amount`. Be sure to add a title.\n",
+    "\n",
+    "4. Using Python, determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan. Ideally, an emergency fund should equal to three times the member’s monthly income. To do this, implement the following steps:\n",
+    "\n",
+    "    1. Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of $12000. (You set this earlier in Part 1).\n",
+    "\n",
+    "    2. Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
+    "\n",
+    "        1. If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
+    "\n",
+    "        2. Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
+    "\n",
+    "        3. Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 1: Create a Python list named `savings_data` that has two elements. The first element contains the total value of the cryptocurrency wallet. The second element contains the total value of the stock and bond portions of the portfolio."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Consolidate financial assets data into a Python list\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Review the Python list savings_data\n",
+    "# YOUR CODE HERE\n",
+    "    "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 2: Use the `savings_data` list to create a Pandas DataFrame named `savings_df`, and then display this DataFrame. The function to create the DataFrame should take the following three parameters:\n",
+    "\n",
+    "- `savings_data`: Use the list that you just created.\n",
+    "\n",
+    "- `columns`: Set this parameter equal to a Python list with a single value called `amount`.\n",
+    "\n",
+    "- `index`: Set this parameter equal to a Python list with the values of `crypto` and `stock/bond`.\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Create a Pandas DataFrame called savings_df \n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Display the savings_df DataFrame\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 3: Use the `savings_df` DataFrame to plot a pie chart that visualizes the composition of the member’s portfolio. The y-axis of the pie chart uses `amount`. Be sure to add a title."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Plot the total value of the member's portfolio (crypto and stock/bond) in a pie chart\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 4: Using Python, determine if the current portfolio has enough to create an emergency fund as part of the member’s financial plan. Ideally, an emergency fund should equal to three times the member’s monthly income. To do this, implement the following steps:\n",
+    "\n",
+    "Step 1. Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of 12000. (You set this earlier in Part 1).\n",
+    "\n",
+    "Step 2. Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
+    "\n",
+    "* If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
+    "\n",
+    "* Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
+    "\n",
+    "* Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "##### Step 4-1: Create a variable named `emergency_fund_value`, and set it equal to three times the value of the member’s `monthly_income` of 12000. (You set this earlier in Part 1)."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Create a variable named emergency_fund_value\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "##### Step 4-2: Create a series of three if statements to determine if the member’s total portfolio is large enough to fund the emergency portfolio:\n",
+    "\n",
+    "* If the total portfolio value is greater than the emergency fund value, display a message congratulating the member for having enough money in this fund.\n",
+    "\n",
+    "* Else if the total portfolio value is equal to the emergency fund value, display a message congratulating the member on reaching this important financial goal.\n",
+    "\n",
+    "* Else the total portfolio is less than the emergency fund value, so display a message showing how many dollars away the member is from reaching the goal. (Subtract the total portfolio value from the emergency fund value.)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Evaluate the possibility of creating an emergency fund with 3 conditions:\n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Part 2: Create a Financial Planner for Retirement"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Create the Monte Carlo Simulation\n",
+    "\n",
+    "In this section, you’ll use the MCForecastTools library to create a Monte Carlo simulation for the member’s savings portfolio. To do this, complete the following steps:\n",
+    "\n",
+    "1. Make an API call via the Alpaca SDK to get 3 years of historical closing prices for a traditional 60/40 portfolio split: 60% stocks (SPY) and 40% bonds (AGG).\n",
+    "\n",
+    "2. Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results.The following image shows the overlay line plot resulting from a simulation with these characteristics. However, because a random number generator is used to run each live Monte Carlo simulation, your image will differ slightly from this exact image:\n",
+    "\n",
+    "![A screenshot depicts the resulting plot.](Images/5-4-monte-carlo-line-plot.png)\n",
+    "\n",
+    "3. Plot the probability distribution of the Monte Carlo simulation. Plot the probability distribution of the Monte Carlo simulation. The following image shows the histogram plot resulting from a simulation with these characteristics. However, because a random number generator is used to run each live Monte Carlo simulation, your image will differ slightly from this exact image:\n",
+    "\n",
+    "![A screenshot depicts the histogram plot.](Images/5-4-monte-carlo-histogram.png)\n",
+    "\n",
+    "4. Generate the summary statistics for the Monte Carlo simulation.\n",
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 1: Make an API call via the Alpaca SDK to get 3 years of historical closing prices for a traditional 60/40 portfolio split: 60% stocks (SPY) and 40% bonds (AGG)."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Set start and end dates of 3 years back from your current date\n",
+    "# Alternatively, you can use an end date of 2020-08-07 and work 3 years back from that date \n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Set number of rows to 1000 to retrieve the maximum amount of rows\n",
+    "# YOUR CODE HERE"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Use the Alpaca get_bars function to make the API call to get the 3 years worth of pricing data\n",
+    "# The tickers and timeframe parameters should have been set in Part 1 of this activity \n",
+    "# The start and end dates should be updated with the information set above\n",
+    "# Remember to add the df property to the end of the call so the response is returned as a DataFrame\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Reorganize the DataFrame\n",
+    "# Separate ticker data\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Concatenate the ticker DataFrames\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Display both the first and last five rows of the DataFrame\n",
+    "# YOUR CODE HERE\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 2: Run a Monte Carlo simulation of 500 samples and 30 years for the 60/40 portfolio, and then plot the results."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Configure the Monte Carlo simulation to forecast 30 years cumulative returns\n",
+    "# The weights should be split 40% to AGG and 60% to SPY.\n",
+    "# Run 500 samples.\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Review the simulation input data\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Run the Monte Carlo simulation to forecast 30 years cumulative returns\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Visualize the 30-year Monte Carlo simulation by creating an\n",
+    "# overlay line plot\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 3: Plot the probability distribution of the Monte Carlo simulation."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Visualize the probability distribution of the 30-year Monte Carlo simulation \n",
+    "# by plotting a histogram\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Step 4: Generate the summary statistics for the Monte Carlo simulation."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Generate summary statistics from the 30-year Monte Carlo simulation results\n",
+    "# Save the results as a variable\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "\n",
+    "# Review the 30-year Monte Carlo summary statistics\n",
+    "# YOUR CODE HERE"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Analyze the Retirement Portfolio Forecasts\n",
+    "\n",
+    "Using the current value of only the stock and bond portion of the member's portfolio and the summary statistics that you generated from the Monte Carlo simulation, answer the following question in your Jupyter notebook:\n",
+    "\n",
+    "-  What are the lower and upper bounds for the expected value of the portfolio with a 95% confidence interval?\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Print the current balance of the stock and bond portion of the members portfolio\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes for the current stock/bond portfolio\n",
+    "ci_lower_thirty_cumulative_return = # YOUR CODE HERE\n",
+    "ci_upper_thirty_cumulative_return = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the result of your calculations\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Forecast Cumulative Returns in 10 Years\n",
+    "\n",
+    "The CTO of the credit union is impressed with your work on these planning tools but wonders if 30 years is a long time to wait until retirement. So, your next task is to adjust the retirement portfolio and run a new Monte Carlo simulation to find out if the changes will allow members to retire earlier.\n",
+    "\n",
+    "For this new Monte Carlo simulation, do the following: \n",
+    "\n",
+    "- Forecast the cumulative returns for 10 years from now. Because of the shortened investment horizon (30 years to 10 years), the portfolio needs to invest more heavily in the riskier asset&mdash;that is, stock&mdash;to help accumulate wealth for retirement. \n",
+    "\n",
+    "- Adjust the weights of the retirement portfolio so that the composition for the Monte Carlo simulation consists of 20% bonds and 80% stocks. \n",
+    "\n",
+    "- Run the simulation over 500 samples, and use the same data that the API call to Alpaca generated.\n",
+    "\n",
+    "- Based on the new Monte Carlo simulation, answer the following questions in your Jupyter notebook:\n",
+    "\n",
+    "    - Using the current value of only the stock and bond portion of the member's portfolio and the summary statistics that you generated from the new Monte Carlo simulation, what are the lower and upper bounds for the expected value of the portfolio (with the new weights) with a 95% confidence interval?\n",
+    "\n",
+    "    - Will weighting the portfolio more heavily toward stocks allow the credit union members to retire after only 10 years?\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Configure a Monte Carlo simulation to forecast 10 years cumulative returns\n",
+    "# The weights should be split 20% to AGG and 80% to SPY.\n",
+    "# Run 500 samples.\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "# Review the simulation input data\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Run the Monte Carlo simulation to forecast 10 years cumulative returns\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Visualize the 10-year Monte Carlo simulation by creating an\n",
+    "# overlay line plot\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Visualize the probability distribution of the 10-year Monte Carlo simulation \n",
+    "# by plotting a histogram\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Generate summary statistics from the 10-year Monte Carlo simulation results\n",
+    "# Save the results as a variable\n",
+    "# YOUR CODE HERE\n",
+    "\n",
+    "\n",
+    "# Review the 10-year Monte Carlo summary statistics\n",
+    "# YOUR CODE HERE"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Answer the following questions:"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Question: Using the current value of only the stock and bond portion of the member's portfolio and the summary statistics that you generated from the new Monte Carlo simulation, what are the lower and upper bounds for the expected value of the portfolio (with the new weights) with a 95% confidence interval?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Print the current balance of the stock and bond portion of the members portfolio\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes for the current stock/bond portfolio\n",
+    "ci_lower_ten_cumulative_return = # YOUR CODE HERE\n",
+    "ci_upper_ten_cumulative_return = # YOUR CODE HERE\n",
+    "\n",
+    "# Print the result of your calculations\n",
+    "# YOUR CODE HERE\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Question: Will weighting the portfolio more heavily to stocks allow the credit union members to retire after only 10 years?"
+   ]
+  },
+  {
+   "cell_type": "raw",
+   "metadata": {},
+   "source": [
+    "**Answer** # YOUR ANSWER HERE"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.7.3"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}

commit b969ee45d3d717fdc37f0eb827bb9015f69203a6
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Mon Apr 18 23:58:30 2022 -0400

    Add files via upload
    
    Added the  requirement.txt file

diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..3b82654
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,281 @@
+aiohttp==3.8.1
+aiosignal==1.2.0
+alabaster==0.7.12
+alpaca-trade-api==2.0.0
+anaconda-client @ file:///opt/concourse/worker/volumes/live/5c1221e3-9d1d-4a47-4706-4be28549d7d0/volume/anaconda-client_1635342564935/work
+anaconda-project @ file:///tmp/build/80754af9/anaconda-project_1626085644852/work
+anyio @ file:///opt/concourse/worker/volumes/live/4ff95164-2ca6-4efb-5c02-5afee907620d/volume/anyio_1617783322708/work/dist
+appdirs==1.4.4
+applaunchservices @ file:///Users/ktietz/demo/mc3/conda-bld/applaunchservices_1630511705208/work
+appnope @ file:///opt/concourse/worker/volumes/live/4f734db2-9ca8-4d8b-5b29-6ca15b4b4772/volume/appnope_1606859466979/work
+appscript @ file:///opt/concourse/worker/volumes/live/27fecc2e-9c75-4367-685d-08900606dee2/volume/appscript_1611427007141/work
+argcomplete @ file:///tmp/build/80754af9/argcomplete_1618920853202/work
+argh==0.26.2
+argon2-cffi @ file:///opt/concourse/worker/volumes/live/4afd07c8-7fc3-4a09-6326-d8c70269eb33/volume/argon2-cffi_1613037490059/work
+arrow==0.13.1
+asn1crypto @ file:///tmp/build/80754af9/asn1crypto_1596577642040/work
+astroid @ file:///opt/concourse/worker/volumes/live/1abcdc37-d4b6-466f-7b88-18a6ab5ae15b/volume/astroid_1628063153464/work
+astropy @ file:///opt/concourse/worker/volumes/live/90ce79e5-a2e9-4d47-54fe-0a9225b3a09c/volume/astropy_1629829227530/work
+async-generator==1.10
+async-timeout==4.0.2
+asynctest==0.13.0
+atomicwrites==1.4.0
+attrs @ file:///tmp/build/80754af9/attrs_1620827162558/work
+autopep8 @ file:///tmp/build/80754af9/autopep8_1620866417880/work
+Babel @ file:///tmp/build/80754af9/babel_1620871417480/work
+backcall @ file:///home/ktietz/src/ci/backcall_1611930011877/work
+backports.shutil-get-terminal-size @ file:///tmp/build/80754af9/backports.shutil_get_terminal_size_1608222128777/work
+beautifulsoup4 @ file:///tmp/build/80754af9/beautifulsoup4_1631874778482/work
+binaryornot @ file:///tmp/build/80754af9/binaryornot_1617751525010/work
+bitarray @ file:///opt/concourse/worker/volumes/live/3cc4df7a-009e-4478-51a5-f9ecebc8a94c/volume/bitarray_1629132855862/work
+bkcharts==0.2
+black==19.10b0
+bleach @ file:///tmp/build/80754af9/bleach_1628110601003/work
+bokeh @ file:///opt/concourse/worker/volumes/live/c2d6016a-c333-40a4-4145-d800242839d4/volume/bokeh_1635324485977/work
+boto==2.49.0
+Bottleneck==1.3.2
+brotlipy==0.7.0
+certifi==2021.10.8
+cffi @ file:///opt/concourse/worker/volumes/live/4a8f7628-1917-402a-5a6a-cdafcc3ec547/volume/cffi_1625814707380/work
+chardet @ file:///opt/concourse/worker/volumes/live/9efbf151-b45b-463d-6340-a5c399bf00b7/volume/chardet_1607706825988/work
+charset-normalizer @ file:///tmp/build/80754af9/charset-normalizer_1630003229654/work
+click==8.0.3
+cloudpickle @ file:///tmp/build/80754af9/cloudpickle_1632508026186/work
+clyent==1.2.2
+colorama @ file:///tmp/build/80754af9/colorama_1607707115595/work
+conda==4.11.0
+conda-content-trust @ file:///tmp/build/80754af9/conda-content-trust_1617045594566/work
+conda-pack @ file:///tmp/build/80754af9/conda-pack_1611163042455/work
+conda-package-handling @ file:///opt/concourse/worker/volumes/live/d106838d-eaa7-40fd-5437-9d95a7db5458/volume/conda-package-handling_1618262135990/work
+conda-token @ file:///tmp/build/80754af9/conda-token_1620076980546/work
+contextlib2 @ file:///Users/ktietz/demo/mc3/conda-bld/contextlib2_1630668244042/work
+cookiecutter @ file:///tmp/build/80754af9/cookiecutter_1617748928239/work
+cryptography @ file:///opt/concourse/worker/volumes/live/fab3474b-40c6-4001-48cb-802be615e43d/volume/cryptography_1633520388016/work
+cycler==0.10.0
+Cython @ file:///opt/concourse/worker/volumes/live/26be32c7-4a38-4e58-645b-e707c56500a0/volume/cython_1636035891511/work
+cytoolz==0.11.0
+daal4py==2021.3.0
+dask==2021.10.0
+debugpy @ file:///opt/concourse/worker/volumes/live/839ef258-c5a5-406a-56eb-b19da248f276/volume/debugpy_1629222714909/work
+decorator @ file:///tmp/build/80754af9/decorator_1632776554403/work
+defusedxml @ file:///tmp/build/80754af9/defusedxml_1615228127516/work
+deprecation==2.1.0
+diff-match-patch @ file:///Users/ktietz/demo/mc3/conda-bld/diff-match-patch_1630511840874/work
+distributed @ file:///opt/concourse/worker/volumes/live/4ee1ab94-ed4d-46af-757f-0de4f02a944a/volume/distributed_1635968213102/work
+docutils @ file:///opt/concourse/worker/volumes/live/4d08a32e-3c8a-4d2d-4b17-f3c8b943d07b/volume/docutils_1620827969351/work
+entrypoints==0.3
+et-xmlfile==1.1.0
+fastcache==1.1.0
+filelock @ file:///tmp/build/80754af9/filelock_1635402558181/work
+fire==0.4.0
+flake8 @ file:///tmp/build/80754af9/flake8_1620776156532/work
+Flask @ file:///home/ktietz/src/ci/flask_1611932660458/work
+fonttools==4.25.0
+frozenlist==1.3.0
+fsspec @ file:///tmp/build/80754af9/fsspec_1632413898837/work
+gevent @ file:///opt/concourse/worker/volumes/live/5c5a4a97-f7a8-4cb7-4c0a-c11e09faac61/volume/gevent_1628273693106/work
+glob2 @ file:///home/linux1/recipes/ci/glob2_1610991677669/work
+gmpy2==2.0.8
+greenlet @ file:///opt/concourse/worker/volumes/live/06c2d57a-b13b-43d3-6e7b-9007e74c6cc0/volume/greenlet_1628888143523/work
+h5py==2.10.0
+HeapDict @ file:///Users/ktietz/demo/mc3/conda-bld/heapdict_1630598515714/work
+html5lib @ file:///Users/ktietz/demo/mc3/conda-bld/html5lib_1629144453894/work
+idna @ file:///tmp/build/80754af9/idna_1622654382723/work
+imagecodecs @ file:///opt/concourse/worker/volumes/live/75a292b5-35c2-423d-5fe7-2fc61ee205bd/volume/imagecodecs_1635529123135/work
+imageio @ file:///tmp/build/80754af9/imageio_1617700267927/work
+imagesize @ file:///Users/ktietz/demo/mc3/conda-bld/imagesize_1628863108022/work
+importlib-metadata @ file:///opt/concourse/worker/volumes/live/f3c3a723-0733-424b-6c0e-af69ac95b59a/volume/importlib-metadata_1631916705096/work
+inflection==0.5.1
+iniconfig @ file:///home/linux1/recipes/ci/iniconfig_1610983019677/work
+install==1.3.5
+intervaltree @ file:///Users/ktietz/demo/mc3/conda-bld/intervaltree_1630511889664/work
+ipykernel @ file:///opt/concourse/worker/volumes/live/ee8433fe-cc9b-44e9-5a1b-fa2fa242a287/volume/ipykernel_1633545427588/work/dist/ipykernel-6.4.1-py3-none-any.whl
+ipython @ file:///opt/concourse/worker/volumes/live/4f59a646-357b-46a9-5853-fe226d6346b8/volume/ipython_1635944180000/work
+ipython-genutils @ file:///tmp/build/80754af9/ipython_genutils_1606773439826/work
+ipywidgets @ file:///tmp/build/80754af9/ipywidgets_1634143127070/work
+isort @ file:///tmp/build/80754af9/isort_1628603791788/work
+itsdangerous @ file:///tmp/build/80754af9/itsdangerous_1621432558163/work
+jdcal @ file:///Users/ktietz/demo/mc3/conda-bld/jdcal_1630584345063/work
+jedi @ file:///opt/concourse/worker/volumes/live/e0916850-3b97-4da2-5dee-49b0d9627cef/volume/jedi_1611333761589/work
+Jinja2 @ file:///tmp/build/80754af9/jinja2_1612213139570/work
+jinja2-time @ file:///tmp/build/80754af9/jinja2-time_1617751524098/work
+joblib @ file:///tmp/build/80754af9/joblib_1635411271373/work
+json5 @ file:///tmp/build/80754af9/json5_1624432770122/work
+jsonschema @ file:///Users/ktietz/demo/mc3/conda-bld/jsonschema_1630511932244/work
+jupyter==1.0.0
+jupyter-client @ file:///tmp/build/80754af9/jupyter_client_1616770841739/work
+jupyter-console @ file:///tmp/build/80754af9/jupyter_console_1616615302928/work
+jupyter-core @ file:///opt/concourse/worker/volumes/live/6b73e5dc-bbd2-46d9-5f46-d22fca163779/volume/jupyter_core_1633420135183/work
+jupyter-server @ file:///opt/concourse/worker/volumes/live/8c909028-d80d-4303-5883-52f907a3cf74/volume/jupyter_server_1616084052708/work
+jupyterlab @ file:///tmp/build/80754af9/jupyterlab_1635799997693/work
+jupyterlab-pygments @ file:///tmp/build/80754af9/jupyterlab_pygments_1601490720602/work
+jupyterlab-server @ file:///tmp/build/80754af9/jupyterlab_server_1633419203660/work
+jupyterlab-widgets @ file:///tmp/build/80754af9/jupyterlab_widgets_1609884341231/work
+keyring @ file:///opt/concourse/worker/volumes/live/f1176eb4-d3a7-4944-7338-93e057b9f0df/volume/keyring_1629321565267/work
+kiwisolver @ file:///opt/concourse/worker/volumes/live/1e6d28e8-da14-4365-7344-567a05db7efc/volume/kiwisolver_1612282399491/work
+lazy-object-proxy @ file:///opt/concourse/worker/volumes/live/62c2169c-fe65-46ff-434a-480cde88c65b/volume/lazy-object-proxy_1616529070475/work
+libarchive-c @ file:///tmp/build/80754af9/python-libarchive-c_1617780486945/work
+llvmlite==0.37.0
+locket==0.2.1
+lxml @ file:///opt/concourse/worker/volumes/live/a4879036-1466-48b6-6c8d-95f5cf7bc17d/volume/lxml_1616443217052/work
+MarkupSafe==1.1.1
+matplotlib @ file:///opt/concourse/worker/volumes/live/f670ab63-e220-495e-450b-14c9591f195b/volume/matplotlib-suite_1634667037960/work
+matplotlib-inline @ file:///tmp/build/80754af9/matplotlib-inline_1628242447089/work
+mccabe==0.6.1
+mistune==0.8.4
+mkl-fft==1.3.1
+mkl-random @ file:///opt/concourse/worker/volumes/live/133f1d0b-8fd8-4fa0-679e-7214401cbd75/volume/mkl_random_1626186083386/work
+mkl-service==2.4.0
+mock @ file:///tmp/build/80754af9/mock_1607622725907/work
+more-itertools @ file:///tmp/build/80754af9/more-itertools_1635423142362/work
+mpmath==1.2.1
+msgpack==1.0.3
+multidict==6.0.2
+multipledispatch==0.6.0
+munkres==1.1.4
+mypy-extensions==0.4.3
+nbclassic @ file:///tmp/build/80754af9/nbclassic_1616085367084/work
+nbclient @ file:///tmp/build/80754af9/nbclient_1614364831625/work
+nbconvert @ file:///opt/concourse/worker/volumes/live/84c159ef-8fac-4372-7b64-25f831ab7aec/volume/nbconvert_1624479064764/work
+nbformat @ file:///tmp/build/80754af9/nbformat_1617383369282/work
+nest-asyncio @ file:///tmp/build/80754af9/nest-asyncio_1613680548246/work
+networkx @ file:///tmp/build/80754af9/networkx_1633639043937/work
+nltk==3.6.5
+nose @ file:///tmp/build/80754af9/nose_1606773131901/work
+notebook @ file:///opt/concourse/worker/volumes/live/5e16463b-a230-4531-538f-78ce155ac619/volume/notebook_1635411653917/work
+numba @ file:///Users/builder/miniconda3/envs/prefect/conda-bld/numba_1635176853722/work
+numexpr @ file:///opt/concourse/worker/volumes/live/6bbc9b0e-ade0-40db-6ee6-74c979385fbb/volume/numexpr_1618856531941/work
+numpy @ file:///opt/concourse/worker/volumes/live/660b80d1-747e-493a-6b34-55d0a0e21650/volume/numpy_and_numpy_base_1626271790683/work
+numpydoc @ file:///tmp/build/80754af9/numpydoc_1605117425582/work
+olefile==0.46
+openpyxl @ file:///tmp/build/80754af9/openpyxl_1632777717936/work
+packaging @ file:///tmp/build/80754af9/packaging_1625611678980/work
+pandas==1.3.4
+pandocfilters @ file:///opt/concourse/worker/volumes/live/315ac9bb-93fd-4adc-6795-345692fcfaed/volume/pandocfilters_1605120446899/work
+parso @ file:///tmp/build/80754af9/parso_1617223946239/work
+partd @ file:///tmp/build/80754af9/partd_1618000087440/work
+path @ file:///opt/concourse/worker/volumes/live/fc3667f0-530f-488f-6e7e-0ce8e95587f8/volume/path_1623603888470/work
+pathlib2 @ file:///opt/concourse/worker/volumes/live/dd7bb6c0-2a61-4578-7856-988a10c938d4/volume/pathlib2_1625585688883/work
+pathspec==0.7.0
+patsy==0.5.2
+pep8==1.7.1
+pexpect @ file:///tmp/build/80754af9/pexpect_1605563209008/work
+pickleshare @ file:///tmp/build/80754af9/pickleshare_1606932040724/work
+Pillow==8.4.0
+pkginfo==1.7.1
+pluggy @ file:///opt/concourse/worker/volumes/live/f85b5d5a-abad-4f46-46ad-4ead594efa77/volume/pluggy_1615976299968/work
+ply==3.11
+poyo @ file:///tmp/build/80754af9/poyo_1617751526755/work
+prometheus-client @ file:///tmp/build/80754af9/prometheus_client_1623189609245/work
+prompt-toolkit @ file:///tmp/build/80754af9/prompt-toolkit_1633440160888/work
+psutil @ file:///opt/concourse/worker/volumes/live/8e01e0e9-ea07-4efa-7afb-fae37c1b9faa/volume/psutil_1612298009056/work
+ptyprocess @ file:///tmp/build/80754af9/ptyprocess_1609355006118/work/dist/ptyprocess-0.7.0-py2.py3-none-any.whl
+py @ file:///tmp/build/80754af9/py_1607971587848/work
+pycodestyle @ file:///tmp/build/80754af9/pycodestyle_1615748559966/work
+pycosat==0.6.3
+pycparser @ file:///tmp/build/80754af9/pycparser_1594388511720/work
+pycrypto==2.6.1
+pycurl==7.44.1
+pydocstyle @ file:///tmp/build/80754af9/pydocstyle_1621600989141/work
+pyerfa @ file:///opt/concourse/worker/volumes/live/cd791586-f5bd-4251-7c67-8a1e9c87309b/volume/pyerfa_1621560801630/work
+pyflakes @ file:///tmp/build/80754af9/pyflakes_1617200973297/work
+Pygments @ file:///tmp/build/80754af9/pygments_1629234116488/work
+pylint @ file:///opt/concourse/worker/volumes/live/4949af29-b8b7-4c3a-695e-9cc896d42904/volume/pylint_1627536796184/work
+pyls-spyder==0.4.0
+pyodbc===4.0.0-unsupported
+pyOpenSSL @ file:///tmp/build/80754af9/pyopenssl_1635333100036/work
+pyparsing @ file:///tmp/build/80754af9/pyparsing_1635766073266/work
+pyrsistent @ file:///opt/concourse/worker/volumes/live/24b7a9ab-37d8-463c-575f-69184f9cfbc8/volume/pyrsistent_1636111022304/work
+PySocks @ file:///opt/concourse/worker/volumes/live/ef943889-94fc-4539-798d-461c60b77804/volume/pysocks_1605305801690/work
+pytest==6.2.4
+python-dateutil @ file:///tmp/build/80754af9/python-dateutil_1626374649649/work
+python-dotenv==0.20.0
+python-lsp-black @ file:///tmp/build/80754af9/python-lsp-black_1634232156041/work
+python-lsp-jsonrpc==1.0.0
+python-lsp-server==1.2.4
+python-slugify @ file:///tmp/build/80754af9/python-slugify_1620405669636/work
+pytz==2021.3
+PyWavelets @ file:///opt/concourse/worker/volumes/live/4c8a2af4-1e43-4df6-4c7a-c73342176802/volume/pywavelets_1601658329224/work
+PyYAML==6.0
+pyzmq @ file:///opt/concourse/worker/volumes/live/4e55a046-5b01-4947-5877-1affb3793a28/volume/pyzmq_1628276012891/work
+QDarkStyle @ file:///tmp/build/80754af9/qdarkstyle_1617386714626/work
+qstylizer @ file:///tmp/build/80754af9/qstylizer_1617713584600/work/dist/qstylizer-0.1.10-py2.py3-none-any.whl
+QtAwesome @ file:///tmp/build/80754af9/qtawesome_1615991616277/work
+qtconsole @ file:///tmp/build/80754af9/qtconsole_1632739723211/work
+QtPy @ file:///tmp/build/80754af9/qtpy_1629397026935/work
+questionary==1.10.0
+regex @ file:///opt/concourse/worker/volumes/live/84f678f0-8362-498c-6bbf-bb60d23a10cc/volume/regex_1629302094173/work
+requests @ file:///tmp/build/80754af9/requests_1629994808627/work
+rope @ file:///tmp/build/80754af9/rope_1623703006312/work
+Rtree @ file:///opt/concourse/worker/volumes/live/5c63c097-8e47-46e3-5b05-c6294368c0c9/volume/rtree_1618420831358/work
+ruamel-yaml-conda @ file:///opt/concourse/worker/volumes/live/da6f10aa-e617-4894-45a9-cfdf5da681c3/volume/ruamel_yaml_1616016690897/work
+scikit-image==0.18.3
+scikit-learn @ file:///opt/concourse/worker/volumes/live/f0bd346e-3899-4f7a-66d4-2d56daf61c92/volume/scikit-learn_1621370395459/work
+scikit-learn-intelex==2021.20210714.100444
+scipy @ file:///opt/concourse/worker/volumes/live/4eabb14c-0fb3-4254-5fd3-317c14f470de/volume/scipy_1630606815835/work
+seaborn @ file:///tmp/build/80754af9/seaborn_1629307859561/work
+Send2Trash @ file:///tmp/build/80754af9/send2trash_1632406701022/work
+simplegeneric==0.8.1
+singledispatch @ file:///tmp/build/80754af9/singledispatch_1629321204894/work
+six @ file:///tmp/build/80754af9/six_1623709665295/work
+sniffio @ file:///opt/concourse/worker/volumes/live/838fa2d9-a35b-4591-50ce-1f1a39baa1df/volume/sniffio_1614030463440/work
+snowballstemmer @ file:///tmp/build/80754af9/snowballstemmer_1611258885636/work
+sortedcollections @ file:///tmp/build/80754af9/sortedcollections_1611172717284/work
+sortedcontainers @ file:///tmp/build/80754af9/sortedcontainers_1623949099177/work
+soupsieve @ file:///tmp/build/80754af9/soupsieve_1616183228191/work
+Sphinx==4.2.0
+sphinxcontrib-applehelp @ file:///home/ktietz/src/ci/sphinxcontrib-applehelp_1611920841464/work
+sphinxcontrib-devhelp @ file:///home/ktietz/src/ci/sphinxcontrib-devhelp_1611920923094/work
+sphinxcontrib-htmlhelp @ file:///tmp/build/80754af9/sphinxcontrib-htmlhelp_1623945626792/work
+sphinxcontrib-jsmath @ file:///home/ktietz/src/ci/sphinxcontrib-jsmath_1611920942228/work
+sphinxcontrib-qthelp @ file:///home/ktietz/src/ci/sphinxcontrib-qthelp_1611921055322/work
+sphinxcontrib-serializinghtml @ file:///tmp/build/80754af9/sphinxcontrib-serializinghtml_1624451540180/work
+sphinxcontrib-websupport @ file:///tmp/build/80754af9/sphinxcontrib-websupport_1597081412696/work
+spyder @ file:///opt/concourse/worker/volumes/live/6b0b8561-8f55-4068-4732-ea3f3f3160c6/volume/spyder_1636480242850/work
+spyder-kernels @ file:///opt/concourse/worker/volumes/live/08c3783b-b88d-4358-651a-0211c79f9096/volume/spyder-kernels_1634236934239/work
+SQLAlchemy @ file:///opt/concourse/worker/volumes/live/54c08a42-0aff-49ad-5caa-e2821b6e87d2/volume/sqlalchemy_1626948444796/work
+statsmodels @ file:///opt/concourse/worker/volumes/live/ad2325f1-005b-4882-5896-b1e5f01ee884/volume/statsmodels_1614023733346/work
+sympy @ file:///opt/concourse/worker/volumes/live/4770e9a8-eb14-4f10-617e-79931ac77090/volume/sympy_1635237084131/work
+tables==3.6.1
+TBB==0.2
+tblib @ file:///Users/ktietz/demo/mc3/conda-bld/tblib_1629402031467/work
+termcolor==1.1.0
+terminado==0.9.4
+testpath @ file:///tmp/build/80754af9/testpath_1624638946665/work
+text-unidecode @ file:///Users/ktietz/demo/mc3/conda-bld/text-unidecode_1629401354553/work
+textdistance @ file:///tmp/build/80754af9/textdistance_1612461398012/work
+threadpoolctl @ file:///Users/ktietz/demo/mc3/conda-bld/threadpoolctl_1629802263681/work
+three-merge @ file:///tmp/build/80754af9/three-merge_1607553261110/work
+tifffile @ file:///tmp/build/80754af9/tifffile_1627275862826/work
+tinycss @ file:///tmp/build/80754af9/tinycss_1617713798712/work
+toml @ file:///tmp/build/80754af9/toml_1616166611790/work
+toolz @ file:///home/linux1/recipes/ci/toolz_1610987900194/work
+tornado @ file:///opt/concourse/worker/volumes/live/d531d395-893c-4ca1-6a5f-717b318eb08c/volume/tornado_1606942307627/work
+tqdm @ file:///tmp/build/80754af9/tqdm_1635330843403/work
+traitlets @ file:///tmp/build/80754af9/traitlets_1632522747050/work
+typed-ast @ file:///opt/concourse/worker/volumes/live/22984077-cbd4-449f-4417-2737b09fa494/volume/typed-ast_1624953682230/work
+typing-extensions @ file:///tmp/build/80754af9/typing_extensions_1631814937681/work
+ujson @ file:///opt/concourse/worker/volumes/live/cb669503-d1bd-4eaa-748a-6413c0db0db0/volume/ujson_1611259509883/work
+unicodecsv==0.14.1
+Unidecode @ file:///tmp/build/80754af9/unidecode_1614712377438/work
+urllib3==1.26.7
+watchdog @ file:///opt/concourse/worker/volumes/live/f117e7cc-83ac-4e7e-5d84-678166bb17eb/volume/watchdog_1624955016747/work
+wcwidth @ file:///Users/ktietz/demo/mc3/conda-bld/wcwidth_1629357192024/work
+webencodings==0.5.1
+websocket-client==1.3.2
+websockets==10.2
+Werkzeug @ file:///tmp/build/80754af9/werkzeug_1635505089296/work
+whichcraft @ file:///tmp/build/80754af9/whichcraft_1617751293875/work
+widgetsnbextension==3.5.1
+wrapt==1.12.1
+wurlitzer @ file:///opt/concourse/worker/volumes/live/ad2e9a74-3dbe-4cec-4230-703594678d5c/volume/wurlitzer_1626947801829/work
+xlrd @ file:///tmp/build/80754af9/xlrd_1608072521494/work
+XlsxWriter @ file:///tmp/build/80754af9/xlsxwriter_1628603415431/work
+xlwings==0.24.9
+xlwt==1.3.0
+yapf @ file:///tmp/build/80754af9/yapf_1615749224965/work
+yarl==1.7.2
+zict==2.0.0
+zipp @ file:///tmp/build/80754af9/zipp_1633618647012/work
+zope.event==4.5.0
+zope.interface @ file:///opt/concourse/worker/volumes/live/e2e9977a-a3b7-4323-6e48-b61fb3ed115b/volume/zope.interface_1625036168072/work

commit ed97c11b4c46f0300029e20ef28afb2feff9d69b
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Mon Apr 18 23:57:11 2022 -0400

    Update .gitignore
    
    added the .env file to my gitignore

diff --git a/.gitignore b/.gitignore
index b6e4761..4a919f8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -127,3 +127,6 @@ dmypy.json
 
 # Pyre type checker
 .pyre/
+
+# Dat.Env Files
+**.env

commit bf8645d79e5147b17bb5357498623d6209d1e037
Author: davepoppins5073 <101449950+davepoppins5073@users.noreply.github.com>
Date:   Mon Apr 18 23:54:23 2022 -0400

    Initial commit

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b6e4761
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,129 @@
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+pip-wheel-metadata/
+share/python-wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.nox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+*.py,cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+db.sqlite3-journal
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# IPython
+profile_default/
+ipython_config.py
+
+# pyenv
+.python-version
+
+# pipenv
+#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
+#   However, in case of collaboration, if having platform-specific dependencies or dependencies
+#   having no cross-platform support, pipenv may install dependencies that don't work, or not
+#   install all needed dependencies.
+#Pipfile.lock
+
+# PEP 582; used by e.g. github.com/David-OConnor/pyflow
+__pypackages__/
+
+# Celery stuff
+celerybeat-schedule
+celerybeat.pid
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
+.dmypy.json
+dmypy.json
+
+# Pyre type checker
+.pyre/
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..db35049
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# Challenge5_FinancialPlanning
\ No newline at end of file
